{"version":3,"sources":["webpack:///static/js/1.22c8afe2de0fafe5d9eb.js","webpack:///./src/components/demo/demo.vue","webpack:///demo.vue","webpack:///./src/components/demo/demo.vue?3063","webpack:///./src/components/demo/demo.vue?a4b5","webpack:///./~/three/three.min.js","webpack:///./src/components/demo/demo.vue?76d8"],"names":["webpackJsonp","42","module","exports","__webpack_require__","__vue_script__","__vue_template__","__vue_styles__","__esModule","__vue_options__","options","template","computed","Object","keys","forEach","key","54","_interopRequireDefault","obj","default","defineProperty","value","_threeMin","_threeMin2","name","data","ready","initThree","canvas","document","querySelector","width","clientWidth","height","clientHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","setClearColor","initCamera","camera","PerspectiveCamera","position","x","y","z","up","lookAt","initScene","scene","Scene","initLight","light","DirectionalLight","set","add","initCube","geometry","Geometry","material","LineBasicMaterial","vertexColors","color1","Color","color2","point1","Vector3","point2","vertices","push","colors","line","Line","LineSegments","threeStart","clear","render","window","THREE","90","id","version","sources","names","mappings","file","sourceRoot","98","content","locals","269","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","REVISION","call","undefined","Number","EPSILON","Math","pow","sign","a","Function","prototype","get","this","toString","match","assign","TypeError","b","c","arguments","length","d","e","hasOwnProperty","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","setRGB","constructor","r","g","copy","setHex","setStyle","setScalar","floor","setHSL","euclideanModulo","clamp","parseFloat","console","warn","exec","min","parseInt","f","charAt","ColorKeywords","clone","copyGammaToLinear","copyLinearToGamma","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","h","s","l","max","k","getStyle","offsetHSL","addColors","addScalar","multiply","multiplyScalar","lerp","equals","fromArray","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","_x","_y","_z","_w","onChangeCallback","w","setFromEuler","Euler","Error","cos","sin","order","setFromAxisAngle","setFromRotationMatrix","elements","setFromUnitVectors","dot","abs","crossVectors","normalize","inverse","conjugate","lengthSq","multiplyQuaternions","premultiply","slerp","atan2","onChange","slerpFlat","n","p","m","q","Vector2","setX","setY","setComponent","getComponent","addVectors","addScaledVector","sub","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","clampLength","ceil","round","roundToZero","negate","lengthManhattan","angle","PI","distanceTo","distanceToSquared","setLength","lerpVectors","fromAttribute","itemSize","array","rotateAround","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","applyMatrix4","applyProjection","project","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","projectOnVector","projectOnPlane","reflect","angleTo","acos","setFromSpherical","phi","radius","theta","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","_order","DefaultOrder","RotationOrders","split","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","toVector3","Line3","start","end","center","delta","distanceSq","distance","at","closestPointToPointParameter","closestPointToPoint","Box2","Infinity","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","isEmpty","size","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","intersect","union","translate","Box3","setFromArray","setFromObject","updateMatrixWorld","traverse","BufferGeometry","attributes","intersectsSphere","intersectsPlane","normal","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","identity","setFromMatrix4","applyToVector3Array","applyToBuffer","getX","getY","getZ","setXYZ","determinant","transpose","flattenToArrayOffset","getNormalMatrix","transposeIntoArray","u","copyPosition","extractBasis","makeBasis","extractRotation","makeRotationFromEuler","v","C","D","A","B","G","H","M","O","N","E","K","I","L","multiplyToArray","getPosition","setPosition","scale","getMaxScaleOnAxis","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","compose","decompose","makeFrustum","makePerspective","DEG2RAD","makeOrthographic","Ray","origin","direction","recast","distanceSqToPoint","distanceSqToSegment","intersectSphere","distanceToPlane","intersectPlane","intersectBox","intersectTriangle","empty","getBoundingBox","Frustum","planes","Plane","setFromMatrix","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","distanceToSphere","projectPoint","orthoPoint","intersectLine","intersectsLine","coplanarPoint","Spherical","makeSafe","RAD2DEG","generateUUID","Array","random","join","mapLinear","smoothstep","smootherstep","random16","randInt","randFloat","randFloatSpread","degToRad","radToDeg","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","points","initFromArray","getPoint","getControlPointsArray","getLength","chunks","total","reparametrizeByArcLength","Triangle","barycoordFromPoint","setFromPointsAndIndices","area","midpoint","plane","Interpolant","parameterPositions","_cachedIndex","resultBuffer","sampleValues","valueSize","evaluate","afterEnd_","beforeStart_","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","CubicInterpolant","_offsetNext","_weightNext","_offsetPrev","_weightPrev","create","endingStart","endingEnd","DiscreteInterpolant","LinearInterpolant","QuaternionLinearInterpolant","Clock","autoStart","elapsedTime","oldTime","startTime","running","performance","Date","now","stop","getElapsedTime","getDelta","EventDispatcher","addEventListener","_listeners","indexOf","hasEventListener","removeEventListener","splice","dispatchEvent","type","target","Layers","mask","enable","toggle","disable","test","visible","raycast","children","Raycaster","ray","near","far","params","Mesh","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","OrthographicCamera","intersectObject","sort","intersectObjects","isArray","Object3D","Object3DIdCount","uuid","parent","DefaultUp","enumerable","rotation","quaternion","modelViewMatrix","normalMatrix","matrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","layers","receiveShadow","castShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","toJSON","metadata","geometries","materials","textures","images","generator","JSON","stringify","object","parse","Face3","vertexNormals","color","materialIndex","BufferAttribute","dynamic","updateRange","offset","count","normalized","needsUpdate","setDynamic","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","stride","InstancedInterleavedBuffer","InterleavedBufferAttribute","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","groupsNeedUpdate","lineDistancesNeedUpdate","colorsNeedUpdate","normalsNeedUpdate","uvsNeedUpdate","elementsNeedUpdate","verticesNeedUpdate","computeBoundingBox","fromBufferGeometry","index","uv","uv2","groups","computeFaceNormals","computeVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","faceNormals","computeTangents","computeLineDistances","merge","mergeMesh","mergeVertices","sortFacesByMaterialIndex","_id","parameters","normals","uvs","dispose","DirectGeometry","indices","uvs2","computeGroups","fromGeometry","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","__directGeometry","lineDistance","fromDirectGeometry","isNaN","normalizeNormals","toNonIndexed","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","_mixer","_clip","_localRoot","tracks","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_weightInterpolant","_timeScaleInterpolant","_byClipCacheIndex","_cacheIndex","loop","_loopCount","_startTime","time","_effectiveWeight","weight","_effectiveTimeScale","timeScale","repetitions","paused","enabled","clampWhenFinished","zeroSlopeAtEnd","zeroSlopeAtStart","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","duration","warp","crossFadeTo","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","_lendControlInterpolant","getMixer","getClip","getRoot","_root","_update","_updateTimeScale","_updateTime","_updateWeight","accumulate","loopCount","_setEndings","action","loopDelta","AnimationClip","resetDuration","trim","optimize","times","fps","KeyframeTrack","CreateFromMorphTargetSequence","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","animations","CreateClipsFromMorphTargetSequences","parseAnimation","flattenJSON","hierarchy","morphTarget","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","_initMemoryManager","_accuIndex","clipAction","_actionsByClip","actionByRoot","knownActions","_Action","_bindAction","_addInactiveAction","existingAction","stopAllAction","_actions","_nActiveActions","_bindings","_nActiveBindings","useCount","update","apply","uncacheClip","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","_bindingsByRootAndName","restoreOriginalState","_removeInactiveBinding","uncacheAction","referenceCount","_addInactiveBinding","PropertyMixer","PropertyBinding","binding","parsedPath","ValueTypeName","getValueSize","buffer","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","actions","inUse","bindings","controlInterpolants","rootNode","path","_controlInterpolantsResultBuffer","__cacheIndex","AnimationObjectGroup","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","objects","bindingsPerObject","uncache","subscribe_","unsubscribe_","arraySlice","isTypedArray","subarray","convertArray","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","TimeBufferType","values","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","getInterpolation","shift","_getTrackTypeForValueTypeName","interpolation","toLowerCase","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","node","findNode","nodeName","getValue","bind","setValue","objectName","propertyName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","bones","Versioning","None","NeedsUpdate","targetObject","MatrixWorldNeedsUpdate","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","Composite","_targetGroup","lastIndex","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","Audio","context","source","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","setBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","analyser","createAnalyser","fftSize","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","filter","removeFilter","getMasterVolume","setMasterVolume","listener","setOrientation","Camera","matrixWorldInverse","CubeCamera","renderTarget","WebGLRenderTargetCube","format","magFilter","minFilter","updateCubeMap","texture","generateMipmaps","activeCubeFace","setRenderTarget","zoom","left","right","top","bottom","updateProjectionMatrix","fov","focus","aspect","view","filmGauge","filmOffset","setFocalLength","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","StereoCamera","cameraL","cameraR","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","map","AmbientLight","shadow","DirectionalLightShadow","HemisphereLight","PointLight","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","load","XHRLoader","setResponseType","decodeAudioData","Cache","files","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","createMaterial","Handlers","setCrossOrigin","repeat","wrapS","wrapT","anisotropy","TextureLoader","MaterialLoader","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","setTimeout","XMLHttpRequest","overrideMimeType","open","response","status","itemEnd","itemError","responseType","withCredentials","send","itemStart","setPath","setWithCredentials","FontLoader","substring","Font","ImageLoader","createElement","src","JSONLoader","statusDomElement","_statusDomElement","texturePath","setTexturePath","influencesPerVertex","morphColors","animation","concat","LoadingManager","onStart","onLoad","onProgress","onError","BufferGeometryLoader","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","url","image","Texture","mapping","wrap","SkinnedMesh","mode","Group","levels","addLevel","CubeTextureLoader","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","isCubemap","Material","MaterialIdCount","lights","fog","blendSrc","blendDst","blendEquation","blendEquationAlpha","blendDstAlpha","blendSrcAlpha","depthFunc","clippingPlanes","clipShadows","precision","polygonOffset","polygonOffsetUnits","polygonOffsetFactor","premultipliedAlpha","overdraw","_needsUpdate","setValues","linewidth","linejoin","linecap","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinejoin","wireframeLinecap","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","shadow_vert","shadow_frag","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","encoding","toDataURL","getContext","drawImage","transformUv","DepthTexture","CanvasTexture","VideoTexture","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","distanceToRay","point","face","faceIndex","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","getMorphTargetIndexByName","P","Q","R","F","Bone","skin","Skeleton","useVertexTexture","identityMatrix","boneTextureHeight","boneTextureWidth","boneMatrices","boneTexture","calculateInverses","boneInverses","pose","bindMode","bindMatrix","bindMatrixInverse","pos","rotq","scl","normalizeSkinWeights","skinWeight","getObjectForDistance","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_vertex","displacementmap_pars_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_pars_fragment","encodings_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","uv_pars_fragment","uv_pars_vertex","uv_vertex","worldpos_vertex","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","physical","J","clearColor","init","scissor","ra","ya","$","viewport","ma","na","aa","ia","ea","fa","oa","Z","preventDefault","T","__image__webglTextureCube","t","deleteTexture","__webglInit","__webglTexture","ja","depthTexture","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","program","pa","releaseProgram","X","group","Ba","ba","numPlanes","W","ka","U","Y","ImmediateRenderObject","sortObjects","sa","qa","renderBufferImmediate","renderBufferDirect","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","ta","ua","za","setState","numClippingPlanes","lightsHash","S","hash","getParameters","getProgramCode","code","shaderID","__webglShader","acquireProgram","getAttributes","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","uniform","ambient","directional","spot","hemi","getUniforms","WebGLUniforms","seqWithValue","seq","uniformsList","dynamicUniforms","splitDynamic","useProgram","ca","logarithmicDepthBuffer","cameraPosition","setOptional","floatVertexTextures","WebGLRenderTarget","upload","evalDynamic","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","V","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","texImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","alpha","stencil","preserveDrawingBuffer","da","autoClearStencil","autoClearDepth","autoClearColor","autoClear","localClippingEnabled","gammaFactor","physicallyCorrectLights","gammaOutput","gammaInput","toneMapping","toneMappingWhitePoint","toneMappingExposure","autoScaleCubemaps","la","ga","Aa","va","wa","Ca","WebGLClipping","shadows","ha","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","Fa","Da","WebGL2RenderingContext","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLObjects","WebGLPrograms","xa","WebGLLights","Ga","WebGLBufferRenderer","Ha","WebGLIndexedBufferRenderer","capabilities","state","Ea","WebGLShadowMap","shadowMap","Ia","SpritePlugin","Ja","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","getPixelRatio","setPixelRatio","getSize","style","setViewport","setScissor","setScissorTest","getClearColor","getClearAlpha","setClearAlpha","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","resetGLState","initAttributes","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","normalArray","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","getWireframeAttribute","getAttributeBuffer","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","ELEMENT_ARRAY_BUFFER","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","LINE_STRIP","POINTS","renderInstances","beginShadows","endShadows","TEXTURE_CUBE_MAP","TEXTURE_2D","bindTexture","generateMipmap","setFaceCulling","setCullFace","allocTextureUnit","maxTextures","setTexture2D","__version","complete","createTexture","activeTexture","TEXTURE0","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","maxTextureSize","HTMLImageElement","HTMLCanvasElement","DEPTH_COMPONENT32F","getCompressedTextureFormats","compressedTexImage2D","setTexture","setTextureCube","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","getCurrentRenderTarget","createFramebuffer","COLOR_ATTACHMENT0","createRenderbuffer","scissorTest","activeMipMapLevel","readRenderTargetPixels","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","drawArraysInstancedANGLE","clippingState","drawElements","drawElementsInstancedANGLE","getExtension","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","getMaxPrecision","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","WebGLGeometries","__webglBuffer","deleteBuffer","_bufferGeometry","STATIC_DRAW","bufferSubData","WebGLProgram","envMapCubeUV","flatShading","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","shadowMapType","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","WebGLShader","attachShader","bindAttribLocation","linkProgram","getProgramInfoLog","getShaderInfoLog","getProgramParameter","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","runnable","programLog","prefix","deleteShader","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","destroy","deleteProgram","usedTimes","envMapMode","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","customDepthMaterial","customDistanceMaterial","renderSingleSided","renderReverseSided","USE_SHADOWMAP","BLEND","buffers","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","setStencilWrite","setStencilFunc","setStencilOp","setOp","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","lineWidth","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","setClear","colorMask","setLocked","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","STENCIL_TEST","stencilMask","stencilFunc","stencilOp","uniform1f","addr","uniform1i","uniform2fv","uniform2f","uniform3f","uniform3fv","uniform4fv","uniform4f","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniform2iv","uniform3iv","uniform4iv","uniform1fv","uniform1iv","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","TEXTURE1","copyTexImage2D","fillStyle","fillRect","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","ImageUtils","loadTexture","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","interpolate","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","triangulate","triangulateShape","isClockWise","b2","b3","Curve","getPointAt","getUtoTmapping","getPoints","getSpacedPoints","getLengths","__arcLengthDivisions","cacheArcLengths","updateArcLengths","getTangent","getTangentAt","CurvePath","curves","autoClose","closePath","LineCurve","getCurveLengths","cacheLengths","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","String","resolution","glyphs","Path","o","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","toShapes","fromPoints","args","QuadraticBezierCurve","CubicBezierCurve","splineThru","SplineCurve","absarc","absellipse","ellipse","EllipseCurve","Shape","froms","tos","hole","holes","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","extractAllPoints","shape","extractPoints","v1","v2","v0","v3","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","c0","c1","c2","c3","initNonuniformCatmullRom","initCatmullRom","calc","closed","tension","ClosedSplineCurve3","BoxGeometry","BoxBufferGeometry","CubeGeometry","CircleGeometry","CircleBufferGeometry","CylinderBufferGeometry","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","vert1","vert2","face1","face2","addShapeList","addShape","generateSideWallUV","generateTopUV","amount","bevelThickness","bevelSize","bevelSegments","bevelEnabled","curveSegments","steps","extrudePath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","reverse","binormals","LatheBufferGeometry","LatheGeometry","PlaneGeometry","PlaneBufferGeometry","RingBufferGeometry","RingGeometry","SphereGeometry","SphereBufferGeometry","TextGeometry","font","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","TorusKnotGeometry","taper","NoTaper","tangents","SinusoidalTaper","MAX_VALUE","PolyhedronGeometry","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","WireframeGeometry","AxisHelper","ArrowHelper","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","box","CameraHelper","pointMap","DirectionalLightHelper","EdgesHelper","FaceNormalsHelper","GridHelper","setColors","HemisphereLightHelper","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","root","SpotLightHelper","VertexNormalsHelper","WireframeHelper","MorphBlendMesh","animationsMap","animationsList","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","277"],"mappings":"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","file":"static/js/1.22c8afe2de0fafe5d9eb.js","sourcesContent":["webpackJsonp([1,3],{\n\n/***/ 42:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\tvar __vue_styles__ = {}\n\t__webpack_require__(98)\n\t__vue_script__ = __webpack_require__(54)\n\t__vue_template__ = __webpack_require__(277)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tvar __vue_options__ = typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports\n\tif (__vue_template__) {\n\t__vue_options__.template = __vue_template__\n\t}\n\tif (!__vue_options__.computed) __vue_options__.computed = {}\n\tObject.keys(__vue_styles__).forEach(function (key) {\n\tvar module = __vue_styles__[key]\n\t__vue_options__.computed[key] = function () { return module }\n\t})\n\n\n/***/ },\n\n/***/ 54:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _threeMin = __webpack_require__(269);\n\t\n\tvar _threeMin2 = _interopRequireDefault(_threeMin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'demo',\n\t  data: function data() {\n\t    return {};\n\t  },\n\t  ready: function ready() {\n\t    var scene = void 0,\n\t        camera = void 0,\n\t        renderer = void 0,\n\t        light = void 0,\n\t        width = void 0,\n\t        height = void 0;\n\t    function initThree() {\n\t      var canvas = document.querySelector('#canvas-box');\n\t      width = canvas.clientWidth / 2;\n\t      height = canvas.clientHeight;\n\t      renderer = new _threeMin2.default.WebGLRenderer({\n\t        antialias: true\n\t      });\n\t\n\t      renderer.setSize(width, height);\n\t      canvas.appendChild(renderer.domElement);\n\t      renderer.setClearColor(0xcccccc, 1.0);\n\t    }\n\t\n\t    function initCamera() {\n\t      camera = new _threeMin2.default.PerspectiveCamera(45, width / height, 1, 1000);\n\t      camera.position.x = 0;\n\t      camera.position.y = 1000;\n\t      camera.position.z = 0;\n\t      camera.up.x = 0;\n\t      camera.up.y = 0;\n\t      camera.up.z = 0;\n\t      camera.lookAt({ x: 0, y: 0, z: 0 });\n\t    }\n\t\n\t    function initScene() {\n\t      scene = new _threeMin2.default.Scene();\n\t    }\n\t\n\t    function initLight() {\n\t      light = new _threeMin2.default.DirectionalLight(0xFFFFFF, 1.0);\n\t      light.position.set(0, 1, 0);\n\t      scene.add(light);\n\t    }\n\t\n\t    function initCube() {\n\t      var geometry = new _threeMin2.default.Geometry();\n\t      var material = new _threeMin2.default.LineBasicMaterial({ vertexColors: true });\n\t      var color1 = new _threeMin2.default.Color(0x000000);\n\t      var color2 = new _threeMin2.default.Color(0xFFFFFF);\n\t      var point1 = new _threeMin2.default.Vector3(-30, 0, 30);\n\t      var point2 = new _threeMin2.default.Vector3(30, 0, -30);\n\t      geometry.vertices.push(point1);\n\t      geometry.vertices.push(point2);\n\t      geometry.colors.push(color1, color2);\n\t\n\t      var line = new _threeMin2.default.Line(geometry, material, _threeMin2.default.LineSegments);\n\t      scene.add(line);\n\t    }\n\t\n\t    function threeStart() {\n\t      initThree();\n\t      initCamera();\n\t      initScene();\n\t      initLight();\n\t      initCube();\n\t      renderer.clear();\n\t      renderer.render(scene, camera);\n\t    }\n\t    threeStart();\n\t    window.scene = scene;\n\t    window.THREE = _threeMin2.default;\n\t  }\n\t};\n\n/***/ },\n\n/***/ 90:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(15)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"demo.vue\",\"sourceRoot\":\"webpack://\"}]);\n\t\n\t// exports\n\n\n/***/ },\n\n/***/ 98:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(90);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(28)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./../../../node_modules/sass-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./demo.vue\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./../../../node_modules/sass-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./demo.vue\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 269:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var self = self || {};// threejs.org/license\r\n\t'use strict';var THREE={REVISION:\"77\"}; true?!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):\"undefined\"!==typeof exports&&\"undefined\"!==typeof module&&(module.exports=THREE);void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52));void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,\"name\",{get:function(){return this.toString().match(/^\\s*function\\s*(\\S*)\\s*\\(/)[1]}});\r\n\tvoid 0===Object.assign&&function(){Object.assign=function(a){if(void 0===a||null===a)throw new TypeError(\"Cannot convert undefined or null to object\");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)Object.prototype.hasOwnProperty.call(d,e)&&(b[e]=d[e])}return b}}();\r\n\tObject.assign(THREE,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,\r\n\tMaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,\r\n\tCineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1E3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,\r\n\tByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:THREE.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,\r\n\tRGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3E3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,\r\n\tRGBADepthPacking:3201});THREE.Color=function(a,b,c){return void 0===b&&void 0===c?this.set(a):this.setRGB(a,b,c)};\r\n\tTHREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):\"number\"===typeof a?this.setHex(a):\"string\"===typeof a&&this.setStyle(a);return this},setScalar:function(a){this.b=this.g=this.r=a},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(){function a(a,c,d){0>d&&(d+=1);1<d&&(d-=1);return d<1/6?a+6*(c-a)*\r\n\td:.5>d?c:d<2/3?a+6*(c-a)*(2/3-d):a}return function(b,c,d){b=THREE.Math.euclideanModulo(b,1);c=THREE.Math.clamp(c,0,1);d=THREE.Math.clamp(d,0,1);0===c?this.r=this.g=this.b=d:(c=.5>=d?d*(1+c):d+c-d*c,d=2*d-c,this.r=a(d,c,b+1/3),this.g=a(d,c,b),this.b=a(d,c,b-1/3));return this}}(),setStyle:function(a){function b(b){void 0!==b&&1>parseFloat(b)&&console.warn(\"THREE.Color: Alpha component of \"+a+\" will be ignored.\")}var c;if(c=/^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(a)){var d=c[2];switch(c[1]){case \"rgb\":case \"rgba\":if(c=\r\n\t/^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(d))return this.r=Math.min(255,parseInt(c[1],10))/255,this.g=Math.min(255,parseInt(c[2],10))/255,this.b=Math.min(255,parseInt(c[3],10))/255,b(c[5]),this;if(c=/^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(d))return this.r=Math.min(100,parseInt(c[1],10))/100,this.g=Math.min(100,parseInt(c[2],10))/100,this.b=Math.min(100,parseInt(c[3],10))/100,b(c[5]),this;break;case \"hsl\":case \"hsla\":if(c=/^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(d)){var d=\r\n\tparseFloat(c[1])/360,e=parseInt(c[2],10)/100,f=parseInt(c[3],10)/100;b(c[5]);return this.setHSL(d,e,f)}}}else if(c=/^\\#([A-Fa-f0-9]+)$/.exec(a)){c=c[1];d=c.length;if(3===d)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===d)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}a&&0<a.length&&\r\n\t(c=THREE.ColorKeywords[a],void 0!==c?this.setHex(c):console.warn(\"THREE.Color: Unknown color \"+a));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);var c=0<b?1/b:1;this.r=Math.pow(a.r,c);this.g=Math.pow(a.g,c);this.b=Math.pow(a.b,\r\n\tc);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return(\"000000\"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=\r\n\t(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=\r\n\ta.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,b){void 0===b&&(b=0);this.r=a[b];this.g=a[b+1];this.b=a[b+2];return this},toArray:function(a,\r\n\tb){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a}};\r\n\tTHREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,\r\n\tdarkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,\r\n\tgrey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,\r\n\tlime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,\r\n\tpalegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,\r\n\ttomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};\r\n\tTHREE.Quaternion.prototype={constructor:THREE.Quaternion,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},\r\n\tcopy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!1===a instanceof THREE.Euler)throw Error(\"THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),h=Math.sin(a._z/2),k=a.order;\"XYZ\"===k?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):\"YXZ\"===\r\n\tk?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):\"ZXY\"===k?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):\"ZYX\"===k?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):\"YZX\"===k?(this._x=f*d*e+c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e-f*g*h):\"XZY\"===k&&(this._x=f*d*e-c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e+f*g*h);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,\r\n\tb){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],l=c+f+b;0<l?(c=.5/Math.sqrt(l+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=\r\n\t.25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;return this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){this._x*=\r\n\t-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},\r\n\tmultiply:function(a,b){return void 0!==b?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},premultiply:function(a){return this.multiplyQuaternions(a,this)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,k=b._z,l=b._w;this._x=c*l+f*g+d*k-e*h;this._y=d*l+f*h+e*g-c*k;this._z=e*l+f*k+c*h-d*g;this._w=f*l-c*g-d*h-e*k;this.onChangeCallback();\r\n\treturn this},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.sqrt(1-g*g);if(.001>Math.abs(h))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;var k=Math.atan2(h,g),g=Math.sin((1-b)*k)/h,h=Math.sin(b*\r\n\tk)/h;this._w=f*g+this._w*h;this._x=c*g+this._x*h;this._y=d*g+this._y*h;this._z=e*g+this._z*h;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];this._w=a[b+3];this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},onChange:function(a){this.onChangeCallback=\r\n\ta;return this},onChangeCallback:function(){}};\r\n\tObject.assign(THREE.Quaternion,{slerp:function(a,b,c,d){return c.copy(a).slerp(b,d)},slerpFlat:function(a,b,c,d,e,f,g){var h=c[d+0],k=c[d+1],l=c[d+2];c=c[d+3];d=e[f+0];var n=e[f+1],p=e[f+2];e=e[f+3];if(c!==e||h!==d||k!==n||l!==p){f=1-g;var m=h*d+k*n+l*p+c*e,q=0<=m?1:-1,r=1-m*m;r>Number.EPSILON&&(r=Math.sqrt(r),m=Math.atan2(r,m*q),f=Math.sin(f*m)/r,g=Math.sin(g*m)/r);q*=g;h=h*f+d*q;k=k*f+n*q;l=l*f+p*q;c=c*f+e*q;f===1-g&&(g=1/Math.sqrt(h*h+k*k+l*l+c*c),h*=g,k*=g,l*=g,c*=g)}a[b]=h;a[b+1]=k;a[b+2]=l;\r\n\ta[b+3]=c}});THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};\r\n\tTHREE.Vector2.prototype={constructor:THREE.Vector2,get width(){return this.x},set width(a){this.x=a},get height(){return this.y},set height(a){this.y=a},set:function(a,b){this.x=a;this.y=b;return this},setScalar:function(a){this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error(\"index is out of range: \"+a);}},getComponent:function(a){switch(a){case 0:return this.x;\r\n\tcase 1:return this.y;default:throw Error(\"index is out of range: \"+a);}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},\r\n\taddScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;return this},sub:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=a.y;return this},multiplyScalar:function(a){isFinite(a)?(this.x*=a,\r\n\tthis.y*=a):this.y=this.x=0;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));return this},clampScalar:function(){var a,b;return function(c,d){void 0===\r\n\ta&&(a=new THREE.Vector2,b=new THREE.Vector2);a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(b,c))/c)},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);\r\n\tthis.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var a=Math.atan2(this.y,this.x);0>a&&(a+=2*Math.PI);return a},\r\n\tdistanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},\r\n\ttoArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];return this},rotateAround:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=this.x-a.x,f=this.y-a.y;this.x=e*c-f*d+a.x;this.y=e*d+f*c+a.y;return this}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};\r\n\tTHREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setScalar:function(a){this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error(\"index is out of range: \"+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;\r\n\tcase 2:return this.z;default:throw Error(\"index is out of range: \"+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,\r\n\tb){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;return this},sub:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},\r\n\tmultiply:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){isFinite(a)?(this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a;return function(b){!1===b instanceof THREE.Euler&&\r\n\tconsole.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\");void 0===a&&(a=new THREE.Quaternion);return this.applyQuaternion(a.setFromEuler(b))}}(),applyAxisAngle:function(){var a;return function(b,c){void 0===a&&(a=new THREE.Quaternion);return this.applyQuaternion(a.setFromAxisAngle(b,c))}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},\r\n\tapplyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=\r\n\ta.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,l=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-l*-f;this.y=k*a+b*-f+l*-e-h*-g;this.z=l*a+b*-g+h*-f-k*-e;return this},project:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));return this.applyProjection(a)}}(),unproject:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.matrixWorld,a.getInverse(b.projectionMatrix));return this.applyProjection(a)}}(),\r\n\ttransformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;return this.normalize()},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=\r\n\tMath.max(this.z,a.z);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3,b=new THREE.Vector3);a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(b,c))/c)},floor:function(){this.x=Math.floor(this.x);this.y=\r\n\tMath.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=\r\n\t-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=\r\n\t(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},cross:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;this.x=d*h-e*g;this.y=e*f-c*h;\r\n\tthis.z=c*g-d*f;return this},projectOnVector:function(){var a,b;return function(c){void 0===a&&(a=new THREE.Vector3);a.copy(c).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/\r\n\tMath.sqrt(this.lengthSq()*a.lengthSq());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setFromSpherical:function(a){var b=Math.sin(a.phi)*a.radius;this.x=b*Math.sin(a.theta);this.y=Math.cos(a.phi)*a.radius;this.z=b*Math.cos(a.theta);return this},setFromMatrixPosition:function(a){return this.setFromMatrixColumn(a,3)},setFromMatrixScale:function(a){var b=\r\n\tthis.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length();a=this.setFromMatrixColumn(a,2).length();this.x=b;this.y=c;this.z=a;return this},setFromMatrixColumn:function(a,b){if(\"number\"===typeof a){console.warn(\"THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).\");var c=a;a=b;b=c}return this.fromArray(a.elements,4*b)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+\r\n\t2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];this.z=a.array[b+2];return this}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};\r\n\tTHREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setScalar:function(a){this.w=this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error(\"index is out of range: \"+\r\n\ta);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error(\"index is out of range: \"+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(a,b);\r\n\tthis.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;this.w+=a.w*b;return this},sub:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(a,b);this.x-=\r\n\ta.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){isFinite(a)?(this.x*=a,this.y*=a,this.z*=a,this.w*=a):this.w=this.z=this.y=this.x=0;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=\r\n\ta[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],h=a[5],k=a[9];c=a[2];b=a[6];var l=a[10];if(.01>Math.abs(d-g)&&.01>Math.abs(f-c)&&.01>\r\n\tMath.abs(k-b)){if(.1>Math.abs(d+g)&&.1>Math.abs(f+c)&&.1>Math.abs(k+b)&&.1>Math.abs(e+h+l-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;h=(h+1)/2;l=(l+1)/2;d=(d+g)/4;f=(f+c)/4;k=(k+b)/4;e>h&&e>l?.01>e?(b=0,d=c=.707106781):(b=Math.sqrt(e),c=d/b,d=f/b):h>l?.01>h?(b=.707106781,c=0,d=.707106781):(c=Math.sqrt(h),b=d/c,d=k/c):.01>l?(c=b=.707106781,d=0):(d=Math.sqrt(l),b=f/d,c=k/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-k)*(b-k)+(f-c)*(f-c)+(g-d)*(g-d));.001>Math.abs(a)&&(a=1);this.x=(b-k)/\r\n\ta;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+h+l-1)/2);return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);this.w=Math.min(this.w,a.w);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);this.w=Math.max(this.w,a.w);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));\r\n\tthis.w=Math.max(a.w,Math.min(b.w,this.w));return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector4,b=new THREE.Vector4);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=\r\n\tMath.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*\r\n\ta.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-\r\n\tthis.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+\r\n\tc;this.x=a.array[b];this.y=a.array[b+1];this.z=a.array[b+2];this.w=a.array[b+3];return this}};THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders=\"XYZ YZX ZXY XZY YXZ ZYX\".split(\" \");THREE.Euler.DefaultOrder=\"XYZ\";\r\n\tTHREE.Euler.prototype={constructor:THREE.Euler,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,\r\n\tthis._y,this._z,this._order)},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=THREE.Math.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],k=e[5],l=e[9],n=e[2],p=e[6],e=e[10];b=b||this._order;\"XYZ\"===b?(this._y=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(p,k),this._z=0)):\"YXZ\"===b?(this._x=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?\r\n\t(this._y=Math.atan2(g,e),this._z=Math.atan2(h,k)):(this._y=Math.atan2(-n,a),this._z=0)):\"ZXY\"===b?(this._x=Math.asin(d(p,-1,1)),.99999>Math.abs(p)?(this._y=Math.atan2(-n,e),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,a))):\"ZYX\"===b?(this._y=Math.asin(-d(n,-1,1)),.99999>Math.abs(n)?(this._x=Math.atan2(p,e),this._z=Math.atan2(h,a)):(this._x=0,this._z=Math.atan2(-f,k))):\"YZX\"===b?(this._z=Math.asin(d(h,-1,1)),.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-n,a)):(this._x=\r\n\t0,this._y=Math.atan2(g,e))):\"XZY\"===b?(this._z=Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(p,k),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-l,e),this._y=0)):console.warn(\"THREE.Euler: .setFromRotationMatrix() given unsupported order: \"+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},setFromQuaternion:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeRotationFromQuaternion(b);return this.setFromRotationMatrix(a,c,d)}}(),setFromVector3:function(a,\r\n\tb){return this.set(a.x,a.y,a.z,b||this._order)},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);return this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;\r\n\ta[b+3]=this._order;return a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){}};THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};\r\n\tTHREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},\r\n\tat:function(a,b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);\r\n\tthis.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};\r\n\tTHREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);\r\n\treturn this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);\r\n\tthis.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>\r\n\tthis.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&\r\n\ta.max.equals(this.max)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};\r\n\tTHREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromArray:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,k=a.length;h<k;h+=3){var l=a[h],n=a[h+1],p=a[h+2];l<b&&(b=l);n<c&&(c=n);p<d&&(d=p);l>e&&(e=l);n>f&&(f=n);p>g&&(g=p)}this.min.set(b,c,d);this.max.set(e,f,g)},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=\r\n\tnew THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);this.makeEmpty();b.traverse(function(b){var e=b.geometry;if(void 0!==e)if(e instanceof THREE.Geometry)for(var f=e.vertices,e=0,g=f.length;e<g;e++)a.copy(f[e]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a);else if(e instanceof THREE.BufferGeometry&&void 0!==\r\n\te.attributes.position)for(f=e.attributes.position.array,e=0,g=f.length;e<g;e+=3)a.fromArray(f,e),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},\r\n\tcenter:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<\r\n\tthis.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<\r\n\tthis.min.z||a.min.z>this.max.z?!1:!0},intersectsSphere:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);this.clampPoint(b.center,a);return a.distanceToSquared(b.center)<=b.radius*b.radius}}(),intersectsPlane:function(a){var b,c;0<a.normal.x?(b=a.normal.x*this.min.x,c=a.normal.x*this.max.x):(b=a.normal.x*this.max.x,c=a.normal.x*this.min.x);0<a.normal.y?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y);0<a.normal.z?(b+=a.normal.z*\r\n\tthis.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z);return b<=a.constant&&c>=a.constant},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=.5*this.size(a).length();return b}}(),\r\n\tintersect:function(a){this.min.max(a.min);this.max.min(a.max);this.isEmpty()&&this.makeEmpty();return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){if(this.isEmpty())return this;a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);\r\n\ta[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&\r\n\ta.max.equals(this.max)}};THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]);0<arguments.length&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")};\r\n\tTHREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[1]=d;l[2]=g;l[3]=b;l[4]=e;l[5]=h;l[6]=c;l[7]=f;l[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},setFromMatrix4:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]);\r\n\treturn this},applyToVector3Array:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.fromArray(b,c),a.applyMatrix3(this),a.toArray(b,c);return b}}(),applyToBuffer:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length/b.itemSize);for(var e=0;e<d;e++,c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix3(this),b.setXYZ(a.x,a.y,a.z);return b}}(),\r\n\tmultiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){a instanceof THREE.Matrix4&&console.error(\"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\");var c=a.elements,d=this.elements,e=c[0],f=c[1],g=c[2],h=c[3],k=c[4],l=c[5],n=c[6],p=c[7],\r\n\tc=c[8],m=c*k-l*p,q=l*n-c*h,r=p*h-k*n,s=e*m+f*q+g*r;if(0===s){if(b)throw Error(\"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\");console.warn(\"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\");return this.identity()}s=1/s;d[0]=m*s;d[1]=(g*p-c*f)*s;d[2]=(l*f-g*k)*s;d[3]=q*s;d[4]=(c*e-g*n)*s;d[5]=(g*h-l*e)*s;d[6]=r*s;d[7]=(f*n-p*e)*s;d[8]=(k*e-f*h)*s;return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=\r\n\tb[7];b[7]=a;return this},flattenToArrayOffset:function(a,b){console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.\");return this.toArray(a,b)},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(a,b){void 0===\r\n\ta&&(a=[]);void 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a}};THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0<arguments.length&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")};\r\n\tTHREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,k,l,n,p,m,q,r,s){var u=this.elements;u[0]=a;u[4]=b;u[8]=c;u[12]=d;u[1]=e;u[5]=f;u[9]=g;u[13]=h;u[2]=k;u[6]=l;u[10]=n;u[14]=p;u[3]=m;u[7]=q;u[11]=r;u[15]=s;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)},copy:function(a){this.elements.set(a.elements);return this},copyPosition:function(a){var b=this.elements;a=a.elements;\r\n\tb[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){a.setFromMatrixColumn(this,0);b.setFromMatrixColumn(this,1);c.setFromMatrixColumn(this,2);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1);return this},extractRotation:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);var c=this.elements,d=b.elements,e=1/a.setFromMatrixColumn(b,0).length(),f=1/a.setFromMatrixColumn(b,1).length();b=1/a.setFromMatrixColumn(b,\r\n\t2).length();c[0]=d[0]*e;c[1]=d[1]*e;c[2]=d[2]*e;c[4]=d[4]*f;c[5]=d[5]*f;c[6]=d[6]*f;c[8]=d[8]*b;c[9]=d[9]*b;c[10]=d[10]*b;return this}}(),makeRotationFromEuler:function(a){!1===a instanceof THREE.Euler&&console.error(\"THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if(\"XYZ\"===a.order){a=f*h;var k=f*e,l=c*h,n=c*e;b[0]=g*h;b[4]=\r\n\t-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-n*d;b[9]=-c*g;b[2]=n-a*d;b[6]=l+k*d;b[10]=f*g}else\"YXZ\"===a.order?(a=g*h,k=g*e,l=d*h,n=d*e,b[0]=a+n*c,b[4]=l*c-k,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=n+a*c,b[10]=f*g):\"ZXY\"===a.order?(a=g*h,k=g*e,l=d*h,n=d*e,b[0]=a-n*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=n-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):\"ZYX\"===a.order?(a=f*h,k=f*e,l=c*h,n=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+n,b[1]=g*e,b[5]=n*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):\"YZX\"===a.order?(a=f*g,k=f*\r\n\td,l=c*g,n=c*d,b[0]=g*h,b[4]=n-a*e,b[8]=l*e+k,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-n*e):\"XZY\"===a.order&&(a=f*g,k=f*d,l=c*g,n=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+n,b[5]=f*h,b[9]=k*e-l,b[2]=l*e-k,b[6]=c*h,b[10]=n*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,k=e+e;a=c*g;var l=c*h,c=c*k,n=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(n+e);b[4]=l-f;b[8]=c+h;b[1]=l+\r\n\tf;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+n);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a,b,c;return function(d,e,f){void 0===a&&(a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3);var g=this.elements;c.subVectors(d,e).normalize();0===c.lengthSq()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.lengthSq()&&(c.z+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;\r\n\tg[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],k=c[12],l=c[1],n=c[5],p=c[9],m=c[13],q=c[2],r=c[6],s=c[10],u=c[14],x=c[3],v=c[7],C=c[11],c=c[15],\r\n\tw=d[0],D=d[4],A=d[8],y=d[12],B=d[1],G=d[5],z=d[9],H=d[13],M=d[2],O=d[6],N=d[10],E=d[14],K=d[3],I=d[7],L=d[11],d=d[15];e[0]=f*w+g*B+h*M+k*K;e[4]=f*D+g*G+h*O+k*I;e[8]=f*A+g*z+h*N+k*L;e[12]=f*y+g*H+h*E+k*d;e[1]=l*w+n*B+p*M+m*K;e[5]=l*D+n*G+p*O+m*I;e[9]=l*A+n*z+p*N+m*L;e[13]=l*y+n*H+p*E+m*d;e[2]=q*w+r*B+s*M+u*K;e[6]=q*D+r*G+s*O+u*I;e[10]=q*A+r*z+s*N+u*L;e[14]=q*y+r*H+s*E+u*d;e[3]=x*w+v*B+C*M+c*K;e[7]=x*D+v*G+C*O+c*I;e[11]=x*A+v*z+C*N+c*L;e[15]=x*y+v*H+C*E+c*d;return this},multiplyToArray:function(a,b,\r\n\tc){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},applyToVector3Array:function(){var a;return function(b,c,d){void 0===a&&\r\n\t(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.fromArray(b,c),a.applyMatrix4(this),a.toArray(b,c);return b}}(),applyToBuffer:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length/b.itemSize);for(var e=0;e<d;e++,c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix4(this),b.setXYZ(a.x,a.y,a.z);return b}}(),determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=\r\n\ta[5],h=a[9],k=a[13],l=a[2],n=a[6],p=a[10],m=a[14];return a[3]*(+e*h*n-d*k*n-e*g*p+c*k*p+d*g*m-c*h*m)+a[7]*(+b*h*m-b*k*p+e*f*p-d*f*m+d*k*l-e*h*l)+a[11]*(+b*k*n-b*g*m-e*f*n+c*f*m+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*n+b*g*p+d*f*n-c*f*p+c*h*l)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArrayOffset:function(a,b){console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.\");\r\n\treturn this.toArray(a,b)},getPosition:function(){var a;return function(){void 0===a&&(a=new THREE.Vector3);console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\");return a.setFromMatrixColumn(this,3)}}(),setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[1],g=d[2],h=d[3],k=d[4],l=d[5],n=d[6],p=d[7],m=d[8],q=d[9],r=d[10],s=d[11],u=d[12],\r\n\tx=d[13],v=d[14],d=d[15],C=q*v*p-x*r*p+x*n*s-l*v*s-q*n*d+l*r*d,w=u*r*p-m*v*p-u*n*s+k*v*s+m*n*d-k*r*d,D=m*x*p-u*q*p+u*l*s-k*x*s-m*l*d+k*q*d,A=u*q*n-m*x*n-u*l*r+k*x*r+m*l*v-k*q*v,y=e*C+f*w+g*D+h*A;if(0===y){if(b)throw Error(\"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\");console.warn(\"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\");return this.identity()}y=1/y;c[0]=C*y;c[1]=(x*r*h-q*v*h-x*g*s+f*v*s+q*g*d-f*r*d)*y;c[2]=(l*v*h-x*n*h+x*g*p-f*v*p-l*g*d+f*n*d)*y;c[3]=\r\n\t(q*n*h-l*r*h-q*g*p+f*r*p+l*g*s-f*n*s)*y;c[4]=w*y;c[5]=(m*v*h-u*r*h+u*g*s-e*v*s-m*g*d+e*r*d)*y;c[6]=(u*n*h-k*v*h-u*g*p+e*v*p+k*g*d-e*n*d)*y;c[7]=(k*r*h-m*n*h+m*g*p-e*r*p-k*g*s+e*n*s)*y;c[8]=D*y;c[9]=(u*q*h-m*x*h-u*f*s+e*x*s+m*f*d-e*q*d)*y;c[10]=(k*x*h-u*l*h+u*f*p-e*x*p-k*f*d+e*l*d)*y;c[11]=(m*l*h-k*q*h-m*f*p+e*q*p+k*f*s-e*l*s)*y;c[12]=A*y;c[13]=(m*x*g-u*q*g+u*f*r-e*x*r-m*f*v+e*q*v)*y;c[14]=(u*l*g-k*x*g-u*f*n+e*x*n+k*f*v-e*l*v)*y;c[15]=(k*q*g-m*l*g+m*f*n-e*q*n-k*f*r+e*l*r)*y;return this},scale:function(a){var b=\r\n\tthis.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10]))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);\r\n\treturn this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,k=e*f,l=e*g;this.set(k*f+c,k*g-d*h,k*h+d*g,0,k*g+d*h,l*g+c,l*h-d*f,0,k*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,\r\n\t0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a,b;return function(c,d,e){void 0===a&&(a=new THREE.Vector3,b=new THREE.Matrix4);var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/h,l=1/k;b.elements[0]*=c;b.elements[1]*=c;\r\n\tb.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=l;b.elements[9]*=l;b.elements[10]*=l;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(d-c);g[9]=(d+c)/(d-c);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(THREE.Math.DEG2RAD*a*.5);var e=\r\n\t-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=1/(b-a),k=1/(c-d),l=1/(f-e);g[0]=2*h;g[4]=0;g[8]=0;g[12]=-((b+a)*h);g[1]=0;g[5]=2*k;g[9]=0;g[13]=-((c+d)*k);g[2]=0;g[6]=0;g[10]=-2*l;g[14]=-((f+e)*l);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},equals:function(a){var b=this.elements;a=a.elements;for(var c=0;16>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a){this.elements.set(a);return this},toArray:function(a,b){void 0===a&&(a=[]);\r\n\tvoid 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};\r\n\tTHREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},lookAt:function(a){this.direction.copy(a).sub(this.origin).normalize();return this},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,\r\n\ta));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);\r\n\treturn a.distanceToSquared(b)}}(),distanceSqToSegment:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g){a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h=.5*d.distanceTo(e),k=-this.direction.dot(b),l=c.dot(this.direction),n=-c.dot(b),p=c.lengthSq(),m=Math.abs(1-k*k),q;0<m?(d=k*n-l,e=k*l-n,q=h*m,0<=d?e>=-q?e<=q?(h=1/m,d*=h,e*=h,k=d*(d+k*e+2*l)+e*(k*d+e+2*n)+p):(e=h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*\r\n\tn)+p):(e=-h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*n)+p):e<=-q?(d=Math.max(0,-(-k*h+l)),e=0<d?-h:Math.min(Math.max(-h,-n),h),k=-d*d+e*(e+2*n)+p):e<=q?(d=0,e=Math.min(Math.max(-h,-n),h),k=e*(e+2*n)+p):(d=Math.max(0,-(k*h+l)),e=0<d?h:Math.min(Math.max(-h,-n),h),k=-d*d+e*(e+2*n)+p)):(e=0<k?-h:h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*n)+p);f&&f.copy(this.direction).multiplyScalar(d).add(this.origin);g&&g.copy(b).multiplyScalar(e).add(a);return k}}(),intersectSphere:function(){var a=new THREE.Vector3;return function(b,\r\n\tc){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=b.radius*b.radius;if(e>f)return null;f=Math.sqrt(f-e);e=d-f;d+=f;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=\r\n\tthis.distanceToPlane(a);return null===c?null:this.at(c,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var h=this.origin;0<=d?(c=(a.min.x-h.x)*d,d*=a.max.x-h.x):(c=(a.max.x-h.x)*d,d*=a.min.x-h.x);0<=f?(e=(a.min.y-h.y)*f,f*=a.max.y-h.y):(e=(a.max.y-h.y)*f,f*=a.min.y-h.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==\r\n\td)d=f;0<=g?(e=(a.min.z-h.z)*g,g*=a.max.z-h.z):(e=(a.max.z-h.z)*g,g*=a.min.z-h.z);if(c>g||e>d)return null;if(e>c||c!==c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectsBox:function(){var a=new THREE.Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,h,k){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);\r\n\tif(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}};\r\n\tTHREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};\r\n\tTHREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=0,g=b.length;f<g;f++)e=Math.max(e,d.distanceToSquared(b[f]));this.radius=Math.sqrt(e);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},\r\n\tempty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},intersectsBox:function(a){return a.intersectsSphere(this)},intersectsPlane:function(a){return Math.abs(this.center.dot(a.normal)-a.constant)<=this.radius},clampPoint:function(a,b){var c=\r\n\tthis.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&\r\n\ta.radius===this.radius}};THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};\r\n\tTHREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],l=c[7],n=c[8],p=c[9],m=c[10],q=c[11],r=c[12],s=c[13],u=c[14],\r\n\tc=c[15];b[0].setComponents(f-a,l-g,q-n,c-r).normalize();b[1].setComponents(f+a,l+g,q+n,c+r).normalize();b[2].setComponents(f+d,l+h,q+p,c+s).normalize();b[3].setComponents(f-d,l-h,q-p,c-s).normalize();b[4].setComponents(f-e,l-k,q-m,c-u).normalize();b[5].setComponents(f+e,l+k,q+m,c+u).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),\r\n\tintersectsSprite:function(){var a=new THREE.Sphere;return function(b){a.center.set(0,0,0);a.radius=.7071067811865476;a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?\r\n\tc.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};\r\n\tTHREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,\r\n\tc);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,\r\n\tb){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0===f){if(0===this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),intersectsLine:function(a){var b=\r\n\tthis.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Matrix3;return function(c,d){var e=this.coplanarPoint(a).applyMatrix4(c),f=d||b.getNormalMatrix(c),f=this.normal.applyMatrix3(f).normalize();\r\n\tthis.constant=-e.dot(f);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}};THREE.Spherical=function(a,b,c){this.radius=void 0!==a?a:1;this.phi=void 0!==b?b:0;this.theta=void 0!==c?c:0;return this};\r\n\tTHREE.Spherical.prototype={constructor:THREE.Spherical,set:function(a,b,c){this.radius=a;this.phi=b;this.theta=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius.copy(a.radius);this.phi.copy(a.phi);this.theta.copy(a.theta);return this},makeSafe:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this},setFromVector3:function(a){this.radius=a.length();0===this.radius?this.phi=this.theta=0:(this.theta=Math.atan2(a.x,a.z),this.phi=\r\n\tMath.acos(THREE.Math.clamp(a.y/this.radius,-1,1)));return this}};\r\n\tTHREE.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var a=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\"),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8===e||13===e||18===e||23===e?b[e]=\"-\":14===e?b[e]=\"4\":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19===e?d&3|8:d]);return b.join(\"\")}}(),clamp:function(a,b,c){return Math.max(b,Math.min(c,a))},euclideanModulo:function(a,b){return(a%b+b)%b},mapLinear:function(a,b,c,\r\n\td,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){console.warn(\"THREE.Math.random16() has been deprecated. Use Math.random() instead.\");return Math.random()},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*\r\n\t(.5-Math.random())},degToRad:function(a){return a*THREE.Math.DEG2RAD},radToDeg:function(a){return a*THREE.Math.RAD2DEG},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},nearestPowerOfTwo:function(a){return Math.pow(2,Math.round(Math.log(a)/Math.LN2))},nextPowerOfTwo:function(a){a--;a|=a>>1;a|=a>>2;a|=a>>4;a|=a>>8;a|=a>>16;a++;return a}};\r\n\tTHREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,k,l,n,p,m;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:f+\r\n\t2;l=this.points[c[0]];n=this.points[c[1]];p=this.points[c[2]];m=this.points[c[3]];h=g*g;k=g*h;d.x=b(l.x,n.x,p.x,m.x,g,h,k);d.y=b(l.y,n.y,p.y,m.y,g,h,k);d.z=b(l.z,n.z,p.z,m.z,g,h,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],k=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=\r\n\ta/c,d=this.getPoint(b),g.copy(d),k+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!==e&&(h[b]=k,e=b);h[h.length]=k;return{chunks:h,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],k=new THREE.Vector3,m=this.getLength();h.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=m.chunks[b]-m.chunks[b-1];g=Math.ceil(a*c/m.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),\r\n\th.push(k.copy(d).clone());h.push(k.copy(this.points[b]).clone())}this.points=h}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();\r\n\tTHREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var l=d*k-e*e;h=h||new THREE.Vector3;if(0===l)return h.set(-2,-1,-1);l=1/l;k=(k*f-e*g)*l;d=(d*g-e*f)*l;return h.set(1-k-d,d,k)}}();\r\n\tTHREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();\r\n\tTHREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,\r\n\tthis.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},\r\n\tclosestPointToPoint:function(){var a,b,c,d;return function(e,f){void 0===a&&(a=new THREE.Plane,b=[new THREE.Line3,new THREE.Line3,new THREE.Line3],c=new THREE.Vector3,d=new THREE.Vector3);var g=f||new THREE.Vector3,h=Infinity;a.setFromCoplanarPoints(this.a,this.b,this.c);a.projectPoint(e,c);if(!0===this.containsPoint(c))g.copy(c);else{b[0].set(this.a,this.b);b[1].set(this.b,this.c);b[2].set(this.c,this.a);for(var k=0;k<b.length;k++){b[k].closestPointToPoint(c,!0,d);var l=c.distanceToSquared(d);l<\r\n\th&&(h=l,g.copy(d))}}return g}}(),equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}};THREE.Interpolant=function(a,b,c,d){this.parameterPositions=a;this._cachedIndex=0;this.resultBuffer=void 0!==d?d:new b.constructor(c);this.sampleValues=b;this.valueSize=c};\r\n\tTHREE.Interpolant.prototype={constructor:THREE.Interpolant,evaluate:function(a){var b=this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];a:{b:{c:{d:if(!(a<d)){for(var f=c+2;;){if(void 0===d){if(a<e)break d;this._cachedIndex=c=b.length;return this.afterEnd_(c-1,a,e)}if(c===f)break;e=d;d=b[++c];if(a<d)break b}d=b.length;break c}if(a>=e)break a;else{f=b[1];a<f&&(c=2,e=f);for(f=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===f)break;d=e;e=b[--c-1];if(a>=e)break b}d=\r\n\tc;c=0}}for(;c<d;)e=c+d>>>1,a<b[e]?d=e:c=e+1;d=b[c];e=b[c-1];if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return this._cachedIndex=c=b.length,this.afterEnd_(c-1,e,a)}this._cachedIndex=c;this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(a){var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize;a*=d;for(var e=0;e!==d;++e)b[e]=\r\n\tc[a+e];return b},interpolate_:function(a,b,c,d){throw Error(\"call to abstract method\");},intervalChanged_:function(a,b,c){}};Object.assign(THREE.Interpolant.prototype,{beforeStart_:THREE.Interpolant.prototype.copySampleValue_,afterEnd_:THREE.Interpolant.prototype.copySampleValue_});THREE.CubicInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d);this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0};\r\n\tTHREE.CubicInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.CubicInterpolant,DefaultSettings_:{endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},intervalChanged_:function(a,b,c){var d=this.parameterPositions,e=a-2,f=a+1,g=d[e],h=d[f];if(void 0===g)switch(this.getSettings_().endingStart){case THREE.ZeroSlopeEnding:e=a;g=2*b-c;break;case THREE.WrapAroundEnding:e=d.length-2;g=b+d[e]-d[e+1];break;default:e=a,g=c}if(void 0===h)switch(this.getSettings_().endingEnd){case THREE.ZeroSlopeEnding:f=\r\n\ta;h=2*c-b;break;case THREE.WrapAroundEnding:f=1;h=c+d[1]-d[0];break;default:f=a-1,h=b}a=.5*(c-b);d=this.valueSize;this._weightPrev=a/(b-g);this._weightNext=a/(h-c);this._offsetPrev=e*d;this._offsetNext=f*d},interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g,k=this._offsetPrev,l=this._offsetNext,n=this._weightPrev,p=this._weightNext,m=(c-b)/(d-b);c=m*m;d=c*m;b=-n*d+2*n*c-n*m;n=(1+n)*d+(-1.5-2*n)*c+(-.5+n)*m+1;m=(-1-p)*d+(1.5+p)*c+.5*m;p=p*d-p*\r\n\tc;for(c=0;c!==g;++c)e[c]=b*f[k+c]+n*f[h+c]+m*f[a+c]+p*f[l+c];return e}});THREE.DiscreteInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d)};THREE.DiscreteInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.DiscreteInterpolant,interpolate_:function(a,b,c,d){return this.copySampleValue_(a-1)}});THREE.LinearInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d)};\r\n\tTHREE.LinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.LinearInterpolant,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g;b=(c-b)/(d-b);c=1-b;for(d=0;d!==g;++d)e[d]=f[h+d]*c+f[a+d]*b;return e}});THREE.QuaternionLinearInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d)};\r\n\tTHREE.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.QuaternionLinearInterpolant,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;b=(c-b)/(d-b);for(c=a+g;a!==c;a+=4)THREE.Quaternion.slerpFlat(e,0,f,a-g,f,a,b);return e}});THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};\r\n\tTHREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=(performance||Date).now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=(performance||Date).now(),a=(b-this.oldTime)/1E3;this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};\r\n\tObject.assign(THREE.EventDispatcher.prototype,{addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(b);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(a){if(void 0!==\r\n\tthis._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=[],d=0,e=b.length,d=0;d<e;d++)c[d]=b[d];for(d=0;d<e;d++)c[d].call(this,a)}}}});THREE.Layers=function(){this.mask=1};THREE.Layers.prototype={constructor:THREE.Layers,set:function(a){this.mask=1<<a},enable:function(a){this.mask|=1<<a},toggle:function(a){this.mask^=1<<a},disable:function(a){this.mask&=~(1<<a)},test:function(a){return 0!==(this.mask&a.mask)}};\r\n\t(function(a){function b(a,b){return a.distance-b.distance}function c(a,b,f,g){if(!1!==a.visible&&(a.raycast(b,f),!0===g)){a=a.children;g=0;for(var h=a.length;g<h;g++)c(a[g],b,f,!0)}}a.Raycaster=function(b,c,f,g){this.ray=new a.Ray(b,c);this.near=f||0;this.far=g||Infinity;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn(\"THREE.Raycaster: params.PointCloud has been renamed to params.Points.\");return this.Points}}})};\r\n\ta.Raycaster.prototype={constructor:a.Raycaster,linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(b,c){c instanceof a.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(c.matrixWorld),this.ray.direction.set(b.x,b.y,.5).unproject(c).sub(this.ray.origin).normalize()):c instanceof a.OrthographicCamera?(this.ray.origin.set(b.x,b.y,-1).unproject(c),this.ray.direction.set(0,0,-1).transformDirection(c.matrixWorld)):console.error(\"THREE.Raycaster: Unsupported camera type.\")},\r\n\tintersectObject:function(a,e){var f=[];c(a,this,f,e);f.sort(b);return f},intersectObjects:function(a,e){var f=[];if(!1===Array.isArray(a))return console.warn(\"THREE.Raycaster.intersectObjects: objects is not an Array.\"),f;for(var g=0,h=a.length;g<h;g++)c(a[g],this,f,e);f.sort(b);return f}}})(THREE);\r\n\tTHREE.Object3D=function(){Object.defineProperty(this,\"id\",{value:THREE.Object3DIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"Object3D\";this.parent=null;this.children=[];this.up=THREE.Object3D.DefaultUp.clone();var a=new THREE.Vector3,b=new THREE.Euler,c=new THREE.Quaternion,d=new THREE.Vector3(1,1,1);b.onChange(function(){c.setFromEuler(b,!1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,\r\n\tvalue:b},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d},modelViewMatrix:{value:new THREE.Matrix4},normalMatrix:{value:new THREE.Matrix3}});this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixAutoUpdate=THREE.Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new THREE.Layers;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.userData={}};\r\n\tTHREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0);THREE.Object3D.DefaultMatrixAutoUpdate=!0;\r\n\tObject.assign(THREE.Object3D.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=\r\n\tnew THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);\r\n\tthis.position.add(a.multiplyScalar(c));return this}}(),translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),\r\n\tlookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",a),this;a instanceof THREE.Object3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:\"added\"}),this.children.push(a)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",\r\n\ta);return this},remove:function(a){if(1<arguments.length)for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);b=this.children.indexOf(a);-1!==b&&(a.parent=null,a.dispatchEvent({type:\"removed\"}),this.children.splice(b,1))},getObjectById:function(a){return this.getObjectByProperty(\"id\",a)},getObjectByName:function(a){return this.getObjectByProperty(\"name\",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,\r\n\tb);if(void 0!==e)return e}},getWorldPosition:function(a){a=a||new THREE.Vector3;this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){c=c||new THREE.Quaternion;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,c,b);return c}}(),getWorldRotation:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Euler;this.getWorldQuaternion(a);return b.setFromQuaternion(a,\r\n\tthis.rotation.order,!1)}}(),getWorldScale:function(){var a=new THREE.Vector3,b=new THREE.Quaternion;return function(c){c=c||new THREE.Vector3;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,b,c);return c}}(),getWorldDirection:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverse(a)},traverseVisible:function(a){if(!1!==\r\n\tthis.visible){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverseVisible(a)}},traverseAncestors:function(a){var b=this.parent;null!==b&&(a(b),b.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,\r\n\tthis.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var c=void 0===a||\"\"===a,d={};c&&(a={geometries:{},materials:{},textures:{},images:{}},d.metadata={version:4.4,type:\"Object\",generator:\"Object3D.toJSON\"});var e={};e.uuid=this.uuid;e.type=this.type;\"\"!==this.name&&(e.name=this.name);\"{}\"!==JSON.stringify(this.userData)&&\r\n\t(e.userData=this.userData);!0===this.castShadow&&(e.castShadow=!0);!0===this.receiveShadow&&(e.receiveShadow=!0);!1===this.visible&&(e.visible=!1);e.matrix=this.matrix.toArray();void 0!==this.geometry&&(void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON(a)),e.geometry=this.geometry.uuid);void 0!==this.material&&(void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON(a)),e.material=this.material.uuid);if(0<this.children.length){e.children=\r\n\t[];for(var f=0;f<this.children.length;f++)e.children.push(this.children[f].toJSON(a).object)}if(c){var c=b(a.geometries),f=b(a.materials),g=b(a.textures);a=b(a.images);0<c.length&&(d.geometries=c);0<f.length&&(d.materials=f);0<g.length&&(d.textures=g);0<a.length&&(d.images=a)}d.object=e;return d},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,b){void 0===b&&(b=!0);this.name=a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);\r\n\tthis.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;this.visible=a.visible;this.castShadow=a.castShadow;this.receiveShadow=a.receiveShadow;this.frustumCulled=a.frustumCulled;this.renderOrder=a.renderOrder;this.userData=JSON.parse(JSON.stringify(a.userData));if(!0===b)for(var c=0;c<a.children.length;c++)this.add(a.children[c].clone());return this}});THREE.Object3DIdCount=0;\r\n\tTHREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=Array.isArray(d)?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=Array.isArray(e)?e:[];this.materialIndex=void 0!==f?f:0};\r\n\tTHREE.Face3.prototype={constructor:THREE.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a;this.b=a.b;this.c=a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex=a.materialIndex;for(var b=0,c=a.vertexNormals.length;b<c;b++)this.vertexNormals[b]=a.vertexNormals[b].clone();b=0;for(c=a.vertexColors.length;b<c;b++)this.vertexColors[b]=a.vertexColors[b].clone();return this}};\r\n\tTHREE.BufferAttribute=function(a,b,c){this.uuid=THREE.Math.generateUUID();this.array=a;this.itemSize=b;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.version=0;this.normalized=!0===c};\r\n\tTHREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(a){!0===a&&this.version++},setDynamic:function(a){this.dynamic=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.itemSize=a.itemSize;this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},copyArray:function(a){this.array.set(a);\r\n\treturn this},copyColorsArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",d),f=new THREE.Color);b[c++]=f.r;b[c++]=f.g;b[c++]=f.b}return this},copyIndicesArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];b[c++]=f.a;b[c++]=f.b;b[c++]=f.c}return this},copyVector2sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",\r\n\td),f=new THREE.Vector2);b[c++]=f.x;b[c++]=f.y}return this},copyVector3sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",d),f=new THREE.Vector3);b[c++]=f.x;b[c++]=f.y;b[c++]=f.z}return this},copyVector4sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",d),f=new THREE.Vector4);\r\n\tb[c++]=f.x;b[c++]=f.y;b[c++]=f.z;b[c++]=f.w}return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,b){this.array[a*this.itemSize]=b;return this},getY:function(a){return this.array[a*this.itemSize+1]},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},getW:function(a){return this.array[a*\r\n\tthis.itemSize+3]},setW:function(a,b){this.array[a*this.itemSize+3]=b;return this},setXY:function(a,b,c){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},clone:function(){return(new this.constructor).copy(this)}};\r\n\tTHREE.Int8Attribute=function(a,b){return new THREE.BufferAttribute(new Int8Array(a),b)};THREE.Uint8Attribute=function(a,b){return new THREE.BufferAttribute(new Uint8Array(a),b)};THREE.Uint8ClampedAttribute=function(a,b){return new THREE.BufferAttribute(new Uint8ClampedArray(a),b)};THREE.Int16Attribute=function(a,b){return new THREE.BufferAttribute(new Int16Array(a),b)};THREE.Uint16Attribute=function(a,b){return new THREE.BufferAttribute(new Uint16Array(a),b)};\r\n\tTHREE.Int32Attribute=function(a,b){return new THREE.BufferAttribute(new Int32Array(a),b)};THREE.Uint32Attribute=function(a,b){return new THREE.BufferAttribute(new Uint32Array(a),b)};THREE.Float32Attribute=function(a,b){return new THREE.BufferAttribute(new Float32Array(a),b)};THREE.Float64Attribute=function(a,b){return new THREE.BufferAttribute(new Float64Array(a),b)};\r\n\tTHREE.DynamicBufferAttribute=function(a,b){console.warn(\"THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.\");return(new THREE.BufferAttribute(a,b)).setDynamic(!0)};THREE.InstancedBufferAttribute=function(a,b,c){THREE.BufferAttribute.call(this,a,b);this.meshPerAttribute=c||1};THREE.InstancedBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype);THREE.InstancedBufferAttribute.prototype.constructor=THREE.InstancedBufferAttribute;\r\n\tTHREE.InstancedBufferAttribute.prototype.copy=function(a){THREE.BufferAttribute.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this};THREE.InterleavedBuffer=function(a,b){this.uuid=THREE.Math.generateUUID();this.array=a;this.stride=b;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.version=0};\r\n\tTHREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(a){!0===a&&this.version++},setDynamic:function(a){this.dynamic=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.stride=a.stride;this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.stride;c*=b.stride;for(var d=0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,\r\n\tb){void 0===b&&(b=0);this.array.set(a,b);return this},clone:function(){return(new this.constructor).copy(this)}};THREE.InstancedInterleavedBuffer=function(a,b,c){THREE.InterleavedBuffer.call(this,a,b);this.meshPerAttribute=c||1};THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype);THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer;\r\n\tTHREE.InstancedInterleavedBuffer.prototype.copy=function(a){THREE.InterleavedBuffer.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this};THREE.InterleavedBufferAttribute=function(a,b,c){this.uuid=THREE.Math.generateUUID();this.data=a;this.itemSize=b;this.offset=c};\r\n\tTHREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){console.warn(\"THREE.BufferAttribute: .length has been deprecated. Please use .count.\");return this.array.length},get count(){return this.data.count},setX:function(a,b){this.data.array[a*this.data.stride+this.offset]=b;return this},setY:function(a,b){this.data.array[a*this.data.stride+this.offset+1]=b;return this},setZ:function(a,b){this.data.array[a*this.data.stride+this.offset+2]=b;return this},\r\n\tsetW:function(a,b){this.data.array[a*this.data.stride+this.offset+3]=b;return this},getX:function(a){return this.data.array[a*this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,b,c){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;return this},setXYZ:function(a,\r\n\tb,c,d){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;this.data.array[a+3]=e;return this}};\r\n\tTHREE.Geometry=function(){Object.defineProperty(this,\"id\",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"Geometry\";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=\r\n\tthis.verticesNeedUpdate=!1};\r\n\tObject.assign(THREE.Geometry.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();\r\n\tthis.normalsNeedUpdate=this.verticesNeedUpdate=!0;return this},rotateX:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationY(b);this.applyMatrix(a);return this}}(),rotateZ:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a;return function(b,\r\n\tc,d){void 0===a&&(a=new THREE.Matrix4);a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a;return function(b){void 0===a&&(a=new THREE.Object3D);a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),fromBufferGeometry:function(a){function b(a,b,d,e){var f=void 0!==g?[n[a].clone(),n[b].clone(),n[d].clone()]:[],q=void 0!==h?[c.colors[a].clone(),\r\n\tc.colors[b].clone(),c.colors[d].clone()]:[];e=new THREE.Face3(a,b,d,f,q,e);c.faces.push(e);void 0!==k&&c.faceVertexUvs[0].push([p[a].clone(),p[b].clone(),p[d].clone()]);void 0!==l&&c.faceVertexUvs[1].push([m[a].clone(),m[b].clone(),m[d].clone()])}var c=this,d=null!==a.index?a.index.array:void 0,e=a.attributes,f=e.position.array,g=void 0!==e.normal?e.normal.array:void 0,h=void 0!==e.color?e.color.array:void 0,k=void 0!==e.uv?e.uv.array:void 0,l=void 0!==e.uv2?e.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=\r\n\t[]);for(var n=[],p=[],m=[],q=e=0;e<f.length;e+=3,q+=2)c.vertices.push(new THREE.Vector3(f[e],f[e+1],f[e+2])),void 0!==g&&n.push(new THREE.Vector3(g[e],g[e+1],g[e+2])),void 0!==h&&c.colors.push(new THREE.Color(h[e],h[e+1],h[e+2])),void 0!==k&&p.push(new THREE.Vector2(k[q],k[q+1])),void 0!==l&&m.push(new THREE.Vector2(l[q],l[q+1]));if(void 0!==d)if(f=a.groups,0<f.length)for(e=0;e<f.length;e++)for(var r=f[e],s=r.start,u=r.count,q=s,s=s+u;q<s;q+=3)b(d[q],d[q+1],d[q+2],r.materialIndex);else for(e=0;e<\r\n\td.length;e+=3)b(d[e],d[e+1],d[e+2]);else for(e=0;e<f.length/3;e+=3)b(e,e+1,e+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.translate(a.x,a.y,a.z);return a},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,b=this.boundingSphere.radius,b=0===b?1:1/\r\n\tb,c=new THREE.Matrix4;c.set(b,0,0,-b*a.x,0,b,0,-b*a.y,0,0,b,-b*a.z,0,0,0,1);this.applyMatrix(c);return this},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){void 0===a&&(a=!0);var b,c,d;d=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<\r\n\tc;b++)d[b]=new THREE.Vector3;if(a){var e,f,g,h=new THREE.Vector3,k=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],g=this.vertices[c.c],h.subVectors(g,f),k.subVectors(e,f),h.cross(k),d[c.a].add(h),d[c.b].add(h),d[c.c].add(h)}else for(a=0,b=this.faces.length;a<b;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);b=0;for(c=this.vertices.length;b<c;b++)d[b].normalize();a=0;for(b=this.faces.length;a<b;a++)c=\r\n\tthis.faces[a],e=c.vertexNormals,3===e.length?(e[0].copy(d[c.a]),e[1].copy(d[c.b]),e[2].copy(d[c.c])):(e[0]=d[c.a].clone(),e[1]=d[c.b].clone(),e[2]=d[c.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<\r\n\tb;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=this.morphNormals[a].vertexNormals,h,k;c=0;for(d=this.faces.length;c<d;c++)h=new THREE.Vector3,k={a:new THREE.Vector3,\r\n\tb:new THREE.Vector3,c:new THREE.Vector3},e.push(h),g.push(k)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){console.warn(\"THREE.Geometry: .computeTangents() has been removed.\")},\r\n\tcomputeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(!1===a instanceof THREE.Geometry)console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\",\r\n\ta);else{var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,l=this.faceVertexUvs[0];a=a.faceVertexUvs[0];void 0===c&&(c=0);void 0!==b&&(d=(new THREE.Matrix3).getNormalMatrix(b));for(var n=0,p=g.length;n<p;n++){var m=g[n].clone();void 0!==b&&m.applyMatrix4(b);f.push(m)}n=0;for(p=k.length;n<p;n++){var g=k[n],q,r=g.vertexNormals,s=g.vertexColors,m=new THREE.Face3(g.a+e,g.b+e,g.c+e);m.normal.copy(g.normal);void 0!==d&&m.normal.applyMatrix3(d).normalize();b=0;for(f=r.length;b<\r\n\tf;b++)q=r[b].clone(),void 0!==d&&q.applyMatrix3(d).normalize(),m.vertexNormals.push(q);m.color.copy(g.color);b=0;for(f=s.length;b<f;b++)q=s[b],m.vertexColors.push(q.clone());m.materialIndex=g.materialIndex+c;h.push(m)}n=0;for(p=a.length;n<p;n++)if(c=a[n],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(c[b].clone());l.push(d)}}},mergeMesh:function(a){!1===a instanceof THREE.Mesh?console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\",a):(a.matrixAutoUpdate&&a.updateMatrix(),\r\n\tthis.merge(a.geometry,a.matrix))},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+\"_\"+Math.round(d.y*e)+\"_\"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]===e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(e=a[f],this.faces.splice(e,\r\n\t1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(e,1);f=this.vertices.length-b.length;this.vertices=b;return f},sortFacesByMaterialIndex:function(){for(var a=this.faces,b=a.length,c=0;c<b;c++)a[c]._id=c;a.sort(function(a,b){return a.materialIndex-b.materialIndex});var d=this.faceVertexUvs[0],e=this.faceVertexUvs[1],f,g;d&&d.length===b&&(f=[]);e&&e.length===b&&(g=[]);for(c=0;c<b;c++){var h=a[c]._id;f&&f.push(d[h]);g&&g.push(e[h])}f&&(this.faceVertexUvs[0]=f);g&&(this.faceVertexUvs[1]=\r\n\tg)},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==l[b])return l[b];l[b]=k.length/3;k.push(a.x,a.y,a.z);return l[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==p[b])return p[b];p[b]=n.length;n.push(a.getHex());return p[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==q[b])return q[b];q[b]=m.length/2;m.push(a.x,a.y);return q[b]}var e={metadata:{version:4.4,type:\"Geometry\",\r\n\tgenerator:\"Geometry.toJSON\"}};e.uuid=this.uuid;e.type=this.type;\"\"!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==f[g]&&(e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}var h=[],k=[],l={},n=[],p={},m=[],q={};for(g=0;g<this.faces.length;g++){var r=this.faces[g],s=void 0!==this.faceVertexUvs[0][g],u=0<r.normal.length(),x=0<r.vertexNormals.length,v=1!==r.color.r||1!==r.color.g||1!==r.color.b,\r\n\tC=0<r.vertexColors.length,w=0,w=a(w,0,0),w=a(w,1,!0),w=a(w,2,!1),w=a(w,3,s),w=a(w,4,u),w=a(w,5,x),w=a(w,6,v),w=a(w,7,C);h.push(w);h.push(r.a,r.b,r.c);h.push(r.materialIndex);s&&(s=this.faceVertexUvs[0][g],h.push(d(s[0]),d(s[1]),d(s[2])));u&&h.push(b(r.normal));x&&(u=r.vertexNormals,h.push(b(u[0]),b(u[1]),b(u[2])));v&&h.push(c(r.color));C&&(r=r.vertexColors,h.push(c(r[0]),c(r[1]),c(r[2])))}e.data={};e.data.vertices=f;e.data.normals=k;0<n.length&&(e.data.colors=n);0<m.length&&(e.data.uvs=[m]);e.data.faces=\r\n\th;return e},clone:function(){return(new THREE.Geometry).copy(this)},copy:function(a){this.vertices=[];this.faces=[];this.faceVertexUvs=[[]];for(var b=a.vertices,c=0,d=b.length;c<d;c++)this.vertices.push(b[c].clone());b=a.faces;c=0;for(d=b.length;c<d;c++)this.faces.push(b[c].clone());c=0;for(d=a.faceVertexUvs.length;c<d;c++){b=a.faceVertexUvs[c];void 0===this.faceVertexUvs[c]&&(this.faceVertexUvs[c]=[]);for(var e=0,f=b.length;e<f;e++){for(var g=b[e],h=[],k=0,l=g.length;k<l;k++)h.push(g[k].clone());\r\n\tthis.faceVertexUvs[c].push(h)}}return this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});THREE.GeometryIdCount=0;\r\n\tTHREE.DirectGeometry=function(){Object.defineProperty(this,\"id\",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"DirectGeometry\";this.indices=[];this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1};\r\n\tObject.assign(THREE.DirectGeometry.prototype,THREE.EventDispatcher.prototype,{computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn(\"THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.\")},computeVertexNormals:function(){console.warn(\"THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.\")},computeGroups:function(a){var b,\r\n\tc=[],d;a=a.faces;for(var e=0;e<a.length;e++){var f=a[e];f.materialIndex!==d&&(d=f.materialIndex,void 0!==b&&(b.count=3*e-b.start,c.push(b)),b={start:3*e,materialIndex:d})}void 0!==b&&(b.count=3*e-b.start,c.push(b));this.groups=c},fromGeometry:function(a){var b=a.faces,c=a.vertices,d=a.faceVertexUvs,e=d[0]&&0<d[0].length,f=d[1]&&0<d[1].length,g=a.morphTargets,h=g.length,k;if(0<h){k=[];for(var l=0;l<h;l++)k[l]=[];this.morphTargets.position=k}var n=a.morphNormals,p=n.length,m;if(0<p){m=[];for(l=0;l<\r\n\tp;l++)m[l]=[];this.morphTargets.normal=m}for(var q=a.skinIndices,r=a.skinWeights,s=q.length===c.length,u=r.length===c.length,l=0;l<b.length;l++){var x=b[l];this.vertices.push(c[x.a],c[x.b],c[x.c]);var v=x.vertexNormals;3===v.length?this.normals.push(v[0],v[1],v[2]):(v=x.normal,this.normals.push(v,v,v));v=x.vertexColors;3===v.length?this.colors.push(v[0],v[1],v[2]):(v=x.color,this.colors.push(v,v,v));!0===e&&(v=d[0][l],void 0!==v?this.uvs.push(v[0],v[1],v[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \",\r\n\tl),this.uvs.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)));!0===f&&(v=d[1][l],void 0!==v?this.uvs2.push(v[0],v[1],v[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \",l),this.uvs2.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)));for(v=0;v<h;v++){var C=g[v].vertices;k[v].push(C[x.a],C[x.b],C[x.c])}for(v=0;v<p;v++)C=n[v].vertexNormals[l],m[v].push(C.a,C.b,C.c);s&&this.skinIndices.push(q[x.a],q[x.b],q[x.c]);u&&this.skinWeights.push(r[x.a],r[x.b],\r\n\tr[x.c])}this.computeGroups(a);this.verticesNeedUpdate=a.verticesNeedUpdate;this.normalsNeedUpdate=a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});\r\n\tTHREE.BufferGeometry=function(){Object.defineProperty(this,\"id\",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"BufferGeometry\";this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange={start:0,count:Infinity}};\r\n\tObject.assign(THREE.BufferGeometry.prototype,THREE.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(a){this.index=a},addAttribute:function(a,b,c){if(!1===b instanceof THREE.BufferAttribute&&!1===b instanceof THREE.InterleavedBufferAttribute)console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),this.addAttribute(a,new THREE.BufferAttribute(b,c));else if(\"index\"===a)console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),\r\n\tthis.setIndex(b);else return this.attributes[a]=b,this},getAttribute:function(a){return this.attributes[a]},removeAttribute:function(a){delete this.attributes[a];return this},addGroup:function(a,b,c){this.groups.push({start:a,count:b,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,b){this.drawRange.start=a;this.drawRange.count=b},applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToVector3Array(b.array),b.needsUpdate=!0);b=this.attributes.normal;\r\n\tvoid 0!==b&&((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(b.array),b.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();return this},rotateX:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationY(b);this.applyMatrix(a);return this}}(),rotateZ:function(){var a;\r\n\treturn function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a;return function(b){void 0===a&&(a=new THREE.Object3D);a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),\r\n\tcenter:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.translate(a.x,a.y,a.z);return a},setFromObject:function(a){var b=a.geometry;if(a instanceof THREE.Points||a instanceof THREE.Line){a=new THREE.Float32Attribute(3*b.vertices.length,3);var c=new THREE.Float32Attribute(3*b.colors.length,3);this.addAttribute(\"position\",a.copyVector3sArray(b.vertices));this.addAttribute(\"color\",c.copyColorsArray(b.colors));b.lineDistances&&b.lineDistances.length===b.vertices.length&&\r\n\t(a=new THREE.Float32Attribute(b.lineDistances.length,1),this.addAttribute(\"lineDistance\",a.copyArray(b.lineDistances)));null!==b.boundingSphere&&(this.boundingSphere=b.boundingSphere.clone());null!==b.boundingBox&&(this.boundingBox=b.boundingBox.clone())}else a instanceof THREE.Mesh&&b instanceof THREE.Geometry&&this.fromGeometry(b);return this},updateFromObject:function(a){var b=a.geometry;if(a instanceof THREE.Mesh){var c=b.__directGeometry;if(void 0===c)return this.fromGeometry(b);c.verticesNeedUpdate=\r\n\tb.verticesNeedUpdate;c.normalsNeedUpdate=b.normalsNeedUpdate;c.colorsNeedUpdate=b.colorsNeedUpdate;c.uvsNeedUpdate=b.uvsNeedUpdate;c.groupsNeedUpdate=b.groupsNeedUpdate;b.verticesNeedUpdate=!1;b.normalsNeedUpdate=!1;b.colorsNeedUpdate=!1;b.uvsNeedUpdate=!1;b.groupsNeedUpdate=!1;b=c}!0===b.verticesNeedUpdate&&(c=this.attributes.position,void 0!==c&&(c.copyVector3sArray(b.vertices),c.needsUpdate=!0),b.verticesNeedUpdate=!1);!0===b.normalsNeedUpdate&&(c=this.attributes.normal,void 0!==c&&(c.copyVector3sArray(b.normals),\r\n\tc.needsUpdate=!0),b.normalsNeedUpdate=!1);!0===b.colorsNeedUpdate&&(c=this.attributes.color,void 0!==c&&(c.copyColorsArray(b.colors),c.needsUpdate=!0),b.colorsNeedUpdate=!1);b.uvsNeedUpdate&&(c=this.attributes.uv,void 0!==c&&(c.copyVector2sArray(b.uvs),c.needsUpdate=!0),b.uvsNeedUpdate=!1);b.lineDistancesNeedUpdate&&(c=this.attributes.lineDistance,void 0!==c&&(c.copyArray(b.lineDistances),c.needsUpdate=!0),b.lineDistancesNeedUpdate=!1);b.groupsNeedUpdate&&(b.computeGroups(a.geometry),this.groups=\r\n\tb.groups,b.groupsNeedUpdate=!1);return this},fromGeometry:function(a){a.__directGeometry=(new THREE.DirectGeometry).fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var b=new Float32Array(3*a.vertices.length);this.addAttribute(\"position\",(new THREE.BufferAttribute(b,3)).copyVector3sArray(a.vertices));0<a.normals.length&&(b=new Float32Array(3*a.normals.length),this.addAttribute(\"normal\",(new THREE.BufferAttribute(b,3)).copyVector3sArray(a.normals)));\r\n\t0<a.colors.length&&(b=new Float32Array(3*a.colors.length),this.addAttribute(\"color\",(new THREE.BufferAttribute(b,3)).copyColorsArray(a.colors)));0<a.uvs.length&&(b=new Float32Array(2*a.uvs.length),this.addAttribute(\"uv\",(new THREE.BufferAttribute(b,2)).copyVector2sArray(a.uvs)));0<a.uvs2.length&&(b=new Float32Array(2*a.uvs2.length),this.addAttribute(\"uv2\",(new THREE.BufferAttribute(b,2)).copyVector2sArray(a.uvs2)));0<a.indices.length&&(b=new (65535<a.vertices.length?Uint32Array:Uint16Array)(3*a.indices.length),\r\n\tthis.setIndex((new THREE.BufferAttribute(b,1)).copyIndicesArray(a.indices)));this.groups=a.groups;for(var c in a.morphTargets){for(var b=[],d=a.morphTargets[c],e=0,f=d.length;e<f;e++){var g=d[e],h=new THREE.Float32Attribute(3*g.length,3);b.push(h.copyVector3sArray(g))}this.morphAttributes[c]=b}0<a.skinIndices.length&&(c=new THREE.Float32Attribute(4*a.skinIndices.length,4),this.addAttribute(\"skinIndex\",c.copyVector4sArray(a.skinIndices)));0<a.skinWeights.length&&(c=new THREE.Float32Attribute(4*a.skinWeights.length,\r\n\t4),this.addAttribute(\"skinWeight\",c.copyVector4sArray(a.skinWeights)));null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var a=this.attributes.position.array;void 0!==a?this.boundingBox.setFromArray(a):this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&\r\n\tconsole.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){var d=this.boundingSphere.center;a.setFromArray(c);a.center(d);for(var e=0,f=0,g=c.length;f<g;f+=3)b.fromArray(c,f),e=Math.max(e,d.distanceToSquared(b));\r\n\tthis.boundingSphere.radius=Math.sqrt(e);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,b=this.attributes,c=this.groups;if(b.position){var d=b.position.array;if(void 0===b.normal)this.addAttribute(\"normal\",new THREE.BufferAttribute(new Float32Array(d.length),3));else for(var e=b.normal.array,\r\n\tf=0,g=e.length;f<g;f++)e[f]=0;var e=b.normal.array,h,k,l,n=new THREE.Vector3,p=new THREE.Vector3,m=new THREE.Vector3,q=new THREE.Vector3,r=new THREE.Vector3;if(a){a=a.array;0===c.length&&this.addGroup(0,a.length);for(var s=0,u=c.length;s<u;++s)for(f=c[s],g=f.start,h=f.count,f=g,g+=h;f<g;f+=3)h=3*a[f+0],k=3*a[f+1],l=3*a[f+2],n.fromArray(d,h),p.fromArray(d,k),m.fromArray(d,l),q.subVectors(m,p),r.subVectors(n,p),q.cross(r),e[h]+=q.x,e[h+1]+=q.y,e[h+2]+=q.z,e[k]+=q.x,e[k+1]+=q.y,e[k+2]+=q.z,e[l]+=q.x,\r\n\te[l+1]+=q.y,e[l+2]+=q.z}else for(f=0,g=d.length;f<g;f+=9)n.fromArray(d,f),p.fromArray(d,f+3),m.fromArray(d,f+6),q.subVectors(m,p),r.subVectors(n,p),q.cross(r),e[f]=q.x,e[f+1]=q.y,e[f+2]=q.z,e[f+3]=q.x,e[f+4]=q.y,e[f+5]=q.z,e[f+6]=q.x,e[f+7]=q.y,e[f+8]=q.z;this.normalizeNormals();b.normal.needsUpdate=!0}},merge:function(a,b){if(!1===a instanceof THREE.BufferGeometry)console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",a);else{void 0===b&&(b=0);var c=this.attributes,\r\n\td;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],g=f.array,h=0,f=f.itemSize*b;h<g.length;h++,f++)e[f]=g[h];return this}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},toNonIndexed:function(){if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.\"),this;var a=new THREE.BufferGeometry,\r\n\tb=this.index.array,c=this.attributes,d;for(d in c){for(var e=c[d],f=e.array,e=e.itemSize,g=new f.constructor(b.length*e),h=0,k=0,l=0,n=b.length;l<n;l++)for(var h=b[l]*e,p=0;p<e;p++)g[k++]=f[h++];a.addAttribute(d,new THREE.BufferAttribute(g,e))}return a},toJSON:function(){var a={metadata:{version:4.4,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};a.uuid=this.uuid;a.type=this.type;\"\"!==this.name&&(a.name=this.name);if(void 0!==this.parameters){var b=this.parameters,c;for(c in b)void 0!==\r\n\tb[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};var d=this.index;null!==d&&(b=Array.prototype.slice.call(d.array),a.data.index={type:d.array.constructor.name,array:b});d=this.attributes;for(c in d){var e=d[c],b=Array.prototype.slice.call(e.array);a.data.attributes[c]={itemSize:e.itemSize,type:e.array.constructor.name,array:b,normalized:e.normalized}}c=this.groups;0<c.length&&(a.data.groups=JSON.parse(JSON.stringify(c)));c=this.boundingSphere;null!==c&&(a.data.boundingSphere={center:c.center.toArray(),\r\n\tradius:c.radius});return a},clone:function(){return(new THREE.BufferGeometry).copy(this)},copy:function(a){var b=a.index;null!==b&&this.setIndex(b.clone());var b=a.attributes,c;for(c in b)this.addAttribute(c,b[c].clone());a=a.groups;c=0;for(b=a.length;c<b;c++){var d=a[c];this.addGroup(d.start,d.count,d.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});THREE.BufferGeometry.MaxIndex=65535;\r\n\tTHREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this);this.type=\"InstancedBufferGeometry\";this.maxInstancedCount=void 0};THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry;THREE.InstancedBufferGeometry.prototype.addGroup=function(a,b,c){this.groups.push({start:a,count:b,instances:c})};\r\n\tTHREE.InstancedBufferGeometry.prototype.copy=function(a){var b=a.index;null!==b&&this.setIndex(b.clone());var b=a.attributes,c;for(c in b)this.addAttribute(c,b[c].clone());a=a.groups;c=0;for(b=a.length;c<b;c++){var d=a[c];this.addGroup(d.start,d.count,d.instances)}return this};THREE.Uniform=function(a,b){\"string\"===typeof a&&(console.warn(\"THREE.Uniform: Type parameter is no longer needed.\"),a=b);this.value=a;this.dynamic=!1};\r\n\tTHREE.Uniform.prototype={constructor:THREE.Uniform,onUpdate:function(a){this.dynamic=!0;this.onUpdateCallback=a;return this}};THREE.AnimationAction=function(){throw Error(\"THREE.AnimationAction: Use mixer.clipAction for construction.\");};\r\n\tTHREE.AnimationAction._new=function(a,b,c){this._mixer=a;this._clip=b;this._localRoot=c||null;a=b.tracks;b=a.length;c=Array(b);for(var d={endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},e=0;e!==b;++e){var f=a[e].createInterpolant(null);c[e]=f;f.settings=d}this._interpolantSettings=d;this._interpolants=c;this._propertyBindings=Array(b);this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null;this.loop=THREE.LoopRepeat;this._loopCount=\r\n\t-1;this._startTime=null;this.time=0;this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1;this.repetitions=Infinity;this.paused=!1;this.enabled=!0;this.clampWhenFinished=!1;this.zeroSlopeAtEnd=this.zeroSlopeAtStart=!0};\r\n\tTHREE.AnimationAction._new.prototype={constructor:THREE.AnimationAction._new,play:function(){this._mixer._activateAction(this);return this},stop:function(){this._mixer._deactivateAction(this);return this.reset()},reset:function(){this.paused=!1;this.enabled=!0;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},\r\n\tstartAt:function(a){this._startTime=a;return this},setLoop:function(a,b){this.loop=a;this.repetitions=b;return this},setEffectiveWeight:function(a){this.weight=a;this._effectiveWeight=this.enabled?a:0;return this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,b,c){a.fadeOut(b);this.fadeIn(b);if(c){c=this._clip.duration;var d=a._clip.duration,\r\n\te=c/d;a.warp(1,d/c,b);this.warp(e,1,b)}return this},crossFadeTo:function(a,b,c){return a.crossFadeFrom(this,b,c)},stopFading:function(){var a=this._weightInterpolant;null!==a&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},setEffectiveTimeScale:function(a){this.timeScale=a;this._effectiveTimeScale=this.paused?0:a;return this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){this.timeScale=this._clip.duration/\r\n\ta;return this.stopWarping()},syncWith:function(a){this.time=a.time;this.timeScale=a.timeScale;return this.stopWarping()},halt:function(a){return this.warp(this._effectiveTimeScale,0,a)},warp:function(a,b,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,g=this.timeScale;null===f&&(this._timeScaleInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;d[1]=e+c;f[0]=a/g;f[1]=b/g;return this},stopWarping:function(){var a=this._timeScaleInterpolant;null!==a&&\r\n\t(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(a,b,c,d){var e=this._startTime;if(null!==e){b=(a-e)*c;if(0>b||0===c)return;this._startTime=null;b*=c}b*=this._updateTimeScale(a);c=this._updateTime(b);a=this._updateWeight(a);if(0<a){b=this._interpolants;for(var e=this._propertyBindings,f=0,g=b.length;f!==\r\n\tg;++f)b[f].evaluate(c),e[f].accumulate(d,a)}},_updateWeight:function(a){var b=0;if(this.enabled){var b=this.weight,c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0],b=b*d;a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=b},_updateTimeScale:function(a){var b=0;if(!this.paused){var b=this.timeScale,c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0],b=b*d;a>c.parameterPositions[1]&&(this.stopWarping(),0===b?this.paused=!0:\r\n\tthis.timeScale=b)}}return this._effectiveTimeScale=b},_updateTime:function(a){var b=this.time+a;if(0===a)return b;var c=this._clip.duration,d=this.loop,e=this._loopCount;if(d===THREE.LoopOnce)a:{if(-1===e&&(this.loopCount=0,this._setEndings(!0,!0,!1)),b>=c)b=c;else if(0>b)b=0;else break a;this.clampWhenFinished?this.paused=!0:this.enabled=!1;this._mixer.dispatchEvent({type:\"finished\",action:this,direction:0>a?-1:1})}else{d=d===THREE.LoopPingPong;-1===e&&(0<=a?(e=0,this._setEndings(!0,0===this.repetitions,\r\n\td)):this._setEndings(0===this.repetitions,!0,d));if(b>=c||0>b){var f=Math.floor(b/c),b=b-c*f,e=e+Math.abs(f),g=this.repetitions-e;0>g?(this.clampWhenFinished?this.paused=!0:this.enabled=!1,b=0<a?c:0,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:0<a?1:-1})):(0===g?(a=0>a,this._setEndings(a,!a,d)):this._setEndings(!1,!1,d),this._loopCount=e,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:f}))}if(d&&1===(e&1))return this.time=b,c-b}return this.time=b},_setEndings:function(a,\r\n\tb,c){var d=this._interpolantSettings;c?(d.endingStart=THREE.ZeroSlopeEnding,d.endingEnd=THREE.ZeroSlopeEnding):(d.endingStart=a?this.zeroSlopeAtStart?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding,d.endingEnd=b?this.zeroSlopeAtEnd?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding)},_scheduleFading:function(a,b,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;null===f&&(this._weightInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;\r\n\tf=f.sampleValues;d[0]=e;f[0]=b;d[1]=e+a;f[1]=c;return this}};THREE.AnimationClip=function(a,b,c){this.name=a;this.tracks=c;this.duration=void 0!==b?b:-1;this.uuid=THREE.Math.generateUUID();0>this.duration&&this.resetDuration();this.trim();this.optimize()};\r\n\tTHREE.AnimationClip.prototype={constructor:THREE.AnimationClip,resetDuration:function(){for(var a=0,b=0,c=this.tracks.length;b!==c;++b)var d=this.tracks[b],a=Math.max(a,d.times[d.times.length-1]);this.duration=a},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}};\r\n\tObject.assign(THREE.AnimationClip,{parse:function(a){for(var b=[],c=a.tracks,d=1/(a.fps||1),e=0,f=c.length;e!==f;++e)b.push(THREE.KeyframeTrack.parse(c[e]).scale(d));return new THREE.AnimationClip(a.name,a.duration,b)},toJSON:function(a){var b=[],c=a.tracks;a={name:a.name,duration:a.duration,tracks:b};for(var d=0,e=c.length;d!==e;++d)b.push(THREE.KeyframeTrack.toJSON(c[d]));return a},CreateFromMorphTargetSequence:function(a,b,c,d){for(var e=b.length,f=[],g=0;g<e;g++){var h=[],k=[];h.push((g+e-1)%\r\n\te,g,(g+1)%e);k.push(0,1,0);var l=THREE.AnimationUtils.getKeyframeOrder(h),h=THREE.AnimationUtils.sortedArray(h,1,l),k=THREE.AnimationUtils.sortedArray(k,1,l);d||0!==h[0]||(h.push(e),k.push(k[0]));f.push((new THREE.NumberKeyframeTrack(\".morphTargetInfluences[\"+b[g].name+\"]\",h,k)).scale(1/c))}return new THREE.AnimationClip(a,-1,f)},findByName:function(a,b){var c=a;Array.isArray(a)||(c=a.geometry&&a.geometry.animations||a.animations);for(var d=0;d<c.length;d++)if(c[d].name===b)return c[d];return null},\r\n\tCreateClipsFromMorphTargetSequences:function(a,b,c){for(var d={},e=/^([\\w-]*?)([\\d]+)$/,f=0,g=a.length;f<g;f++){var h=a[f],k=h.name.match(e);if(k&&1<k.length){var l=k[1];(k=d[l])||(d[l]=k=[]);k.push(h)}}a=[];for(l in d)a.push(THREE.AnimationClip.CreateFromMorphTargetSequence(l,d[l],b,c));return a},parseAnimation:function(a,b,c){if(!a)return console.error(\"  no animation in JSONLoader data\"),null;c=function(a,b,c,d,e){if(0!==c.length){var f=[],g=[];THREE.AnimationUtils.flattenJSON(c,f,g,d);0!==f.length&&\r\n\te.push(new a(b,f,g))}};var d=[],e=a.name||\"default\",f=a.length||-1,g=a.fps||30;a=a.hierarchy||[];for(var h=0;h<a.length;h++){var k=a[h].keys;if(k&&0!==k.length)if(k[0].morphTargets){for(var f={},l=0;l<k.length;l++)if(k[l].morphTargets)for(var n=0;n<k[l].morphTargets.length;n++)f[k[l].morphTargets[n]]=-1;for(var p in f){for(var m=[],q=[],n=0;n!==k[l].morphTargets.length;++n){var r=k[l];m.push(r.time);q.push(r.morphTarget===p?1:0)}d.push(new THREE.NumberKeyframeTrack(\".morphTargetInfluence[\"+p+\"]\",\r\n\tm,q))}f=f.length*(g||1)}else l=\".bones[\"+b[h].name+\"]\",c(THREE.VectorKeyframeTrack,l+\".position\",k,\"pos\",d),c(THREE.QuaternionKeyframeTrack,l+\".quaternion\",k,\"rot\",d),c(THREE.VectorKeyframeTrack,l+\".scale\",k,\"scl\",d)}return 0===d.length?null:new THREE.AnimationClip(e,f,d)}});THREE.AnimationMixer=function(a){this._root=a;this._initMemoryManager();this.time=this._accuIndex=0;this.timeScale=1};\r\n\tObject.assign(THREE.AnimationMixer.prototype,THREE.EventDispatcher.prototype,{clipAction:function(a,b){var c=b||this._root,d=c.uuid,e=\"string\"===typeof a?THREE.AnimationClip.findByName(c,a):a,c=null!==e?e.uuid:a,f=this._actionsByClip[c],g=null;if(void 0!==f){g=f.actionByRoot[d];if(void 0!==g)return g;g=f.knownActions[0];null===e&&(e=g._clip)}if(null===e)return null;e=new THREE.AnimationMixer._Action(this,e,b);this._bindAction(e,g);this._addInactiveAction(e,c,d);return e},existingAction:function(a,\r\n\tb){var c=b||this._root,d=c.uuid,c=\"string\"===typeof a?THREE.AnimationClip.findByName(c,a):a,c=this._actionsByClip[c?c.uuid:a];return void 0!==c?c.actionByRoot[d]||null:null},stopAllAction:function(){for(var a=this._actions,b=this._nActiveActions,c=this._bindings,d=this._nActiveBindings,e=this._nActiveBindings=this._nActiveActions=0;e!==b;++e)a[e].reset();for(e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var b=this._actions,c=this._nActiveActions,d=this.time+=\r\n\ta,e=Math.sign(a),f=this._accuIndex^=1,g=0;g!==c;++g){var h=b[g];h.enabled&&h._update(d,a,e,f)}a=this._bindings;b=this._nActiveBindings;for(g=0;g!==b;++g)a[g].apply(f);return this},getRoot:function(){return this._root},uncacheClip:function(a){var b=this._actions;a=a.uuid;var c=this._actionsByClip,d=c[a];if(void 0!==d){for(var d=d.knownActions,e=0,f=d.length;e!==f;++e){var g=d[e];this._deactivateAction(g);var h=g._cacheIndex,k=b[b.length-1];g._cacheIndex=null;g._byClipCacheIndex=null;k._cacheIndex=\r\n\th;b[h]=k;b.pop();this._removeInactiveBindingsForAction(g)}delete c[a]}},uncacheRoot:function(a){a=a.uuid;var b=this._actionsByClip,c;for(c in b){var d=b[c].actionByRoot[a];void 0!==d&&(this._deactivateAction(d),this._removeInactiveAction(d))}c=this._bindingsByRootAndName[a];if(void 0!==c)for(var e in c)a=c[e],a.restoreOriginalState(),this._removeInactiveBinding(a)},uncacheAction:function(a,b){var c=this.existingAction(a,b);null!==c&&(this._deactivateAction(c),this._removeInactiveAction(c))}});\r\n\tTHREE.AnimationMixer._Action=THREE.AnimationAction._new;\r\n\tObject.assign(THREE.AnimationMixer.prototype,{_bindAction:function(a,b){var c=a._localRoot||this._root,d=a._clip.tracks,e=d.length,f=a._propertyBindings,g=a._interpolants,h=c.uuid,k=this._bindingsByRootAndName,l=k[h];void 0===l&&(l={},k[h]=l);for(k=0;k!==e;++k){var n=d[k],p=n.name,m=l[p];if(void 0===m){m=f[k];if(void 0!==m){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,h,p));continue}m=new THREE.PropertyMixer(THREE.PropertyBinding.create(c,p,b&&b._propertyBindings[k].binding.parsedPath),\r\n\tn.ValueTypeName,n.getValueSize());++m.referenceCount;this._addInactiveBinding(m,h,p)}f[k]=m;g[k].resultBuffer=m.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var b=(a._localRoot||this._root).uuid,c=a._clip.uuid,d=this._actionsByClip[c];this._bindAction(a,d&&d.knownActions[0]);this._addInactiveAction(a,c,b)}b=a._propertyBindings;c=0;for(d=b.length;c!==d;++c){var e=b[c];0===e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(a)}},\r\n\t_deactivateAction:function(a){if(this._isActiveAction(a)){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},\r\n\tget inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},_isActiveAction:function(a){a=a._cacheIndex;return null!==a&&a<this._nActiveActions},_addInactiveAction:function(a,b,c){var d=this._actions,e=this._actionsByClip,f=e[b];void 0===f?(f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[b]=f):(b=\r\n\tf.knownActions,a._byClipCacheIndex=b.length,b.push(a));a._cacheIndex=d.length;d.push(a);f.actionByRoot[c]=a},_removeInactiveAction:function(a){var b=this._actions,c=b[b.length-1],d=a._cacheIndex;c._cacheIndex=d;b[d]=c;b.pop();a._cacheIndex=null;var c=a._clip.uuid,d=this._actionsByClip,e=d[c],f=e.knownActions,g=f[f.length-1],h=a._byClipCacheIndex;g._byClipCacheIndex=h;f[h]=g;f.pop();a._byClipCacheIndex=null;delete e.actionByRoot[(b._localRoot||this._root).uuid];0===f.length&&delete d[c];this._removeInactiveBindingsForAction(a)},\r\n\t_removeInactiveBindingsForAction:function(a){a=a._propertyBindings;for(var b=0,c=a.length;b!==c;++b){var d=a[b];0===--d.referenceCount&&this._removeInactiveBinding(d)}},_lendAction:function(a){var b=this._actions,c=a._cacheIndex,d=this._nActiveActions++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackAction:function(a){var b=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_addInactiveBinding:function(a,b,c){var d=this._bindingsByRootAndName,\r\n\te=d[b],f=this._bindings;void 0===e&&(e={},d[b]=e);e[c]=a;a._cacheIndex=f.length;f.push(a)},_removeInactiveBinding:function(a){var b=this._bindings,c=a.binding,d=c.rootNode.uuid,c=c.path,e=this._bindingsByRootAndName,f=e[d],g=b[b.length-1];a=a._cacheIndex;g._cacheIndex=a;b[a]=g;b.pop();delete f[c];a:{for(var h in f)break a;delete e[d]}},_lendBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackBinding:function(a){var b=\r\n\tthis._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,b=this._nActiveControlInterpolants++,c=a[b];void 0===c&&(c=new THREE.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),c.__cacheIndex=b,a[b]=c);return c},_takeBackControlInterpolant:function(a){var b=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,\r\n\te=b[d];a.__cacheIndex=d;b[d]=a;e.__cacheIndex=c;b[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1)});\r\n\tTHREE.AnimationObjectGroup=function(a){this.uuid=THREE.Math.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;var b={};this._indicesByUUID=b;for(var c=0,d=arguments.length;c!==d;++c)b[arguments[c].uuid]=c;this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};var e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}};\r\n\tTHREE.AnimationObjectGroup.prototype={constructor:THREE.AnimationObjectGroup,add:function(a){for(var b=this._objects,c=b.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._paths,g=this._parsedPaths,h=this._bindings,k=h.length,l=0,n=arguments.length;l!==n;++l){var p=arguments[l],m=p.uuid,q=e[m];if(void 0===q){q=c++;e[m]=q;b.push(p);for(var m=0,r=k;m!==r;++m)h[m].push(new THREE.PropertyBinding(p,f[m],g[m]))}else if(q<d){var s=b[q],u=--d,r=b[u];e[r.uuid]=q;b[q]=r;e[m]=u;b[u]=p;m=0;for(r=k;m!==\r\n\tr;++m){var x=h[m],v=x[q];x[q]=x[u];void 0===v&&(v=new THREE.PropertyBinding(p,f[m],g[m]));x[u]=v}}else b[q]!==s&&console.error(\"Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...\")}this.nCachedObjects_=d},remove:function(a){for(var b=this._objects,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._bindings,f=e.length,g=0,h=arguments.length;g!==h;++g){var k=arguments[g],l=k.uuid,n=d[l];if(void 0!==n&&n>=c){var p=c++,m=b[p];d[m.uuid]=\r\n\tn;b[n]=m;d[l]=p;b[p]=k;k=0;for(l=f;k!==l;++k){var m=e[k],q=m[n];m[n]=m[p];m[p]=q}}}this.nCachedObjects_=c},uncache:function(a){for(var b=this._objects,c=b.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._bindings,g=f.length,h=0,k=arguments.length;h!==k;++h){var l=arguments[h].uuid,n=e[l];if(void 0!==n)if(delete e[l],n<d){var l=--d,p=b[l],m=--c,q=b[m];e[p.uuid]=n;b[n]=p;e[q.uuid]=l;b[l]=q;b.pop();p=0;for(q=g;p!==q;++p){var r=f[p],s=r[m];r[n]=r[l];r[l]=s;r.pop()}}else for(m=--c,q=b[m],e[q.uuid]=\r\n\tn,b[n]=q,b.pop(),p=0,q=g;p!==q;++p)r=f[p],r[n]=r[m],r.pop()}this.nCachedObjects_=d},subscribe_:function(a,b){var c=this._bindingsIndicesByPath,d=c[a],e=this._bindings;if(void 0!==d)return e[d];var f=this._paths,g=this._parsedPaths,h=this._objects,k=this.nCachedObjects_,l=Array(h.length),d=e.length;c[a]=d;f.push(a);g.push(b);e.push(l);c=k;for(d=h.length;c!==d;++c)l[c]=new THREE.PropertyBinding(h[c],a,b);return l},unsubscribe_:function(a){var b=this._bindingsIndicesByPath,c=b[a];if(void 0!==c){var d=\r\n\tthis._paths,e=this._parsedPaths,f=this._bindings,g=f.length-1,h=f[g];b[a[g]]=c;f[c]=h;f.pop();e[c]=e[g];e.pop();d[c]=d[g];d.pop()}}};\r\n\tTHREE.AnimationUtils={arraySlice:function(a,b,c){return THREE.AnimationUtils.isTypedArray(a)?new a.constructor(a.subarray(b,c)):a.slice(b,c)},convertArray:function(a,b,c){return!a||!c&&a.constructor===b?a:\"number\"===typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){for(var b=a.length,c=Array(b),d=0;d!==b;++d)c[d]=d;c.sort(function(b,c){return a[b]-a[c]});return c},sortedArray:function(a,\r\n\tb,c){for(var d=a.length,e=new a.constructor(d),f=0,g=0;g!==d;++f)for(var h=c[f]*b,k=0;k!==b;++k)e[g++]=a[h+k];return e},flattenJSON:function(a,b,c,d){for(var e=1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var g=f[d];if(void 0!==g)if(Array.isArray(g)){do g=f[d],void 0!==g&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)}else if(void 0!==g.toArray){do g=f[d],void 0!==g&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else{do g=f[d],void 0!==g&&(b.push(f.time),\r\n\tc.push(g)),f=a[e++];while(void 0!==f)}}}};THREE.KeyframeTrack=function(a,b,c,d){if(void 0===a)throw Error(\"track name is undefined\");if(void 0===b||0===b.length)throw Error(\"no keyframes in track named \"+a);this.name=a;this.times=THREE.AnimationUtils.convertArray(b,this.TimeBufferType);this.values=THREE.AnimationUtils.convertArray(c,this.ValueBufferType);this.setInterpolation(d||this.DefaultInterpolation);this.validate();this.optimize()};\r\n\tTHREE.KeyframeTrack.prototype={constructor:THREE.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(a){return new THREE.DiscreteInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new THREE.LinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new THREE.CubicInterpolant(this.times,\r\n\tthis.values,this.getValueSize(),a)},setInterpolation:function(a){var b;switch(a){case THREE.InterpolateDiscrete:b=this.InterpolantFactoryMethodDiscrete;break;case THREE.InterpolateLinear:b=this.InterpolantFactoryMethodLinear;break;case THREE.InterpolateSmooth:b=this.InterpolantFactoryMethodSmooth}if(void 0===b){b=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant)if(a!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);\r\n\telse throw Error(b);console.warn(b)}else this.createInterpolant=b},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return THREE.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return THREE.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return THREE.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]+=a;return this},\r\n\tscale:function(a){if(1!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]*=a;return this},trim:function(a,b){for(var c=this.times,d=c.length,e=0,f=d-1;e!==d&&c[e]<a;)++e;for(;-1!==f&&c[f]>b;)--f;++f;if(0!==e||f!==d)e>=f&&(f=Math.max(f,1),e=f-1),d=this.getValueSize(),this.times=THREE.AnimationUtils.arraySlice(c,e,f),this.values=THREE.AnimationUtils.arraySlice(this.values,e*d,f*d);return this},validate:function(){var a=!0,b=this.getValueSize();0!==b-Math.floor(b)&&(console.error(\"invalid value size in track\",\r\n\tthis),a=!1);var c=this.times,b=this.values,d=c.length;0===d&&(console.error(\"track is empty\",this),a=!1);for(var e=null,f=0;f!==d;f++){var g=c[f];if(\"number\"===typeof g&&isNaN(g)){console.error(\"time is not a valid number\",this,f,g);a=!1;break}if(null!==e&&e>g){console.error(\"out of order keys\",this,f,g,e);a=!1;break}e=g}if(void 0!==b&&THREE.AnimationUtils.isTypedArray(b))for(f=0,c=b.length;f!==c;++f)if(d=b[f],isNaN(d)){console.error(\"value is not a valid number\",this,f,d);a=!1;break}return a},optimize:function(){for(var a=\r\n\tthis.times,b=this.values,c=this.getValueSize(),d=1,e=1,f=a.length-1;e<=f;++e){var g=!1,h=a[e];if(h!==a[e+1]&&(1!==e||h!==h[0]))for(var k=e*c,l=k-c,n=k+c,h=0;h!==c;++h){var p=b[k+h];if(p!==b[l+h]||p!==b[n+h]){g=!0;break}}if(g){if(e!==d)for(a[d]=a[e],g=e*c,k=d*c,h=0;h!==c;++h)b[k+h]=b[g+h];++d}}d!==a.length&&(this.times=THREE.AnimationUtils.arraySlice(a,0,d),this.values=THREE.AnimationUtils.arraySlice(b,0,d*c));return this}};\r\n\tObject.assign(THREE.KeyframeTrack,{parse:function(a){if(void 0===a.type)throw Error(\"track type undefined, can not parse\");var b=THREE.KeyframeTrack._getTrackTypeForValueTypeName(a.type);if(void 0===a.times){var c=[],d=[];THREE.AnimationUtils.flattenJSON(a.keys,c,d,\"value\");a.times=c;a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)},toJSON:function(a){var b=a.constructor;if(void 0!==b.toJSON)b=b.toJSON(a);else{var b={name:a.name,times:THREE.AnimationUtils.convertArray(a.times,\r\n\tArray),values:THREE.AnimationUtils.convertArray(a.values,Array)},c=a.getInterpolation();c!==a.DefaultInterpolation&&(b.interpolation=c)}b.type=a.ValueTypeName;return b},_getTrackTypeForValueTypeName:function(a){switch(a.toLowerCase()){case \"scalar\":case \"double\":case \"float\":case \"number\":case \"integer\":return THREE.NumberKeyframeTrack;case \"vector\":case \"vector2\":case \"vector3\":case \"vector4\":return THREE.VectorKeyframeTrack;case \"color\":return THREE.ColorKeyframeTrack;case \"quaternion\":return THREE.QuaternionKeyframeTrack;\r\n\tcase \"bool\":case \"boolean\":return THREE.BooleanKeyframeTrack;case \"string\":return THREE.StringKeyframeTrack}throw Error(\"Unsupported typeName: \"+a);}});THREE.PropertyBinding=function(a,b,c){this.path=b;this.parsedPath=c||THREE.PropertyBinding.parseTrackName(b);this.node=THREE.PropertyBinding.findNode(a,this.parsedPath.nodeName)||a;this.rootNode=a};\r\n\tTHREE.PropertyBinding.prototype={constructor:THREE.PropertyBinding,getValue:function(a,b){this.bind();this.getValue(a,b)},setValue:function(a,b){this.bind();this.setValue(a,b)},bind:function(){var a=this.node,b=this.parsedPath,c=b.objectName,d=b.propertyName,e=b.propertyIndex;a||(this.node=a=THREE.PropertyBinding.findNode(this.rootNode,b.nodeName)||this.rootNode);this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(a){if(c){var f=b.objectIndex;switch(c){case \"materials\":if(!a.material){console.error(\"  can not bind to material as node does not have a material\",\r\n\tthis);return}if(!a.material.materials){console.error(\"  can not bind to material.materials as node.material does not have a materials array\",this);return}a=a.material.materials;break;case \"bones\":if(!a.skeleton){console.error(\"  can not bind to bones as node does not have a skeleton\",this);return}a=a.skeleton.bones;for(c=0;c<a.length;c++)if(a[c].name===f){f=c;break}break;default:if(void 0===a[c]){console.error(\"  can not bind to objectName of node, undefined\",this);return}a=a[c]}if(void 0!==f){if(void 0===\r\n\ta[f]){console.error(\"  trying to bind to objectIndex of objectName, but is undefined:\",this,a);return}a=a[f]}}if(f=a[d]){b=this.Versioning.None;void 0!==a.needsUpdate?(b=this.Versioning.NeedsUpdate,this.targetObject=a):void 0!==a.matrixWorldNeedsUpdate&&(b=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=a);c=this.BindingType.Direct;if(void 0!==e){if(\"morphTargetInfluences\"===d){if(!a.geometry){console.error(\"  can not bind to morphTargetInfluences becasuse node does not have a geometry\",\r\n\tthis);return}if(!a.geometry.morphTargets){console.error(\"  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets\",this);return}for(c=0;c<this.node.geometry.morphTargets.length;c++)if(a.geometry.morphTargets[c].name===e){e=c;break}}c=this.BindingType.ArrayElement;this.resolvedProperty=f;this.propertyIndex=e}else void 0!==f.fromArray&&void 0!==f.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=f):void 0!==f.length?(c=this.BindingType.EntireArray,this.resolvedProperty=\r\n\tf):this.propertyName=d;this.getValue=this.GetterByBindingType[c];this.setValue=this.SetterByBindingTypeAndVersioning[c][b]}else console.error(\"  trying to update property for track: \"+b.nodeName+\".\"+d+\" but it wasn't found.\",a)}else console.error(\"  trying to update node for track: \"+this.path+\" but it wasn't found.\")},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}};\r\n\tObject.assign(THREE.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:THREE.PropertyBinding.prototype.getValue,_setValue_unbound:THREE.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(a,b){a[b]=this.node[this.propertyName]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[b++]=\r\n\tc[d]},function(a,b){a[b]=this.resolvedProperty[this.propertyIndex]},function(a,b){this.resolvedProperty.toArray(a,b)}],SetterByBindingTypeAndVersioning:[[function(a,b){this.node[this.propertyName]=a[b]},function(a,b){this.node[this.propertyName]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.node[this.propertyName]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++]},function(a,b){for(var c=this.resolvedProperty,\r\n\td=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.needsUpdate=!0},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty[this.propertyIndex]=a[b]},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty.fromArray(a,\r\n\tb)},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.matrixWorldNeedsUpdate=!0}]]});THREE.PropertyBinding.Composite=function(a,b,c){c=c||THREE.PropertyBinding.parseTrackName(b);this._targetGroup=a;this._bindings=a.subscribe_(b,c)};\r\n\tTHREE.PropertyBinding.Composite.prototype={constructor:THREE.PropertyBinding.Composite,getValue:function(a,b){this.bind();var c=this._bindings[this._targetGroup.nCachedObjects_];void 0!==c&&c.getValue(a,b)},setValue:function(a,b){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,b)},bind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].bind()},unbind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,\r\n\tc=a.length;b!==c;++b)a[b].unbind()}};THREE.PropertyBinding.create=function(a,b,c){return a instanceof THREE.AnimationObjectGroup?new THREE.PropertyBinding.Composite(a,b,c):new THREE.PropertyBinding(a,b,c)};\r\n\tTHREE.PropertyBinding.parseTrackName=function(a){var b=/^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/,c=b.exec(a);if(!c)throw Error(\"cannot parse trackName at all: \"+a);c.index===b.lastIndex&&b.lastIndex++;b={nodeName:c[3],objectName:c[5],objectIndex:c[7],propertyName:c[9],propertyIndex:c[11]};if(null===b.propertyName||0===b.propertyName.length)throw Error(\"can not parse propertyName from trackName: \"+a);return b};\r\n\tTHREE.PropertyBinding.findNode=function(a,b){if(!b||\"\"===b||\"root\"===b||\".\"===b||-1===b||b===a.name||b===a.uuid)return a;if(a.skeleton){var c=function(a){for(var c=0;c<a.bones.length;c++){var d=a.bones[c];if(d.name===b)return d}return null}(a.skeleton);if(c)return c}if(a.children){var d=function(a){for(var c=0;c<a.length;c++){var g=a[c];if(g.name===b||g.uuid===b||(g=d(g.children)))return g}return null};if(c=d(a.children))return c}return null};\r\n\tTHREE.PropertyMixer=function(a,b,c){this.binding=a;this.valueSize=c;a=Float64Array;switch(b){case \"quaternion\":b=this._slerp;break;case \"string\":case \"bool\":a=Array;b=this._select;break;default:b=this._lerp}this.buffer=new a(4*c);this._mixBufferRegion=b;this.referenceCount=this.useCount=this.cumulativeWeight=0};\r\n\tTHREE.PropertyMixer.prototype={constructor:THREE.PropertyMixer,accumulate:function(a,b){var c=this.buffer,d=this.valueSize,e=a*d+d,f=this.cumulativeWeight;if(0===f){for(f=0;f!==d;++f)c[e+f]=c[f];f=b}else f+=b,this._mixBufferRegion(c,e,0,b/f,d);this.cumulativeWeight=f},apply:function(a){var b=this.valueSize,c=this.buffer;a=a*b+b;var d=this.cumulativeWeight,e=this.binding;this.cumulativeWeight=0;1>d&&this._mixBufferRegion(c,a,3*b,1-d,b);for(var d=b,f=b+b;d!==f;++d)if(c[d]!==c[d+b]){e.setValue(c,a);\r\n\tbreak}},saveOriginalState:function(){var a=this.buffer,b=this.valueSize,c=3*b;this.binding.getValue(a,c);for(var d=b;d!==c;++d)a[d]=a[c+d%b];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(a,b,c,d,e){if(.5<=d)for(d=0;d!==e;++d)a[b+d]=a[c+d]},_slerp:function(a,b,c,d,e){THREE.Quaternion.slerpFlat(a,b,a,b,a,c,d)},_lerp:function(a,b,c,d,e){for(var f=1-d,g=0;g!==e;++g){var h=b+g;a[h]=a[h]*f+a[c+g]*d}}};\r\n\tTHREE.BooleanKeyframeTrack=function(a,b,c){THREE.KeyframeTrack.call(this,a,b,c)};THREE.BooleanKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.BooleanKeyframeTrack,ValueTypeName:\"bool\",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});THREE.ColorKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\n\tTHREE.ColorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.ColorKeyframeTrack,ValueTypeName:\"color\"});THREE.NumberKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};THREE.NumberKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.NumberKeyframeTrack,ValueTypeName:\"number\"});THREE.QuaternionKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\n\tTHREE.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.QuaternionKeyframeTrack,ValueTypeName:\"quaternion\",DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodLinear:function(a){return new THREE.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0});THREE.StringKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\n\tTHREE.StringKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.StringKeyframeTrack,ValueTypeName:\"string\",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});THREE.VectorKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\n\tTHREE.VectorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.VectorKeyframeTrack,ValueTypeName:\"vector\"});\r\n\tTHREE.Audio=function(a){THREE.Object3D.call(this);this.type=\"Audio\";this.context=a.context;this.source=this.context.createBufferSource();this.source.onended=this.onEnded.bind(this);this.gain=this.context.createGain();this.gain.connect(a.getInput());this.autoplay=!1;this.startTime=0;this.playbackRate=1;this.isPlaying=!1;this.hasPlaybackControl=!0;this.sourceType=\"empty\";this.filters=[]};\r\n\tTHREE.Audio.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Audio,getOutput:function(){return this.gain},setNodeSource:function(a){this.hasPlaybackControl=!1;this.sourceType=\"audioNode\";this.source=a;this.connect();return this},setBuffer:function(a){this.source.buffer=a;this.sourceType=\"buffer\";this.autoplay&&this.play();return this},play:function(){if(!0===this.isPlaying)console.warn(\"THREE.Audio: Audio is already playing.\");else if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");\r\n\telse{var a=this.context.createBufferSource();a.buffer=this.source.buffer;a.loop=this.source.loop;a.onended=this.source.onended;a.start(0,this.startTime);a.playbackRate.value=this.playbackRate;this.isPlaying=!0;this.source=a;return this.connect()}},pause:function(){if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");else return this.source.stop(),this.startTime=this.context.currentTime,this},stop:function(){if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");\r\n\telse return this.source.stop(),this.startTime=0,this},connect:function(){if(0<this.filters.length){this.source.connect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(0<this.filters.length){this.source.disconnect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);\r\n\tthis.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(a){a||(a=[]);!0===this.isPlaying?(this.disconnect(),this.filters=a,this.connect()):this.filters=a;return this},getFilter:function(){return this.getFilters()[0]},setFilter:function(a){return this.setFilters(a?[a]:[])},setPlaybackRate:function(a){if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");\r\n\telse return this.playbackRate=a,!0===this.isPlaying&&(this.source.playbackRate.value=this.playbackRate),this},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.source.loop},setLoop:function(a){!1===this.hasPlaybackControl?console.warn(\"THREE.Audio: this Audio has no playback control.\"):this.source.loop=a},getVolume:function(){return this.gain.gain.value},\r\n\tsetVolume:function(a){this.gain.gain.value=a;return this}});THREE.AudioAnalyser=function(a,b){this.analyser=a.context.createAnalyser();this.analyser.fftSize=void 0!==b?b:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);a.getOutput().connect(this.analyser)};\r\n\tObject.assign(THREE.AudioAnalyser.prototype,{getFrequencyData:function(){this.analyser.getByteFrequencyData(this.data);return this.data},getAverageFrequency:function(){for(var a=0,b=this.getFrequencyData(),c=0;c<b.length;c++)a+=b[c];return a/b.length}});Object.defineProperty(THREE,\"AudioContext\",{get:function(){var a;return function(){void 0===a&&(a=new (window.AudioContext||window.webkitAudioContext));return a}}()});\r\n\tTHREE.PositionalAudio=function(a){THREE.Audio.call(this,a);this.panner=this.context.createPanner();this.panner.connect(this.gain)};\r\n\tTHREE.PositionalAudio.prototype=Object.assign(Object.create(THREE.Audio.prototype),{constructor:THREE.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(a){this.panner.refDistance=a},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(a){this.panner.rolloffFactor=a},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(a){this.panner.distanceModel=\r\n\ta},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(a){this.panner.maxDistance=a},updateMatrixWorld:function(){var a=new THREE.Vector3;return function(b){THREE.Object3D.prototype.updateMatrixWorld.call(this,b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x,a.y,a.z)}}()});\r\n\tTHREE.AudioListener=function(){THREE.Object3D.call(this);this.type=\"AudioListener\";this.context=THREE.AudioContext;this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null};\r\n\tTHREE.AudioListener.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(a){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):\r\n\tthis.gain.disconnect(this.context.destination);this.filter=a;this.gain.connect(this.filter);this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(a){this.gain.gain.value=a},updateMatrixWorld:function(){var a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3;return function(e){THREE.Object3D.prototype.updateMatrixWorld.call(this,e);e=this.context.listener;var f=this.up;this.matrixWorld.decompose(a,\r\n\tb,c);d.set(0,0,-1).applyQuaternion(b);e.setPosition(a.x,a.y,a.z);e.setOrientation(d.x,d.y,d.z,f.x,f.y,f.z)}}()});THREE.Camera=function(){THREE.Object3D.call(this);this.type=\"Camera\";this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.constructor=THREE.Camera;\r\n\tTHREE.Camera.prototype.getWorldDirection=function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,-1).applyQuaternion(a)}}();THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.Camera.prototype.clone=function(){return(new this.constructor).copy(this)};\r\n\tTHREE.Camera.prototype.copy=function(a){THREE.Object3D.prototype.copy.call(this,a);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this};\r\n\tTHREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);this.type=\"CubeCamera\";var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));\r\n\tthis.add(g);var h=new THREE.PerspectiveCamera(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,-1));this.add(k);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){null===this.parent&&this.updateMatrixWorld();var c=this.renderTarget,m=c.texture.generateMipmaps;c.texture.generateMipmaps=\r\n\t!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.texture.generateMipmaps=m;c.activeCubeFace=5;a.render(b,k,c);a.setRenderTarget(null)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor=THREE.CubeCamera;\r\n\tTHREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.type=\"OrthographicCamera\";this.zoom=1;this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};\r\n\tTHREE.OrthographicCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.OrthographicCamera,copy:function(a){THREE.Camera.prototype.copy.call(this,a);this.left=a.left;this.right=a.right;this.top=a.top;this.bottom=a.bottom;this.near=a.near;this.far=a.far;this.zoom=a.zoom;return this},updateProjectionMatrix:function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(c-\r\n\ta,c+a,d+b,d-b,this.near,this.far)},toJSON:function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.zoom=this.zoom;a.object.left=this.left;a.object.right=this.right;a.object.top=this.top;a.object.bottom=this.bottom;a.object.near=this.near;a.object.far=this.far;return a}});\r\n\tTHREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.type=\"PerspectiveCamera\";this.fov=void 0!==a?a:50;this.zoom=1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.focus=10;this.aspect=void 0!==b?b:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()};\r\n\tTHREE.PerspectiveCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.PerspectiveCamera,copy:function(a){THREE.Camera.prototype.copy.call(this,a);this.fov=a.fov;this.zoom=a.zoom;this.near=a.near;this.far=a.far;this.focus=a.focus;this.aspect=a.aspect;this.view=null===a.view?null:Object.assign({},a.view);this.filmGauge=a.filmGauge;this.filmOffset=a.filmOffset;return this},setFocalLength:function(a){a=.5*this.getFilmHeight()/a;this.fov=2*THREE.Math.RAD2DEG*Math.atan(a);\r\n\tthis.updateProjectionMatrix()},getFocalLength:function(){var a=Math.tan(.5*THREE.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/a},getEffectiveFOV:function(){return 2*THREE.Math.RAD2DEG*Math.atan(Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(a,b,c,d,e,f){this.aspect=a/b;this.view={fullWidth:a,fullHeight:b,offsetX:c,offsetY:d,\r\n\twidth:e,height:f};this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null;this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=this.near,b=a*Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom,c=2*b,d=this.aspect*c,e=-.5*d,f=this.view;if(null!==f)var g=f.fullWidth,h=f.fullHeight,e=e+f.offsetX*d/g,b=b-f.offsetY*c/h,d=f.width/g*d,c=f.height/h*c;f=this.filmOffset;0!==f&&(e+=a*f/this.getFilmWidth());this.projectionMatrix.makeFrustum(e,e+d,b-c,b,a,this.far)},toJSON:function(a){a=\r\n\tTHREE.Object3D.prototype.toJSON.call(this,a);a.object.fov=this.fov;a.object.zoom=this.zoom;a.object.near=this.near;a.object.far=this.far;a.object.focus=this.focus;a.object.aspect=this.aspect;null!==this.view&&(a.object.view=Object.assign({},this.view));a.object.filmGauge=this.filmGauge;a.object.filmOffset=this.filmOffset;return a}});\r\n\tTHREE.StereoCamera=function(){this.type=\"StereoCamera\";this.aspect=1;this.cameraL=new THREE.PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=!1;this.cameraR=new THREE.PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=!1};\r\n\tObject.assign(THREE.StereoCamera.prototype,{update:function(){var a,b,c,d,e,f=new THREE.Matrix4,g=new THREE.Matrix4;return function(h){if(a!==h.focus||b!==h.fov||c!==h.aspect*this.aspect||d!==h.near||e!==h.far){a=h.focus;b=h.fov;c=h.aspect*this.aspect;d=h.near;e=h.far;var k=h.projectionMatrix.clone(),l=.032*d/a,n=d*Math.tan(THREE.Math.DEG2RAD*b*.5),p,m;g.elements[12]=-.032;f.elements[12]=.032;p=-n*c+l;m=n*c+l;k.elements[0]=2*d/(m-p);k.elements[8]=(m+p)/(m-p);this.cameraL.projectionMatrix.copy(k);\r\n\tp=-n*c-l;m=n*c-l;k.elements[0]=2*d/(m-p);k.elements[8]=(m+p)/(m-p);this.cameraR.projectionMatrix.copy(k)}this.cameraL.matrixWorld.copy(h.matrixWorld).multiply(g);this.cameraR.matrixWorld.copy(h.matrixWorld).multiply(f)}}()});THREE.Light=function(a,b){THREE.Object3D.call(this);this.type=\"Light\";this.color=new THREE.Color(a);this.intensity=void 0!==b?b:1;this.receiveShadow=void 0};\r\n\tTHREE.Light.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Light,copy:function(a){THREE.Object3D.prototype.copy.call(this,a);this.color.copy(a.color);this.intensity=a.intensity;return this},toJSON:function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(a.object.distance=this.distance);void 0!==\r\n\tthis.angle&&(a.object.angle=this.angle);void 0!==this.decay&&(a.object.decay=this.decay);void 0!==this.penumbra&&(a.object.penumbra=this.penumbra);return a}});THREE.LightShadow=function(a){this.camera=a;this.bias=0;this.radius=1;this.mapSize=new THREE.Vector2(512,512);this.map=null;this.matrix=new THREE.Matrix4};Object.assign(THREE.LightShadow.prototype,{copy:function(a){this.camera=a.camera.clone();this.bias=a.bias;this.radius=a.radius;this.mapSize.copy(a.mapSize);return this},clone:function(){return(new this.constructor).copy(this)}});\r\n\tTHREE.AmbientLight=function(a,b){THREE.Light.call(this,a,b);this.type=\"AmbientLight\";this.castShadow=void 0};THREE.AmbientLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.AmbientLight});THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a,b);this.type=\"DirectionalLight\";this.position.set(0,1,0);this.updateMatrix();this.target=new THREE.Object3D;this.shadow=new THREE.DirectionalLightShadow};\r\n\tTHREE.DirectionalLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.DirectionalLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});THREE.DirectionalLightShadow=function(a){THREE.LightShadow.call(this,new THREE.OrthographicCamera(-5,5,5,-5,.5,500))};THREE.DirectionalLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.DirectionalLightShadow});\r\n\tTHREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a,c);this.type=\"HemisphereLight\";this.castShadow=void 0;this.position.set(0,1,0);this.updateMatrix();this.groundColor=new THREE.Color(b)};THREE.HemisphereLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.HemisphereLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.groundColor.copy(a.groundColor);return this}});\r\n\tTHREE.PointLight=function(a,b,c,d){THREE.Light.call(this,a,b);this.type=\"PointLight\";Object.defineProperty(this,\"power\",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=a/(4*Math.PI)}});this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1;this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(90,1,.5,500))};\r\n\tTHREE.PointLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.PointLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.distance=a.distance;this.decay=a.decay;this.shadow=a.shadow.clone();return this}});\r\n\tTHREE.SpotLight=function(a,b,c,d,e,f){THREE.Light.call(this,a,b);this.type=\"SpotLight\";this.position.set(0,1,0);this.updateMatrix();this.target=new THREE.Object3D;Object.defineProperty(this,\"power\",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}});this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.penumbra=void 0!==e?e:0;this.decay=void 0!==f?f:1;this.shadow=new THREE.SpotLightShadow};\r\n\tTHREE.SpotLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.SpotLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.distance=a.distance;this.angle=a.angle;this.penumbra=a.penumbra;this.decay=a.decay;this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});THREE.SpotLightShadow=function(){THREE.LightShadow.call(this,new THREE.PerspectiveCamera(50,1,.5,500))};\r\n\tTHREE.SpotLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.SpotLightShadow,update:function(a){var b=2*THREE.Math.RAD2DEG*a.angle,c=this.mapSize.width/this.mapSize.height;a=a.distance||500;var d=this.camera;if(b!==d.fov||c!==d.aspect||a!==d.far)d.fov=b,d.aspect=c,d.far=a,d.updateProjectionMatrix()}});THREE.AudioLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\n\tTHREE.AudioLoader.prototype={constructor:THREE.AudioLoader,load:function(a,b,c,d){var e=new THREE.XHRLoader(this.manager);e.setResponseType(\"arraybuffer\");e.load(a,function(a){THREE.AudioContext.decodeAudioData(a,function(a){b(a)})},c,d)}};THREE.Cache={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};\r\n\tTHREE.Loader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};\r\n\tTHREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,extractUrlBase:function(a){a=a.split(\"/\");if(1===a.length)return\"./\";a.pop();return a.join(\"/\")+\"/\"},initMaterials:function(a,b,c){for(var d=[],e=0;e<a.length;++e)d[e]=this.createMaterial(a[e],b,c);return d},createMaterial:function(){var a,b,c;return function(d,e,f){function g(a,c,d,g,k){a=e+a;var l=THREE.Loader.Handlers.get(a);null!==l?a=l.load(a):(b.setCrossOrigin(f),a=b.load(a));void 0!==c&&(a.repeat.fromArray(c),1!==c[0]&&(a.wrapS=\r\n\tTHREE.RepeatWrapping),1!==c[1]&&(a.wrapT=THREE.RepeatWrapping));void 0!==d&&a.offset.fromArray(d);void 0!==g&&(\"repeat\"===g[0]&&(a.wrapS=THREE.RepeatWrapping),\"mirror\"===g[0]&&(a.wrapS=THREE.MirroredRepeatWrapping),\"repeat\"===g[1]&&(a.wrapT=THREE.RepeatWrapping),\"mirror\"===g[1]&&(a.wrapT=THREE.MirroredRepeatWrapping));void 0!==k&&(a.anisotropy=k);c=THREE.Math.generateUUID();h[c]=a;return c}void 0===a&&(a=new THREE.Color);void 0===b&&(b=new THREE.TextureLoader);void 0===c&&(c=new THREE.MaterialLoader);\r\n\tvar h={},k={uuid:THREE.Math.generateUUID(),type:\"MeshLambertMaterial\"},l;for(l in d){var n=d[l];switch(l){case \"DbgColor\":case \"DbgIndex\":case \"opticalDensity\":case \"illumination\":break;case \"DbgName\":k.name=n;break;case \"blending\":k.blending=THREE[n];break;case \"colorAmbient\":case \"mapAmbient\":console.warn(\"THREE.Loader.createMaterial:\",l,\"is no longer supported.\");break;case \"colorDiffuse\":k.color=a.fromArray(n).getHex();break;case \"colorSpecular\":k.specular=a.fromArray(n).getHex();break;case \"colorEmissive\":k.emissive=\r\n\ta.fromArray(n).getHex();break;case \"specularCoef\":k.shininess=n;break;case \"shading\":\"basic\"===n.toLowerCase()&&(k.type=\"MeshBasicMaterial\");\"phong\"===n.toLowerCase()&&(k.type=\"MeshPhongMaterial\");break;case \"mapDiffuse\":k.map=g(n,d.mapDiffuseRepeat,d.mapDiffuseOffset,d.mapDiffuseWrap,d.mapDiffuseAnisotropy);break;case \"mapDiffuseRepeat\":case \"mapDiffuseOffset\":case \"mapDiffuseWrap\":case \"mapDiffuseAnisotropy\":break;case \"mapLight\":k.lightMap=g(n,d.mapLightRepeat,d.mapLightOffset,d.mapLightWrap,d.mapLightAnisotropy);\r\n\tbreak;case \"mapLightRepeat\":case \"mapLightOffset\":case \"mapLightWrap\":case \"mapLightAnisotropy\":break;case \"mapAO\":k.aoMap=g(n,d.mapAORepeat,d.mapAOOffset,d.mapAOWrap,d.mapAOAnisotropy);break;case \"mapAORepeat\":case \"mapAOOffset\":case \"mapAOWrap\":case \"mapAOAnisotropy\":break;case \"mapBump\":k.bumpMap=g(n,d.mapBumpRepeat,d.mapBumpOffset,d.mapBumpWrap,d.mapBumpAnisotropy);break;case \"mapBumpScale\":k.bumpScale=n;break;case \"mapBumpRepeat\":case \"mapBumpOffset\":case \"mapBumpWrap\":case \"mapBumpAnisotropy\":break;\r\n\tcase \"mapNormal\":k.normalMap=g(n,d.mapNormalRepeat,d.mapNormalOffset,d.mapNormalWrap,d.mapNormalAnisotropy);break;case \"mapNormalFactor\":k.normalScale=[n,n];break;case \"mapNormalRepeat\":case \"mapNormalOffset\":case \"mapNormalWrap\":case \"mapNormalAnisotropy\":break;case \"mapSpecular\":k.specularMap=g(n,d.mapSpecularRepeat,d.mapSpecularOffset,d.mapSpecularWrap,d.mapSpecularAnisotropy);break;case \"mapSpecularRepeat\":case \"mapSpecularOffset\":case \"mapSpecularWrap\":case \"mapSpecularAnisotropy\":break;case \"mapAlpha\":k.alphaMap=\r\n\tg(n,d.mapAlphaRepeat,d.mapAlphaOffset,d.mapAlphaWrap,d.mapAlphaAnisotropy);break;case \"mapAlphaRepeat\":case \"mapAlphaOffset\":case \"mapAlphaWrap\":case \"mapAlphaAnisotropy\":break;case \"flipSided\":k.side=THREE.BackSide;break;case \"doubleSided\":k.side=THREE.DoubleSide;break;case \"transparency\":console.warn(\"THREE.Loader.createMaterial: transparency has been renamed to opacity\");k.opacity=n;break;case \"depthTest\":case \"depthWrite\":case \"colorWrite\":case \"opacity\":case \"reflectivity\":case \"transparent\":case \"visible\":case \"wireframe\":k[l]=\r\n\tn;break;case \"vertexColors\":!0===n&&(k.vertexColors=THREE.VertexColors);\"face\"===n&&(k.vertexColors=THREE.FaceColors);break;default:console.error(\"THREE.Loader.createMaterial: Unsupported\",l,n)}}\"MeshBasicMaterial\"===k.type&&delete k.emissive;\"MeshPhongMaterial\"!==k.type&&delete k.specular;1>k.opacity&&(k.transparent=!0);c.setTextures(h);return c.parse(k)}}()};\r\n\tTHREE.Loader.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,b)},get:function(a){for(var b=this.handlers,c=0,d=b.length;c<d;c+=2){var e=b[c+1];if(b[c].test(a))return e}return null}};THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\n\tTHREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){void 0!==this.path&&(a=this.path+a);var e=this,f=THREE.Cache.get(a);if(void 0!==f)return b&&setTimeout(function(){b(f)},0),f;var g=new XMLHttpRequest;g.overrideMimeType(\"text/plain\");g.open(\"GET\",a,!0);g.addEventListener(\"load\",function(c){var f=c.target.response;THREE.Cache.add(a,f);200===this.status?(b&&b(f),e.manager.itemEnd(a)):0===this.status?(console.warn(\"THREE.XHRLoader: HTTP Status 0 received.\"),b&&b(f),e.manager.itemEnd(a)):\r\n\t(d&&d(c),e.manager.itemError(a))},!1);void 0!==c&&g.addEventListener(\"progress\",function(a){c(a)},!1);g.addEventListener(\"error\",function(b){d&&d(b);e.manager.itemError(a)},!1);void 0!==this.responseType&&(g.responseType=this.responseType);void 0!==this.withCredentials&&(g.withCredentials=this.withCredentials);g.send(null);e.manager.itemStart(a);return g},setPath:function(a){this.path=a},setResponseType:function(a){this.responseType=a},setWithCredentials:function(a){this.withCredentials=a}};\r\n\tTHREE.FontLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.FontLoader.prototype={constructor:THREE.FontLoader,load:function(a,b,c,d){var e=this;(new THREE.XHRLoader(this.manager)).load(a,function(a){var c;try{c=JSON.parse(a)}catch(d){console.warn(\"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"),c=JSON.parse(a.substring(65,a.length-2))}a=e.parse(c);b&&b(a)},c,d)},parse:function(a){return new THREE.Font(a)}};\r\n\tTHREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\n\tTHREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){void 0!==this.path&&(a=this.path+a);var e=this,f=THREE.Cache.get(a);if(void 0!==f)return e.manager.itemStart(a),b?setTimeout(function(){b(f);e.manager.itemEnd(a)},0):e.manager.itemEnd(a),f;var g=document.createElement(\"img\");g.addEventListener(\"load\",function(c){THREE.Cache.add(a,this);b&&b(this);e.manager.itemEnd(a)},!1);void 0!==c&&g.addEventListener(\"progress\",function(a){c(a)},!1);g.addEventListener(\"error\",function(b){d&&\r\n\td(b);e.manager.itemError(a)},!1);void 0!==this.crossOrigin&&(g.crossOrigin=this.crossOrigin);e.manager.itemStart(a);g.src=a;return g},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}};THREE.JSONLoader=function(a){\"boolean\"===typeof a&&(console.warn(\"THREE.JSONLoader: showStatus parameter has been removed from constructor.\"),a=void 0);this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.withCredentials=!1};\r\n\tTHREE.JSONLoader.prototype={constructor:THREE.JSONLoader,get statusDomElement(){void 0===this._statusDomElement&&(this._statusDomElement=document.createElement(\"div\"));console.warn(\"THREE.JSONLoader: .statusDomElement has been removed.\");return this._statusDomElement},load:function(a,b,c,d){var e=this,f=this.texturePath&&\"string\"===typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(a),g=new THREE.XHRLoader(this.manager);g.setWithCredentials(this.withCredentials);g.load(a,\r\n\tfunction(c){c=JSON.parse(c);var d=c.metadata;if(void 0!==d&&(d=d.type,void 0!==d)){if(\"object\"===d.toLowerCase()){console.error(\"THREE.JSONLoader: \"+a+\" should be loaded with THREE.ObjectLoader instead.\");return}if(\"scene\"===d.toLowerCase()){console.error(\"THREE.JSONLoader: \"+a+\" should be loaded with THREE.SceneLoader instead.\");return}}c=e.parse(c,f);b(c.geometry,c.materials)},c,d)},setTexturePath:function(a){this.texturePath=a},parse:function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/\r\n\ta.scale:1;(function(b){var d,g,h,k,l,n,p,m,q,r,s,u,x,v=a.faces;n=a.vertices;var C=a.normals,w=a.colors,D=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&D++;for(d=0;d<D;d++)c.faceVertexUvs[d]=[]}k=0;for(l=n.length;k<l;)d=new THREE.Vector3,d.x=n[k++]*b,d.y=n[k++]*b,d.z=n[k++]*b,c.vertices.push(d);k=0;for(l=v.length;k<l;)if(b=v[k++],q=b&1,h=b&2,d=b&8,p=b&16,r=b&32,n=b&64,b&=128,q){q=new THREE.Face3;q.a=v[k];q.b=v[k+1];q.c=v[k+3];s=new THREE.Face3;s.a=v[k+1];s.b=v[k+2];s.c=v[k+3];k+=\r\n\t4;h&&(h=v[k++],q.materialIndex=h,s.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<D;d++)for(u=a.uvs[d],c.faceVertexUvs[d][h]=[],c.faceVertexUvs[d][h+1]=[],g=0;4>g;g++)m=v[k++],x=u[2*m],m=u[2*m+1],x=new THREE.Vector2(x,m),2!==g&&c.faceVertexUvs[d][h].push(x),0!==g&&c.faceVertexUvs[d][h+1].push(x);p&&(p=3*v[k++],q.normal.set(C[p++],C[p++],C[p]),s.normal.copy(q.normal));if(r)for(d=0;4>d;d++)p=3*v[k++],r=new THREE.Vector3(C[p++],C[p++],C[p]),2!==d&&q.vertexNormals.push(r),0!==d&&s.vertexNormals.push(r);\r\n\tn&&(n=v[k++],n=w[n],q.color.setHex(n),s.color.setHex(n));if(b)for(d=0;4>d;d++)n=v[k++],n=w[n],2!==d&&q.vertexColors.push(new THREE.Color(n)),0!==d&&s.vertexColors.push(new THREE.Color(n));c.faces.push(q);c.faces.push(s)}else{q=new THREE.Face3;q.a=v[k++];q.b=v[k++];q.c=v[k++];h&&(h=v[k++],q.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<D;d++)for(u=a.uvs[d],c.faceVertexUvs[d][h]=[],g=0;3>g;g++)m=v[k++],x=u[2*m],m=u[2*m+1],x=new THREE.Vector2(x,m),c.faceVertexUvs[d][h].push(x);p&&(p=3*v[k++],q.normal.set(C[p++],\r\n\tC[p++],C[p]));if(r)for(d=0;3>d;d++)p=3*v[k++],r=new THREE.Vector3(C[p++],C[p++],C[p]),q.vertexNormals.push(r);n&&(n=v[k++],q.color.setHex(w[n]));if(b)for(d=0;3>d;d++)n=v[k++],q.vertexColors.push(new THREE.Color(w[n]));c.faces.push(q)}})(d);(function(){var b=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,g=a.skinWeights.length;d<g;d+=b)c.skinWeights.push(new THREE.Vector4(a.skinWeights[d],1<b?a.skinWeights[d+1]:0,2<b?a.skinWeights[d+2]:0,3<b?a.skinWeights[d+3]:\r\n\t0));if(a.skinIndices)for(d=0,g=a.skinIndices.length;d<g;d+=b)c.skinIndices.push(new THREE.Vector4(a.skinIndices[d],1<b?a.skinIndices[d+1]:0,2<b?a.skinIndices[d+2]:0,3<b?a.skinIndices[d+3]:0));c.bones=a.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&console.warn(\"When skinning, number of vertices (\"+c.vertices.length+\"), skinIndices (\"+c.skinIndices.length+\"), and skinWeights (\"+c.skinWeights.length+\") should match.\")})();(function(b){if(void 0!==\r\n\ta.morphTargets)for(var d=0,g=a.morphTargets.length;d<g;d++){c.morphTargets[d]={};c.morphTargets[d].name=a.morphTargets[d].name;c.morphTargets[d].vertices=[];for(var h=c.morphTargets[d].vertices,k=a.morphTargets[d].vertices,l=0,n=k.length;l<n;l+=3){var p=new THREE.Vector3;p.x=k[l]*b;p.y=k[l+1]*b;p.z=k[l+2]*b;h.push(p)}}if(void 0!==a.morphColors&&0<a.morphColors.length)for(console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.'),b=c.faces,h=a.morphColors[0].colors,\r\n\td=0,g=b.length;d<g;d++)b[d].color.fromArray(h,3*d)})(d);(function(){var b=[],d=[];void 0!==a.animation&&d.push(a.animation);void 0!==a.animations&&(a.animations.length?d=d.concat(a.animations):d.push(a.animations));for(var g=0;g<d.length;g++){var h=THREE.AnimationClip.parseAnimation(d[g],c.bones);h&&b.push(h)}c.morphTargets&&(d=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(c.morphTargets,10),b=b.concat(d));0<b.length&&(c.animations=b)})();c.computeFaceNormals();c.computeBoundingSphere();\r\n\tif(void 0===a.materials||0===a.materials.length)return{geometry:c};d=THREE.Loader.prototype.initMaterials(a.materials,b,this.crossOrigin);return{geometry:c,materials:d}}};\r\n\tTHREE.LoadingManager=function(a,b,c){var d=this,e=!1,f=0,g=0;this.onStart=void 0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){g++;if(!1===e&&void 0!==d.onStart)d.onStart(a,f,g);e=!0};this.itemEnd=function(a){f++;if(void 0!==d.onProgress)d.onProgress(a,f,g);if(f===g&&(e=!1,void 0!==d.onLoad))d.onLoad()};this.itemError=function(a){if(void 0!==d.onError)d.onError(a)}};THREE.DefaultLoadingManager=new THREE.LoadingManager;\r\n\tTHREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\n\tTHREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this;(new THREE.XHRLoader(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){var b=new THREE.BufferGeometry,c=a.data.index,d={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};void 0!==c&&(c=\r\n\tnew d[c.type](c.array),b.setIndex(new THREE.BufferAttribute(c,1)));var e=a.data.attributes,f;for(f in e){var g=e[f],c=new d[g.type](g.array);b.addAttribute(f,new THREE.BufferAttribute(c,g.itemSize,g.normalized))}d=a.data.groups||a.data.drawcalls||a.data.offsets;if(void 0!==d)for(f=0,c=d.length;f!==c;++f)e=d[f],b.addGroup(e.start,e.count,e.materialIndex);a=a.data.boundingSphere;void 0!==a&&(d=new THREE.Vector3,void 0!==a.center&&d.fromArray(a.center),b.boundingSphere=new THREE.Sphere(d,a.radius));\r\n\treturn b}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.textures={}};\r\n\tTHREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this;(new THREE.XHRLoader(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setTextures:function(a){this.textures=a},getTexture:function(a){var b=this.textures;void 0===b[a]&&console.warn(\"THREE.MaterialLoader: Undefined texture\",a);return b[a]},parse:function(a){var b=new THREE[a.type];void 0!==a.uuid&&(b.uuid=a.uuid);void 0!==a.name&&(b.name=a.name);void 0!==a.color&&b.color.setHex(a.color);\r\n\tvoid 0!==a.roughness&&(b.roughness=a.roughness);void 0!==a.metalness&&(b.metalness=a.metalness);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&(b.shininess=a.shininess);void 0!==a.uniforms&&(b.uniforms=a.uniforms);void 0!==a.vertexShader&&(b.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(b.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.shading&&(b.shading=a.shading);\r\n\tvoid 0!==a.blending&&(b.blending=a.blending);void 0!==a.side&&(b.side=a.side);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.alphaTest&&(b.alphaTest=a.alphaTest);void 0!==a.depthTest&&(b.depthTest=a.depthTest);void 0!==a.depthWrite&&(b.depthWrite=a.depthWrite);void 0!==a.colorWrite&&(b.colorWrite=a.colorWrite);void 0!==a.wireframe&&(b.wireframe=a.wireframe);void 0!==a.wireframeLinewidth&&(b.wireframeLinewidth=a.wireframeLinewidth);void 0!==\r\n\ta.size&&(b.size=a.size);void 0!==a.sizeAttenuation&&(b.sizeAttenuation=a.sizeAttenuation);void 0!==a.map&&(b.map=this.getTexture(a.map));void 0!==a.alphaMap&&(b.alphaMap=this.getTexture(a.alphaMap),b.transparent=!0);void 0!==a.bumpMap&&(b.bumpMap=this.getTexture(a.bumpMap));void 0!==a.bumpScale&&(b.bumpScale=a.bumpScale);void 0!==a.normalMap&&(b.normalMap=this.getTexture(a.normalMap));if(void 0!==a.normalScale){var c=a.normalScale;!1===Array.isArray(c)&&(c=[c,c]);b.normalScale=(new THREE.Vector2).fromArray(c)}void 0!==\r\n\ta.displacementMap&&(b.displacementMap=this.getTexture(a.displacementMap));void 0!==a.displacementScale&&(b.displacementScale=a.displacementScale);void 0!==a.displacementBias&&(b.displacementBias=a.displacementBias);void 0!==a.roughnessMap&&(b.roughnessMap=this.getTexture(a.roughnessMap));void 0!==a.metalnessMap&&(b.metalnessMap=this.getTexture(a.metalnessMap));void 0!==a.emissiveMap&&(b.emissiveMap=this.getTexture(a.emissiveMap));void 0!==a.emissiveIntensity&&(b.emissiveIntensity=a.emissiveIntensity);\r\n\tvoid 0!==a.specularMap&&(b.specularMap=this.getTexture(a.specularMap));void 0!==a.envMap&&(b.envMap=this.getTexture(a.envMap),b.combine=THREE.MultiplyOperation);a.reflectivity&&(b.reflectivity=a.reflectivity);void 0!==a.lightMap&&(b.lightMap=this.getTexture(a.lightMap));void 0!==a.lightMapIntensity&&(b.lightMapIntensity=a.lightMapIntensity);void 0!==a.aoMap&&(b.aoMap=this.getTexture(a.aoMap));void 0!==a.aoMapIntensity&&(b.aoMapIntensity=a.aoMapIntensity);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<\r\n\td;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.texturePath=\"\"};\r\n\tTHREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){\"\"===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf(\"/\")+1));var e=this;(new THREE.XHRLoader(e.manager)).load(a,function(a){e.parse(JSON.parse(a),b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==b&&b(e)}),d=this.parseTextures(a.textures,\r\n\td),d=this.parseMaterials(a.materials,d),e=this.parseObject(a.object,c,d);a.animations&&(e.animations=this.parseAnimations(a.animations));void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case \"PlaneGeometry\":case \"PlaneBufferGeometry\":g=new THREE[h.type](h.width,h.height,h.widthSegments,h.heightSegments);break;case \"BoxGeometry\":case \"BoxBufferGeometry\":case \"CubeGeometry\":g=\r\n\tnew THREE[h.type](h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case \"CircleGeometry\":case \"CircleBufferGeometry\":g=new THREE[h.type](h.radius,h.segments,h.thetaStart,h.thetaLength);break;case \"CylinderGeometry\":case \"CylinderBufferGeometry\":g=new THREE[h.type](h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case \"ConeGeometry\":case \"ConeBufferGeometry\":g=new THREE[h.type](h.radius,h.height,h.radialSegments,\r\n\th.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case \"SphereGeometry\":case \"SphereBufferGeometry\":g=new THREE[h.type](h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case \"DodecahedronGeometry\":case \"IcosahedronGeometry\":case \"OctahedronGeometry\":case \"TetrahedronGeometry\":g=new THREE[h.type](h.radius,h.detail);break;case \"RingGeometry\":case \"RingBufferGeometry\":g=new THREE[h.type](h.innerRadius,h.outerRadius,h.thetaSegments,h.phiSegments,\r\n\th.thetaStart,h.thetaLength);break;case \"TorusGeometry\":case \"TorusBufferGeometry\":g=new THREE[h.type](h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case \"TorusKnotGeometry\":case \"TorusKnotBufferGeometry\":g=new THREE[h.type](h.radius,h.tube,h.tubularSegments,h.radialSegments,h.p,h.q);break;case \"LatheGeometry\":case \"LatheBufferGeometry\":g=new THREE[h.type](h.points,h.segments,h.phiStart,h.phiLength);break;case \"BufferGeometry\":g=d.parse(h);break;case \"Geometry\":g=c.parse(h.data,this.texturePath).geometry;\r\n\tbreak;default:console.warn('THREE.ObjectLoader: Unsupported geometry type \"'+h.type+'\"');continue}g.uuid=h.uuid;void 0!==h.name&&(g.name=h.name);b[h.uuid]=g}return b},parseMaterials:function(a,b){var c={};if(void 0!==a){var d=new THREE.MaterialLoader;d.setTextures(b);for(var e=0,f=a.length;e<f;e++){var g=d.parse(a[e]);c[g.uuid]=g}}return c},parseAnimations:function(a){for(var b=[],c=0;c<a.length;c++){var d=THREE.AnimationClip.parse(a[c]);b.push(d)}return b},parseImages:function(a,b){function c(a){d.manager.itemStart(a);\r\n\treturn g.load(a,function(){d.manager.itemEnd(a)})}var d=this,e={};if(void 0!==a&&0<a.length){var f=new THREE.LoadingManager(b),g=new THREE.ImageLoader(f);g.setCrossOrigin(this.crossOrigin);for(var f=0,h=a.length;f<h;f++){var k=a[f],l=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(k.url)?k.url:d.texturePath+k.url;e[k.uuid]=c(l)}}return e},parseTextures:function(a,b){function c(a){if(\"number\"===typeof a)return a;console.warn(\"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",a);return THREE[a]}\r\n\tvar d={};if(void 0!==a)for(var e=0,f=a.length;e<f;e++){var g=a[e];void 0===g.image&&console.warn('THREE.ObjectLoader: No \"image\" specified for',g.uuid);void 0===b[g.image]&&console.warn(\"THREE.ObjectLoader: Undefined image\",g.image);var h=new THREE.Texture(b[g.image]);h.needsUpdate=!0;h.uuid=g.uuid;void 0!==g.name&&(h.name=g.name);void 0!==g.mapping&&(h.mapping=c(g.mapping));void 0!==g.offset&&(h.offset=new THREE.Vector2(g.offset[0],g.offset[1]));void 0!==g.repeat&&(h.repeat=new THREE.Vector2(g.repeat[0],\r\n\tg.repeat[1]));void 0!==g.minFilter&&(h.minFilter=c(g.minFilter));void 0!==g.magFilter&&(h.magFilter=c(g.magFilter));void 0!==g.anisotropy&&(h.anisotropy=g.anisotropy);Array.isArray(g.wrap)&&(h.wrapS=c(g.wrap[0]),h.wrapT=c(g.wrap[1]));d[g.uuid]=h}return d},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){function e(a){void 0===c[a]&&console.warn(\"THREE.ObjectLoader: Undefined geometry\",a);return c[a]}function f(a){if(void 0!==a)return void 0===d[a]&&console.warn(\"THREE.ObjectLoader: Undefined material\",\r\n\ta),d[a]}var g;switch(b.type){case \"Scene\":g=new THREE.Scene;break;case \"PerspectiveCamera\":g=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);void 0!==b.focus&&(g.focus=b.focus);void 0!==b.zoom&&(g.zoom=b.zoom);void 0!==b.filmGauge&&(g.filmGauge=b.filmGauge);void 0!==b.filmOffset&&(g.filmOffset=b.filmOffset);void 0!==b.view&&(g.view=Object.assign({},b.view));break;case \"OrthographicCamera\":g=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case \"AmbientLight\":g=\r\n\tnew THREE.AmbientLight(b.color,b.intensity);break;case \"DirectionalLight\":g=new THREE.DirectionalLight(b.color,b.intensity);break;case \"PointLight\":g=new THREE.PointLight(b.color,b.intensity,b.distance,b.decay);break;case \"SpotLight\":g=new THREE.SpotLight(b.color,b.intensity,b.distance,b.angle,b.penumbra,b.decay);break;case \"HemisphereLight\":g=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case \"Mesh\":g=e(b.geometry);var h=f(b.material);g=g.bones&&0<g.bones.length?new THREE.SkinnedMesh(g,\r\n\th):new THREE.Mesh(g,h);break;case \"LOD\":g=new THREE.LOD;break;case \"Line\":g=new THREE.Line(e(b.geometry),f(b.material),b.mode);break;case \"PointCloud\":case \"Points\":g=new THREE.Points(e(b.geometry),f(b.material));break;case \"Sprite\":g=new THREE.Sprite(f(b.material));break;case \"Group\":g=new THREE.Group;break;default:g=new THREE.Object3D}g.uuid=b.uuid;void 0!==b.name&&(g.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(g.position,g.quaternion,g.scale)):(void 0!==b.position&&g.position.fromArray(b.position),\r\n\tvoid 0!==b.rotation&&g.rotation.fromArray(b.rotation),void 0!==b.scale&&g.scale.fromArray(b.scale));void 0!==b.castShadow&&(g.castShadow=b.castShadow);void 0!==b.receiveShadow&&(g.receiveShadow=b.receiveShadow);void 0!==b.visible&&(g.visible=b.visible);void 0!==b.userData&&(g.userData=b.userData);if(void 0!==b.children)for(var k in b.children)g.add(this.parseObject(b.children[k],c,d));if(\"LOD\"===b.type)for(b=b.levels,h=0;h<b.length;h++){var l=b[h];k=g.getObjectByProperty(\"uuid\",l.object);void 0!==\r\n\tk&&g.addLevel(k,l.distance)}return g}}()};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){var e=new THREE.Texture,f=new THREE.ImageLoader(this.manager);f.setCrossOrigin(this.crossOrigin);f.setPath(this.path);f.load(a,function(a){e.image=a;e.needsUpdate=!0;void 0!==b&&b(e)},c,d);return e},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}};\r\n\tTHREE.CubeTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\n\tTHREE.CubeTextureLoader.prototype={constructor:THREE.CubeTextureLoader,load:function(a,b,c,d){function e(c){g.load(a[c],function(a){f.images[c]=a;h++;6===h&&(f.needsUpdate=!0,b&&b(f))},void 0,d)}var f=new THREE.CubeTexture,g=new THREE.ImageLoader(this.manager);g.setCrossOrigin(this.crossOrigin);g.setPath(this.path);var h=0;for(c=0;c<a.length;++c)e(c);return f},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}};\r\n\tTHREE.DataTextureLoader=THREE.BinaryTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this._parser=null};\r\n\tTHREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(a,b,c,d){var e=this,f=new THREE.DataTexture,g=new THREE.XHRLoader(this.manager);g.setResponseType(\"arraybuffer\");g.load(a,function(a){if(a=e._parser(a))void 0!==a.image?f.image=a.image:void 0!==a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:THREE.ClampToEdgeWrapping,f.wrapT=void 0!==a.wrapT?a.wrapT:THREE.ClampToEdgeWrapping,f.magFilter=void 0!==a.magFilter?\r\n\ta.magFilter:THREE.LinearFilter,f.minFilter=void 0!==a.minFilter?a.minFilter:THREE.LinearMipMapLinearFilter,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}};THREE.CompressedTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this._parser=null};\r\n\tTHREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(a,b,c,d){function e(e){k.load(a[e],function(a){a=f._parser(a,!0);g[e]={width:a.width,height:a.height,format:a.format,mipmaps:a.mipmaps};l+=1;6===l&&(1===a.mipmapCount&&(h.minFilter=THREE.LinearFilter),h.format=a.format,h.needsUpdate=!0,b&&b(h))},c,d)}var f=this,g=[],h=new THREE.CompressedTexture;h.image=g;var k=new THREE.XHRLoader(this.manager);k.setPath(this.path);k.setResponseType(\"arraybuffer\");if(Array.isArray(a))for(var l=\r\n\t0,n=0,p=a.length;n<p;++n)e(n);else k.load(a,function(a){a=f._parser(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,d=0;d<c;d++){g[d]={mipmaps:[]};for(var e=0;e<a.mipmapCount;e++)g[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+e]),g[d].format=a.format,g[d].width=a.width,g[d].height=a.height}else h.image.width=a.width,h.image.height=a.height,h.mipmaps=a.mipmaps;1===a.mipmapCount&&(h.minFilter=THREE.LinearFilter);h.format=a.format;h.needsUpdate=!0;b&&b(h)},c,d);return h},setPath:function(a){this.path=\r\n\ta}};\r\n\tTHREE.Material=function(){Object.defineProperty(this,\"id\",{value:THREE.MaterialIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"Material\";this.lights=this.fog=!0;this.blending=THREE.NormalBlending;this.side=THREE.FrontSide;this.shading=THREE.SmoothShading;this.vertexColors=THREE.NoColors;this.opacity=1;this.transparent=!1;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=\r\n\tnull;this.depthFunc=THREE.LessEqualDepth;this.depthWrite=this.depthTest=!0;this.clippingPlanes=null;this.clipShadows=!1;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.premultipliedAlpha=!1;this.overdraw=0;this._needsUpdate=this.visible=!0};\r\n\tTHREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn(\"THREE.Material: '\"+b+\"' parameter is undefined.\");else{var d=this[b];void 0===d?console.warn(\"THREE.\"+this.type+\": '\"+b+\"' is not a property of this material.\"):d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):\r\n\tthis[b]=\"overdraw\"===b?Number(c):c}}},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var c=void 0===a;c&&(a={textures:{},images:{}});var d={metadata:{version:4.4,type:\"Material\",generator:\"Material.toJSON\"}};d.uuid=this.uuid;d.type=this.type;\"\"!==this.name&&(d.name=this.name);this.color instanceof THREE.Color&&(d.color=this.color.getHex());.5!==this.roughness&&(d.roughness=this.roughness);.5!==this.metalness&&(d.metalness=this.metalness);this.emissive instanceof\r\n\tTHREE.Color&&(d.emissive=this.emissive.getHex());this.specular instanceof THREE.Color&&(d.specular=this.specular.getHex());void 0!==this.shininess&&(d.shininess=this.shininess);this.map instanceof THREE.Texture&&(d.map=this.map.toJSON(a).uuid);this.alphaMap instanceof THREE.Texture&&(d.alphaMap=this.alphaMap.toJSON(a).uuid);this.lightMap instanceof THREE.Texture&&(d.lightMap=this.lightMap.toJSON(a).uuid);this.bumpMap instanceof THREE.Texture&&(d.bumpMap=this.bumpMap.toJSON(a).uuid,d.bumpScale=this.bumpScale);\r\n\tthis.normalMap instanceof THREE.Texture&&(d.normalMap=this.normalMap.toJSON(a).uuid,d.normalScale=this.normalScale.toArray());this.displacementMap instanceof THREE.Texture&&(d.displacementMap=this.displacementMap.toJSON(a).uuid,d.displacementScale=this.displacementScale,d.displacementBias=this.displacementBias);this.roughnessMap instanceof THREE.Texture&&(d.roughnessMap=this.roughnessMap.toJSON(a).uuid);this.metalnessMap instanceof THREE.Texture&&(d.metalnessMap=this.metalnessMap.toJSON(a).uuid);\r\n\tthis.emissiveMap instanceof THREE.Texture&&(d.emissiveMap=this.emissiveMap.toJSON(a).uuid);this.specularMap instanceof THREE.Texture&&(d.specularMap=this.specularMap.toJSON(a).uuid);this.envMap instanceof THREE.Texture&&(d.envMap=this.envMap.toJSON(a).uuid,d.reflectivity=this.reflectivity);void 0!==this.size&&(d.size=this.size);void 0!==this.sizeAttenuation&&(d.sizeAttenuation=this.sizeAttenuation);this.blending!==THREE.NormalBlending&&(d.blending=this.blending);this.shading!==THREE.SmoothShading&&\r\n\t(d.shading=this.shading);this.side!==THREE.FrontSide&&(d.side=this.side);this.vertexColors!==THREE.NoColors&&(d.vertexColors=this.vertexColors);1>this.opacity&&(d.opacity=this.opacity);!0===this.transparent&&(d.transparent=this.transparent);0<this.alphaTest&&(d.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(d.wireframe=this.wireframe);1<this.wireframeLinewidth&&(d.wireframeLinewidth=this.wireframeLinewidth);c&&(c=b(a.textures),\r\n\ta=b(a.images),0<c.length&&(d.textures=c),0<a.length&&(d.images=a));return d},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name;this.fog=a.fog;this.lights=a.lights;this.blending=a.blending;this.side=a.side;this.vertexColors=a.vertexColors;this.opacity=a.opacity;this.transparent=a.transparent;this.blendSrc=a.blendSrc;this.blendDst=a.blendDst;this.blendEquation=a.blendEquation;this.blendSrcAlpha=a.blendSrcAlpha;this.blendDstAlpha=a.blendDstAlpha;this.blendEquationAlpha=\r\n\ta.blendEquationAlpha;this.depthFunc=a.depthFunc;this.depthTest=a.depthTest;this.depthWrite=a.depthWrite;this.colorWrite=a.colorWrite;this.precision=a.precision;this.polygonOffset=a.polygonOffset;this.polygonOffsetFactor=a.polygonOffsetFactor;this.polygonOffsetUnits=a.polygonOffsetUnits;this.alphaTest=a.alphaTest;this.premultipliedAlpha=a.premultipliedAlpha;this.overdraw=a.overdraw;this.visible=a.visible;this.clipShadows=a.clipShadows;a=a.clippingPlanes;var b=null;if(null!==a)for(var c=a.length,b=\r\n\tArray(c),d=0;d!==c;++d)b[d]=a[d].clone();this.clippingPlanes=b;return this},update:function(){this.dispatchEvent({type:\"update\"})},dispose:function(){this.dispatchEvent({type:\"dispose\"})}};Object.assign(THREE.Material.prototype,THREE.EventDispatcher.prototype);THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.type=\"LineBasicMaterial\";this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap=\"round\";this.lights=!1;this.setValues(a)};\r\n\tTHREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;THREE.LineBasicMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.linewidth=a.linewidth;this.linecap=a.linecap;this.linejoin=a.linejoin;return this};\r\n\tTHREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.type=\"LineDashedMaterial\";this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.lights=!1;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial;\r\n\tTHREE.LineDashedMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.linewidth=a.linewidth;this.scale=a.scale;this.dashSize=a.dashSize;this.gapSize=a.gapSize;return this};\r\n\tTHREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.type=\"MeshBasicMaterial\";this.color=new THREE.Color(16777215);this.aoMap=this.map=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\"round\";this.lights=this.morphTargets=this.skinning=!1;this.setValues(a)};\r\n\tTHREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;\r\n\tTHREE.MeshBasicMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;\r\n\tthis.skinning=a.skinning;this.morphTargets=a.morphTargets;return this};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.type=\"MeshDepthMaterial\";this.depthPacking=THREE.BasicDepthPacking;this.morphTargets=this.skinning=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);\r\n\tTHREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;THREE.MeshDepthMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.depthPacking=a.depthPacking;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};\r\n\tTHREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.type=\"MeshLambertMaterial\";this.color=new THREE.Color(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\r\n\t\"round\";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial;\r\n\tTHREE.MeshLambertMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=\r\n\ta.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.type=\"MeshNormalMaterial\";this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=this.lights=this.fog=!1;this.setValues(a)};\r\n\tTHREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;THREE.MeshNormalMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};\r\n\tTHREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.type=\"MeshPhongMaterial\";this.color=new THREE.Color(16777215);this.specular=new THREE.Color(1118481);this.shininess=30;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=\r\n\t0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\"round\";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;\r\n\tTHREE.MeshPhongMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess=a.shininess;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);\r\n\tthis.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;\r\n\tthis.morphNormals=a.morphNormals;return this};\r\n\tTHREE.MeshStandardMaterial=function(a){THREE.Material.call(this);this.defines={STANDARD:\"\"};this.type=\"MeshStandardMaterial\";this.color=new THREE.Color(16777215);this.metalness=this.roughness=.5;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.displacementMap=null;this.displacementScale=\r\n\t1;this.displacementBias=0;this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\"round\";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshStandardMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshStandardMaterial.prototype.constructor=THREE.MeshStandardMaterial;\r\n\tTHREE.MeshStandardMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.defines={STANDARD:\"\"};this.color.copy(a.color);this.roughness=a.roughness;this.metalness=a.metalness;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=\r\n\ta.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.roughnessMap=a.roughnessMap;this.metalnessMap=a.metalnessMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.envMapIntensity=a.envMapIntensity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;\r\n\tthis.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};THREE.MeshPhysicalMaterial=function(a){THREE.MeshStandardMaterial.call(this);this.defines={PHYSICAL:\"\"};this.type=\"MeshPhysicalMaterial\";this.reflectivity=.5;this.setValues(a)};THREE.MeshPhysicalMaterial.prototype=Object.create(THREE.MeshStandardMaterial.prototype);THREE.MeshPhysicalMaterial.prototype.constructor=THREE.MeshPhysicalMaterial;\r\n\tTHREE.MeshPhysicalMaterial.prototype.copy=function(a){THREE.MeshStandardMaterial.prototype.copy.call(this,a);this.defines={PHYSICAL:\"\"};this.reflectivity=a.reflectivity;return this};THREE.MultiMaterial=function(a){this.uuid=THREE.Math.generateUUID();this.type=\"MultiMaterial\";this.materials=a instanceof Array?a:[];this.visible=!0};\r\n\tTHREE.MultiMaterial.prototype={constructor:THREE.MultiMaterial,toJSON:function(a){for(var b={metadata:{version:4.2,type:\"material\",generator:\"MaterialExporter\"},uuid:this.uuid,type:this.type,materials:[]},c=this.materials,d=0,e=c.length;d<e;d++){var f=c[d].toJSON(a);delete f.metadata;b.materials.push(f)}b.visible=this.visible;return b},clone:function(){for(var a=new this.constructor,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());a.visible=this.visible;return a}};\r\n\tTHREE.PointsMaterial=function(a){THREE.Material.call(this);this.type=\"PointsMaterial\";this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.lights=!1;this.setValues(a)};THREE.PointsMaterial.prototype=Object.create(THREE.Material.prototype);THREE.PointsMaterial.prototype.constructor=THREE.PointsMaterial;\r\n\tTHREE.PointsMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.size=a.size;this.sizeAttenuation=a.sizeAttenuation;return this};\r\n\tTHREE.ShaderMaterial=function(a){THREE.Material.call(this);this.type=\"ShaderMaterial\";this.defines={};this.uniforms={};this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,\r\n\tdrawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;void 0!==a&&(void 0!==a.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(a))};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;\r\n\tTHREE.ShaderMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.fragmentShader=a.fragmentShader;this.vertexShader=a.vertexShader;this.uniforms=THREE.UniformsUtils.clone(a.uniforms);this.defines=a.defines;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.lights=a.lights;this.clipping=a.clipping;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;this.extensions=a.extensions;return this};\r\n\tTHREE.ShaderMaterial.prototype.toJSON=function(a){a=THREE.Material.prototype.toJSON.call(this,a);a.uniforms=this.uniforms;a.vertexShader=this.vertexShader;a.fragmentShader=this.fragmentShader;return a};THREE.RawShaderMaterial=function(a){THREE.ShaderMaterial.call(this,a);this.type=\"RawShaderMaterial\"};THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial;\r\n\tTHREE.SpriteMaterial=function(a){THREE.Material.call(this);this.type=\"SpriteMaterial\";this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.lights=this.fog=!1;this.setValues(a)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial;THREE.SpriteMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.rotation=a.rotation;return this};\r\n\tTHREE.ShadowMaterial=function(){THREE.ShaderMaterial.call(this,{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:THREE.ShaderChunk.shadow_vert,fragmentShader:THREE.ShaderChunk.shadow_frag});this.transparent=this.lights=!0;Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(a){this.uniforms.opacity.value=a}}})};THREE.ShadowMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);\r\n\tTHREE.ShadowMaterial.prototype.constructor=THREE.ShadowMaterial;\r\n\tTHREE.Texture=function(a,b,c,d,e,f,g,h,k,l){Object.defineProperty(this,\"id\",{value:THREE.TextureIdCount++});this.uuid=THREE.Math.generateUUID();this.sourceFile=this.name=\"\";this.image=void 0!==a?a:THREE.Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:THREE.Texture.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;\r\n\tthis.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==l?l:THREE.LinearEncoding;this.version=0;this.onUpdate=null};THREE.Texture.DEFAULT_IMAGE=void 0;THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping;\r\n\tTHREE.Texture.prototype={constructor:THREE.Texture,set needsUpdate(a){!0===a&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.image=a.image;this.mipmaps=a.mipmaps.slice(0);this.mapping=a.mapping;this.wrapS=a.wrapS;this.wrapT=a.wrapT;this.magFilter=a.magFilter;this.minFilter=a.minFilter;this.anisotropy=a.anisotropy;this.format=a.format;this.type=a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.generateMipmaps=a.generateMipmaps;this.premultiplyAlpha=\r\n\ta.premultiplyAlpha;this.flipY=a.flipY;this.unpackAlignment=a.unpackAlignment;this.encoding=a.encoding;return this},toJSON:function(a){if(void 0!==a.textures[this.uuid])return a.textures[this.uuid];var b={metadata:{version:4.4,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy};\r\n\tif(void 0!==this.image){var c=this.image;void 0===c.uuid&&(c.uuid=THREE.Math.generateUUID());if(void 0===a.images[c.uuid]){var d=a.images,e=c.uuid,f=c.uuid,g;void 0!==c.toDataURL?g=c:(g=document.createElement(\"canvas\"),g.width=c.width,g.height=c.height,g.getContext(\"2d\").drawImage(c,0,0,c.width,c.height));g=2048<g.width||2048<g.height?g.toDataURL(\"image/jpeg\",.6):g.toDataURL(\"image/png\");d[e]={uuid:f,url:g}}b.image=c.uuid}return a.textures[this.uuid]=b},dispose:function(){this.dispatchEvent({type:\"dispose\"})},\r\n\ttransformUv:function(a){if(this.mapping===THREE.UVMapping){a.multiply(this.repeat);a.add(this.offset);if(0>a.x||1<a.x)switch(this.wrapS){case THREE.RepeatWrapping:a.x-=Math.floor(a.x);break;case THREE.ClampToEdgeWrapping:a.x=0>a.x?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(a.x)%2)?a.x=Math.ceil(a.x)-a.x:a.x-=Math.floor(a.x)}if(0>a.y||1<a.y)switch(this.wrapT){case THREE.RepeatWrapping:a.y-=Math.floor(a.y);break;case THREE.ClampToEdgeWrapping:a.y=0>a.y?0:1;break;case THREE.MirroredRepeatWrapping:1===\r\n\tMath.abs(Math.floor(a.y)%2)?a.y=Math.ceil(a.y)-a.y:a.y-=Math.floor(a.y)}this.flipY&&(a.y=1-a.y)}}};Object.assign(THREE.Texture.prototype,THREE.EventDispatcher.prototype);THREE.TextureIdCount=0;\r\n\tTHREE.DepthTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,null,d,e,f,g,h,THREE.DepthFormat,c,k);this.image={width:a,height:b};this.type=void 0!==c?c:THREE.UnsignedShortType;this.magFilter=void 0!==g?g:THREE.NearestFilter;this.minFilter=void 0!==h?h:THREE.NearestFilter;this.generateMipmaps=this.flipY=!1};THREE.DepthTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DepthTexture.prototype.constructor=THREE.DepthTexture;\r\n\tTHREE.CanvasTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.needsUpdate=!0};THREE.CanvasTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CanvasTexture.prototype.constructor=THREE.CanvasTexture;THREE.CubeTexture=function(a,b,c,d,e,f,g,h,k,l){a=void 0!==a?a:[];b=void 0!==b?b:THREE.CubeReflectionMapping;THREE.Texture.call(this,a,b,c,d,e,f,g,h,k,l);this.flipY=!1};THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype);\r\n\tTHREE.CubeTexture.prototype.constructor=THREE.CubeTexture;Object.defineProperty(THREE.CubeTexture.prototype,\"images\",{get:function(){return this.image},set:function(a){this.image=a}});THREE.CompressedTexture=function(a,b,c,d,e,f,g,h,k,l,n,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,n,p);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture;\r\n\tTHREE.DataTexture=function(a,b,c,d,e,f,g,h,k,l,n,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,n,p);this.image={data:a,width:b,height:c};this.magFilter=void 0!==k?k:THREE.NearestFilter;this.minFilter=void 0!==l?l:THREE.NearestFilter;this.generateMipmaps=this.flipY=!1};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor=THREE.DataTexture;\r\n\tTHREE.VideoTexture=function(a,b,c,d,e,f,g,h,k){function l(){requestAnimationFrame(l);a.readyState>=a.HAVE_CURRENT_DATA&&(n.needsUpdate=!0)}THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.generateMipmaps=!1;var n=this;l()};THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor=THREE.VideoTexture;THREE.Group=function(){THREE.Object3D.call(this);this.type=\"Group\"};THREE.Group.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Group});\r\n\tTHREE.Points=function(a,b){THREE.Object3D.call(this);this.type=\"Points\";this.geometry=void 0!==a?a:new THREE.BufferGeometry;this.material=void 0!==b?b:new THREE.PointsMaterial({color:16777215*Math.random()})};\r\n\tTHREE.Points.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Points,raycast:function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){function f(a,c){var f=b.distanceSqToPoint(a);if(f<n){var h=b.closestPointToPoint(a);h.applyMatrix4(k);var m=d.ray.origin.distanceTo(h);m<d.near||m>d.far||e.push({distance:m,distanceToRay:Math.sqrt(f),point:h.clone(),index:c,face:null,object:g})}}var g=this,h=this.geometry,k=this.matrixWorld,l=d.params.Points.threshold;\r\n\tnull===h.boundingSphere&&h.computeBoundingSphere();c.copy(h.boundingSphere);c.applyMatrix4(k);if(!1!==d.ray.intersectsSphere(c)){a.getInverse(k);b.copy(d.ray).applyMatrix4(a);var l=l/((this.scale.x+this.scale.y+this.scale.z)/3),n=l*l,l=new THREE.Vector3;if(h instanceof THREE.BufferGeometry){var p=h.index,h=h.attributes.position.array;if(null!==p)for(var m=p.array,p=0,q=m.length;p<q;p++){var r=m[p];l.fromArray(h,3*r);f(l,r)}else for(p=0,m=h.length/3;p<m;p++)l.fromArray(h,3*p),f(l,p)}else for(l=h.vertices,\r\n\tp=0,m=l.length;p<m;p++)f(l[p],p)}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.Line=function(a,b,c){if(1===c)return console.warn(\"THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.\"),new THREE.LineSegments(a,b);THREE.Object3D.call(this);this.type=\"Line\";this.geometry=void 0!==a?a:new THREE.BufferGeometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()})};\r\n\tTHREE.Line.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Line,raycast:function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry,h=this.matrixWorld;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(h);if(!1!==d.ray.intersectsSphere(c)){a.getInverse(h);b.copy(d.ray).applyMatrix4(a);var k=new THREE.Vector3,l=new THREE.Vector3,h=new THREE.Vector3,n=\r\n\tnew THREE.Vector3,p=this instanceof THREE.LineSegments?2:1;if(g instanceof THREE.BufferGeometry){var m=g.index,q=g.attributes.position.array;if(null!==m)for(var m=m.array,g=0,r=m.length-1;g<r;g+=p){var s=m[g+1];k.fromArray(q,3*m[g]);l.fromArray(q,3*s);s=b.distanceSqToSegment(k,l,n,h);s>f||(n.applyMatrix4(this.matrixWorld),s=d.ray.origin.distanceTo(n),s<d.near||s>d.far||e.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else for(g=0,r=\r\n\tq.length/3-1;g<r;g+=p)k.fromArray(q,3*g),l.fromArray(q,3*g+3),s=b.distanceSqToSegment(k,l,n,h),s>f||(n.applyMatrix4(this.matrixWorld),s=d.ray.origin.distanceTo(n),s<d.near||s>d.far||e.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else if(g instanceof THREE.Geometry)for(k=g.vertices,l=k.length,g=0;g<l-1;g+=p)s=b.distanceSqToSegment(k[g],k[g+1],n,h),s>f||(n.applyMatrix4(this.matrixWorld),s=d.ray.origin.distanceTo(n),s<d.near||s>d.far||\r\n\te.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.LineSegments=function(a,b){THREE.Line.call(this,a,b);this.type=\"LineSegments\"};THREE.LineSegments.prototype=Object.assign(Object.create(THREE.Line.prototype),{constructor:THREE.LineSegments});\r\n\tTHREE.Mesh=function(a,b){THREE.Object3D.call(this);this.type=\"Mesh\";this.geometry=void 0!==a?a:new THREE.BufferGeometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.drawMode=THREE.TrianglesDrawMode;this.updateMorphTargets()};\r\n\tTHREE.Mesh.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Mesh,setDrawMode:function(a){this.drawMode=a},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}},getMorphTargetIndexByName:function(a){if(void 0!==\r\n\tthis.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.warn(\"THREE.Mesh.getMorphTargetIndexByName: morph target \"+a+\" does not exist. Returning 0.\");return 0},raycast:function(){function a(a,b,c,d,e,g,f){THREE.Triangle.barycoordFromPoint(a,b,c,d,s);e.multiplyScalar(s.x);g.multiplyScalar(s.y);f.multiplyScalar(s.z);e.add(g).add(f);return e.clone()}function b(a,b,c,d,e,g,f){var h=a.material;if(null===(h.side===THREE.BackSide?c.intersectTriangle(g,e,d,!0,f):c.intersectTriangle(d,e,\r\n\tg,h.side!==THREE.DoubleSide,f)))return null;x.copy(f);x.applyMatrix4(a.matrixWorld);c=b.ray.origin.distanceTo(x);return c<b.near||c>b.far?null:{distance:c,point:x.clone(),object:a}}function c(c,d,e,f,l,p,n,s){g.fromArray(f,3*p);h.fromArray(f,3*n);k.fromArray(f,3*s);if(c=b(c,d,e,g,h,k,u))l&&(m.fromArray(l,2*p),q.fromArray(l,2*n),r.fromArray(l,2*s),c.uv=a(u,g,h,k,m,q,r)),c.face=new THREE.Face3(p,n,s,THREE.Triangle.normal(g,h,k)),c.faceIndex=p;return c}var d=new THREE.Matrix4,e=new THREE.Ray,f=new THREE.Sphere,\r\n\tg=new THREE.Vector3,h=new THREE.Vector3,k=new THREE.Vector3,l=new THREE.Vector3,n=new THREE.Vector3,p=new THREE.Vector3,m=new THREE.Vector2,q=new THREE.Vector2,r=new THREE.Vector2,s=new THREE.Vector3,u=new THREE.Vector3,x=new THREE.Vector3;return function(s,x){var w=this.geometry,D=this.material,A=this.matrixWorld;if(void 0!==D&&(null===w.boundingSphere&&w.computeBoundingSphere(),f.copy(w.boundingSphere),f.applyMatrix4(A),!1!==s.ray.intersectsSphere(f)&&(d.getInverse(A),e.copy(s.ray).applyMatrix4(d),\r\n\tnull===w.boundingBox||!1!==e.intersectsBox(w.boundingBox)))){var y,B;if(w instanceof THREE.BufferGeometry){var G,z,D=w.index,A=w.attributes,w=A.position.array;void 0!==A.uv&&(y=A.uv.array);if(null!==D)for(var A=D.array,H=0,M=A.length;H<M;H+=3){if(D=A[H],G=A[H+1],z=A[H+2],B=c(this,s,e,w,y,D,G,z))B.faceIndex=Math.floor(H/3),x.push(B)}else for(H=0,M=w.length;H<M;H+=9)if(D=H/3,G=D+1,z=D+2,B=c(this,s,e,w,y,D,G,z))B.index=D,x.push(B)}else if(w instanceof THREE.Geometry){var O,N,A=D instanceof THREE.MultiMaterial,\r\n\tH=!0===A?D.materials:null,M=w.vertices;G=w.faces;z=w.faceVertexUvs[0];0<z.length&&(y=z);for(var E=0,K=G.length;E<K;E++){var I=G[E];B=!0===A?H[I.materialIndex]:D;if(void 0!==B){z=M[I.a];O=M[I.b];N=M[I.c];if(!0===B.morphTargets){B=w.morphTargets;var L=this.morphTargetInfluences;g.set(0,0,0);h.set(0,0,0);k.set(0,0,0);for(var P=0,Q=B.length;P<Q;P++){var R=L[P];if(0!==R){var F=B[P].vertices;g.addScaledVector(l.subVectors(F[I.a],z),R);h.addScaledVector(n.subVectors(F[I.b],O),R);k.addScaledVector(p.subVectors(F[I.c],\r\n\tN),R)}}g.add(z);h.add(O);k.add(N);z=g;O=h;N=k}if(B=b(this,s,e,z,O,N,u))y&&(L=y[E],m.copy(L[0]),q.copy(L[1]),r.copy(L[2]),B.uv=a(u,z,O,N,m,q,r)),B.face=I,B.faceIndex=E,x.push(B)}}}}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.Bone=function(a){THREE.Object3D.call(this);this.type=\"Bone\";this.skin=a};\r\n\tTHREE.Bone.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Bone,copy:function(a){THREE.Object3D.prototype.copy.call(this,a);this.skin=a.skin;return this}});\r\n\tTHREE.Skeleton=function(a,b,c){this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;a=a||[];this.bones=a.slice(0);this.useVertexTexture?(a=Math.sqrt(4*this.bones.length),a=THREE.Math.nextPowerOfTwo(Math.ceil(a)),this.boneTextureHeight=this.boneTextureWidth=a=Math.max(a,4),this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType)):\r\n\tthis.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(console.warn(\"THREE.Skeleton bonInverses is the wrong length.\"),this.boneInverses=[],b=0,a=this.bones.length;b<a;b++)this.boneInverses.push(new THREE.Matrix4)};\r\n\tObject.assign(THREE.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new THREE.Matrix4;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}},pose:function(){for(var a,b=0,c=this.bones.length;b<c;b++)(a=this.bones[b])&&a.matrixWorld.getInverse(this.boneInverses[b]);b=0;for(c=this.bones.length;b<c;b++)if(a=this.bones[b])a.parent?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):\r\n\ta.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)},update:function(){var a=new THREE.Matrix4;return function(){for(var b=0,c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix,this.boneInverses[b]),a.toArray(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new THREE.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}});\r\n\tTHREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.type=\"SkinnedMesh\";this.bindMode=\"attached\";this.bindMatrix=new THREE.Matrix4;this.bindMatrixInverse=new THREE.Matrix4;a=[];if(this.geometry&&void 0!==this.geometry.bones){for(var d,e=0,f=this.geometry.bones.length;e<f;++e)d=this.geometry.bones[e],b=new THREE.Bone(this),a.push(b),b.name=d.name,b.position.fromArray(d.pos),b.quaternion.fromArray(d.rotq),void 0!==d.scl&&b.scale.fromArray(d.scl);e=0;for(f=this.geometry.bones.length;e<f;++e)d=\r\n\tthis.geometry.bones[e],-1!==d.parent&&null!==d.parent&&void 0!==a[d.parent]?a[d.parent].add(a[e]):this.add(a[e])}this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a,void 0,c),this.matrixWorld)};\r\n\tTHREE.SkinnedMesh.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:THREE.SkinnedMesh,bind:function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinWeights.length;a++){var b=this.geometry.skinWeights[a],c=\r\n\t1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0)}else if(this.geometry instanceof THREE.BufferGeometry)for(var b=new THREE.Vector4,d=this.geometry.attributes.skinWeight,a=0;a<d.count;a++)b.x=d.getX(a),b.y=d.getY(a),b.z=d.getZ(a),b.w=d.getW(a),c=1/b.lengthManhattan(),Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0),d.setXYZW(a,b.x,b.y,b.z,b.w)},updateMatrixWorld:function(a){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0);\"attached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):\r\n\t\"detached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn(\"THREE.SkinnedMesh unrecognized bindMode: \"+this.bindMode)},clone:function(){return(new this.constructor(this.geometry,this.material,this.useVertexTexture)).copy(this)}});THREE.LOD=function(){THREE.Object3D.call(this);this.type=\"LOD\";Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})};\r\n\tTHREE.LOD.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LOD,copy:function(a){THREE.Object3D.prototype.copy.call(this,a,!1);a=a.levels;for(var b=0,c=a.length;b<c;b++){var d=a[b];this.addLevel(d.object.clone(),d.distance)}return this},addLevel:function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=this.levels,d=0;d<c.length&&!(b<c[d].distance);d++);c.splice(d,0,{distance:b,object:a});this.add(a)},getObjectForDistance:function(a){for(var b=this.levels,c=1,d=b.length;c<\r\n\td&&!(a<b[c].distance);c++);return b[c-1].object},raycast:function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}(),update:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){var d=this.levels;if(1<d.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);d[0].object.visible=!0;for(var e=1,f=d.length;e<f;e++)if(c>=\r\n\td[e].distance)d[e-1].object.visible=!1,d[e].object.visible=!0;else break;for(;e<f;e++)d[e].object.visible=!1}}}(),toJSON:function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.levels=[];for(var b=this.levels,c=0,d=b.length;c<d;c++){var e=b[c];a.object.levels.push({object:e.object.uuid,distance:e.distance})}return a}});THREE.Sprite=function(a){THREE.Object3D.call(this);this.type=\"Sprite\";this.material=void 0!==a?a:new THREE.SpriteMaterial};\r\n\tTHREE.Sprite.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Sprite,raycast:function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.distanceSqToPoint(a);d>this.scale.x*this.scale.y/4||c.push({distance:Math.sqrt(d),point:this.position,face:null,object:this})}}(),clone:function(){return(new this.constructor(this.material)).copy(this)}});\r\n\tTHREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};\r\n\tTHREE.LensFlare.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LensFlare,copy:function(a){THREE.Object3D.prototype.copy.call(this,a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback=a.customUpdateCallback;for(var b=0,c=a.lensFlares.length;b<c;b++)this.lensFlares.push(a.lensFlares[b]);return this},add:function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);\r\n\tc=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:0,opacity:f,color:e,blending:d})},updateLensFlares:function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)}});\r\n\tTHREE.Scene=function(){THREE.Object3D.call(this);this.type=\"Scene\";this.overrideMaterial=this.fog=null;this.autoUpdate=!0};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);THREE.Scene.prototype.constructor=THREE.Scene;\r\n\tTHREE.Scene.prototype.copy=function(a,b){THREE.Object3D.prototype.copy.call(this,a,b);null!==a.fog&&(this.fog=a.fog.clone());null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone());this.autoUpdate=a.autoUpdate;this.matrixAutoUpdate=a.matrixAutoUpdate;return this};THREE.Fog=function(a,b,c){this.name=\"\";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};\r\n\tTHREE.FogExp2=function(a,b){this.name=\"\";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={};THREE.ShaderChunk.alphamap_fragment=\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";THREE.ShaderChunk.alphamap_pars_fragment=\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";THREE.ShaderChunk.alphatest_fragment=\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.aomap_fragment=\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.aomap_pars_fragment=\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\r\n\tTHREE.ShaderChunk.begin_vertex=\"\\nvec3 transformed = vec3( position );\\n\";THREE.ShaderChunk.beginnormal_vertex=\"\\nvec3 objectNormal = vec3( normal );\\n\";THREE.ShaderChunk.bsdfs=\"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\n\tTHREE.ShaderChunk.bumpmap_pars_fragment=\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.clipping_planes_fragment=\"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";THREE.ShaderChunk.clipping_planes_pars_fragment=\"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.clipping_planes_pars_vertex=\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";THREE.ShaderChunk.clipping_planes_vertex=\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";THREE.ShaderChunk.color_fragment=\"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";THREE.ShaderChunk.color_pars_fragment=\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.color_pars_vertex=\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";THREE.ShaderChunk.color_vertex=\"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";THREE.ShaderChunk.common=\"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\r\n\tTHREE.ShaderChunk.cube_uv_reflection_fragment=\"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.defaultnormal_vertex=\"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";THREE.ShaderChunk.displacementmap_vertex=\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";THREE.ShaderChunk.displacementmap_pars_vertex=\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.emissivemap_fragment=\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";THREE.ShaderChunk.emissivemap_pars_fragment=\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";THREE.ShaderChunk.encodings_pars_fragment=\"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\n\tTHREE.ShaderChunk.encodings_fragment=\"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";THREE.ShaderChunk.envmap_fragment=\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#else\\n\\t\\tfloat flipNormal = 1.0;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.envmap_pars_fragment=\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.envmap_pars_vertex=\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.envmap_vertex=\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.fog_fragment=\"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.fog_pars_fragment=\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";THREE.ShaderChunk.lightmap_fragment=\"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";THREE.ShaderChunk.lightmap_pars_fragment=\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\r\n\tTHREE.ShaderChunk.lights_lambert_vertex=\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.lights_pars=\"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#else\\n\\t\\t\\tfloat flipNormal = 1.0;\\n\\t\\t#endif\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#else\\n\\t\\t\\tfloat flipNormal = 1.0;\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.lights_phong_fragment=\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";THREE.ShaderChunk.lights_phong_pars_fragment=\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\r\n\tTHREE.ShaderChunk.lights_physical_fragment=\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n\";THREE.ShaderChunk.lights_physical_pars_fragment=\"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t#endif\\n};\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\n\tTHREE.ShaderChunk.lights_template=\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.logdepthbuf_fragment=\"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";THREE.ShaderChunk.logdepthbuf_pars_fragment=\"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.logdepthbuf_pars_vertex=\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\r\n\tTHREE.ShaderChunk.logdepthbuf_vertex=\"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.map_fragment=\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.map_pars_fragment=\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";THREE.ShaderChunk.map_particle_fragment=\"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";THREE.ShaderChunk.map_particle_pars_fragment=\"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";THREE.ShaderChunk.metalnessmap_fragment=\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.metalnessmap_pars_fragment=\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";THREE.ShaderChunk.morphnormal_vertex=\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.morphtarget_pars_vertex=\"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";THREE.ShaderChunk.morphtarget_vertex=\"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.normal_fragment=\"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.normalmap_pars_fragment=\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.packing=\"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\r\n\tTHREE.ShaderChunk.premultiplied_alpha_fragment=\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";THREE.ShaderChunk.project_vertex=\"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";THREE.ShaderChunk.roughnessmap_fragment=\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.roughnessmap_pars_fragment=\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";THREE.ShaderChunk.shadowmap_pars_fragment=\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.shadowmap_pars_vertex=\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.shadowmap_vertex=\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.shadowmask_pars_fragment=\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\r\n\tTHREE.ShaderChunk.skinbase_vertex=\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";THREE.ShaderChunk.skinning_pars_vertex=\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.skinning_vertex=\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";THREE.ShaderChunk.skinnormal_vertex=\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.specularmap_fragment=\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";THREE.ShaderChunk.specularmap_pars_fragment=\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";THREE.ShaderChunk.tonemapping_fragment=\"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\n\tTHREE.ShaderChunk.tonemapping_pars_fragment=\"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\n\tTHREE.ShaderChunk.uv2_pars_fragment=\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";THREE.ShaderChunk.uv2_pars_vertex=\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";THREE.ShaderChunk.uv2_vertex=\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";THREE.ShaderChunk.uv_pars_fragment=\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\r\n\tTHREE.ShaderChunk.uv_pars_vertex=\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";THREE.ShaderChunk.uv_vertex=\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\r\n\tTHREE.ShaderChunk.worldpos_vertex=\"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\r\n\tTHREE.UniformsUtils={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;for(e in d)b[e]=d[e]}return b},clone:function(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];e instanceof THREE.Color||e instanceof THREE.Vector2||e instanceof THREE.Vector3||e instanceof THREE.Vector4||e instanceof THREE.Matrix3||e instanceof THREE.Matrix4||e instanceof THREE.Texture?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}}return b}};\r\n\tTHREE.UniformsLib={common:{diffuse:{type:\"c\",value:new THREE.Color(15658734)},opacity:{type:\"1f\",value:1},map:{type:\"t\",value:null},offsetRepeat:{type:\"v4\",value:new THREE.Vector4(0,0,1,1)},specularMap:{type:\"t\",value:null},alphaMap:{type:\"t\",value:null},envMap:{type:\"t\",value:null},flipEnvMap:{type:\"1f\",value:-1},reflectivity:{type:\"1f\",value:1},refractionRatio:{type:\"1f\",value:.98}},aomap:{aoMap:{type:\"t\",value:null},aoMapIntensity:{type:\"1f\",value:1}},lightmap:{lightMap:{type:\"t\",value:null},lightMapIntensity:{type:\"1f\",\r\n\tvalue:1}},emissivemap:{emissiveMap:{type:\"t\",value:null}},bumpmap:{bumpMap:{type:\"t\",value:null},bumpScale:{type:\"1f\",value:1}},normalmap:{normalMap:{type:\"t\",value:null},normalScale:{type:\"v2\",value:new THREE.Vector2(1,1)}},displacementmap:{displacementMap:{type:\"t\",value:null},displacementScale:{type:\"1f\",value:1},displacementBias:{type:\"1f\",value:0}},roughnessmap:{roughnessMap:{type:\"t\",value:null}},metalnessmap:{metalnessMap:{type:\"t\",value:null}},fog:{fogDensity:{type:\"1f\",value:2.5E-4},fogNear:{type:\"1f\",\r\n\tvalue:1},fogFar:{type:\"1f\",value:2E3},fogColor:{type:\"c\",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:\"3fv\",value:[]},directionalLights:{type:\"sa\",value:[],properties:{direction:{type:\"v3\"},color:{type:\"c\"},shadow:{type:\"1i\"},shadowBias:{type:\"1f\"},shadowRadius:{type:\"1f\"},shadowMapSize:{type:\"v2\"}}},directionalShadowMap:{type:\"tv\",value:[]},directionalShadowMatrix:{type:\"m4v\",value:[]},spotLights:{type:\"sa\",value:[],properties:{color:{type:\"c\"},position:{type:\"v3\"},direction:{type:\"v3\"},\r\n\tdistance:{type:\"1f\"},coneCos:{type:\"1f\"},penumbraCos:{type:\"1f\"},decay:{type:\"1f\"},shadow:{type:\"1i\"},shadowBias:{type:\"1f\"},shadowRadius:{type:\"1f\"},shadowMapSize:{type:\"v2\"}}},spotShadowMap:{type:\"tv\",value:[]},spotShadowMatrix:{type:\"m4v\",value:[]},pointLights:{type:\"sa\",value:[],properties:{color:{type:\"c\"},position:{type:\"v3\"},decay:{type:\"1f\"},distance:{type:\"1f\"},shadow:{type:\"1i\"},shadowBias:{type:\"1f\"},shadowRadius:{type:\"1f\"},shadowMapSize:{type:\"v2\"}}},pointShadowMap:{type:\"tv\",value:[]},\r\n\tpointShadowMatrix:{type:\"m4v\",value:[]},hemisphereLights:{type:\"sa\",value:[],properties:{direction:{type:\"v3\"},skyColor:{type:\"c\"},groundColor:{type:\"c\"}}}},points:{diffuse:{type:\"c\",value:new THREE.Color(15658734)},opacity:{type:\"1f\",value:1},size:{type:\"1f\",value:1},scale:{type:\"1f\",value:1},map:{type:\"t\",value:null},offsetRepeat:{type:\"v4\",value:new THREE.Vector4(0,0,1,1)}}};THREE.ShaderChunk.cube_frag=\"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.cube_vert=\"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";THREE.ShaderChunk.depth_frag=\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\r\n\tTHREE.ShaderChunk.depth_vert=\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.distanceRGBA_frag=\"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";THREE.ShaderChunk.distanceRGBA_vert=\"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\r\n\tTHREE.ShaderChunk.equirect_frag=\"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.equirect_vert=\"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";THREE.ShaderChunk.linedashed_frag=\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.linedashed_vert=\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshbasic_frag=\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshbasic_vert=\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshlambert_frag=\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshlambert_vert=\"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshphong_frag=\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshphong_vert=\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshphysical_frag=\"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.meshphysical_vert=\"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.normal_frag=\"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";THREE.ShaderChunk.normal_vert=\"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.points_frag=\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\tTHREE.ShaderChunk.points_vert=\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\n\tTHREE.ShaderChunk.shadow_frag=\"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";THREE.ShaderChunk.shadow_vert=\"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\n\tTHREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.meshbasic_vert,fragmentShader:THREE.ShaderChunk.meshbasic_frag},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:\"c\",value:new THREE.Color(0)}}]),vertexShader:THREE.ShaderChunk.meshlambert_vert,\r\n\tfragmentShader:THREE.ShaderChunk.meshlambert_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:\"c\",value:new THREE.Color(0)},specular:{type:\"c\",value:new THREE.Color(1118481)},shininess:{type:\"1f\",value:30}}]),vertexShader:THREE.ShaderChunk.meshphong_vert,\r\n\tfragmentShader:THREE.ShaderChunk.meshphong_frag},standard:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.roughnessmap,THREE.UniformsLib.metalnessmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:\"c\",value:new THREE.Color(0)},roughness:{type:\"1f\",value:.5},metalness:{type:\"1f\",value:0},\r\n\tenvMapIntensity:{type:\"1f\",value:1}}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.points_vert,fragmentShader:THREE.ShaderChunk.points_frag},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:\"1f\",value:1},dashSize:{type:\"1f\",value:1},totalSize:{type:\"1f\",value:2}}]),\r\n\tvertexShader:THREE.ShaderChunk.linedashed_vert,fragmentShader:THREE.ShaderChunk.linedashed_frag},depth:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.displacementmap]),vertexShader:THREE.ShaderChunk.depth_vert,fragmentShader:THREE.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{type:\"1f\",value:1}},vertexShader:THREE.ShaderChunk.normal_vert,fragmentShader:THREE.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{type:\"t\",value:null},tFlip:{type:\"1f\",value:-1}},vertexShader:THREE.ShaderChunk.cube_vert,\r\n\tfragmentShader:THREE.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{type:\"t\",value:null},tFlip:{type:\"1f\",value:-1}},vertexShader:THREE.ShaderChunk.equirect_vert,fragmentShader:THREE.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{type:\"v3\",value:new THREE.Vector3}},vertexShader:THREE.ShaderChunk.distanceRGBA_vert,fragmentShader:THREE.ShaderChunk.distanceRGBA_frag}};\r\n\tTHREE.ShaderLib.physical={uniforms:THREE.UniformsUtils.merge([THREE.ShaderLib.standard.uniforms,{}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag};\r\n\tTHREE.WebGLRenderer=function(a){function b(a,b,c,d){!0===K&&(a*=d,b*=d,c*=d);J.clearColor(a,b,c,d)}function c(){J.init();J.scissor(ra.copy(ya).multiplyScalar($));J.viewport(ma.copy(na).multiplyScalar($));b(aa.r,aa.g,aa.b,ia)}function d(){ea=fa=null;oa=\"\";Z=-1;J.reset()}function e(a){a.preventDefault();d();c();T.clear()}function f(a){a=a.target;a.removeEventListener(\"dispose\",f);a:{var b=T.get(a);if(a.image&&b.__image__webglTextureCube)t.deleteTexture(b.__image__webglTextureCube);else{if(void 0===\r\n\tb.__webglInit)break a;t.deleteTexture(b.__webglTexture)}T.delete(a)}ja.textures--}function g(a){a=a.target;a.removeEventListener(\"dispose\",g);var b=T.get(a),c=T.get(a.texture);if(a){void 0!==c.__webglTexture&&t.deleteTexture(c.__webglTexture);a.depthTexture&&a.depthTexture.dispose();if(a instanceof THREE.WebGLRenderTargetCube)for(c=0;6>c;c++)t.deleteFramebuffer(b.__webglFramebuffer[c]),b.__webglDepthbuffer&&t.deleteRenderbuffer(b.__webglDepthbuffer[c]);else t.deleteFramebuffer(b.__webglFramebuffer),\r\n\tb.__webglDepthbuffer&&t.deleteRenderbuffer(b.__webglDepthbuffer);T.delete(a.texture);T.delete(a)}ja.textures--}function h(a){a=a.target;a.removeEventListener(\"dispose\",h);k(a);T.delete(a)}function k(a){var b=T.get(a).program;a.program=void 0;void 0!==b&&pa.releaseProgram(b)}function l(a,b){return Math.abs(b[0])-Math.abs(a[0])}function n(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==\r\n\tb.z?a.z-b.z:a.id-b.id}function p(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function m(a,b,c,d,e){var g;c.transparent?(d=R,g=++F):(d=P,g=++Q);g=d[g];void 0!==g?(g.id=a.id,g.object=a,g.geometry=b,g.material=c,g.z=X.z,g.group=e):(g={id:a.id,object:a,geometry:b,material:c,z:X.z,group:e},d.push(g))}function q(a){if(!Ba.intersectsSphere(a))return!1;var b=ba.numPlanes;if(0===b)return!0;var c=W.clippingPlanes,d=a.center;a=\r\n\t-a.radius;var e=0;do if(c[e].distanceToPoint(d)<a)return!1;while(++e!==b);return!0}function r(a,b){if(!1!==a.visible){if(a.layers.test(b.layers))if(a instanceof THREE.Light)L.push(a);else if(a instanceof THREE.Sprite){var c;(c=!1===a.frustumCulled)||(ka.center.set(0,0,0),ka.radius=.7071067811865476,ka.applyMatrix4(a.matrixWorld),c=!0===q(ka));c&&U.push(a)}else if(a instanceof THREE.LensFlare)Y.push(a);else if(a instanceof THREE.ImmediateRenderObject)!0===W.sortObjects&&(X.setFromMatrixPosition(a.matrixWorld),\r\n\tX.applyProjection(sa)),m(a,null,a.material,X.z,null);else if(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof THREE.Points)if(a instanceof THREE.SkinnedMesh&&a.skeleton.update(),(c=!1===a.frustumCulled)||(c=a.geometry,null===c.boundingSphere&&c.computeBoundingSphere(),ka.copy(c.boundingSphere).applyMatrix4(a.matrixWorld),c=!0===q(ka)),c){var d=a.material;if(!0===d.visible)if(!0===W.sortObjects&&(X.setFromMatrixPosition(a.matrixWorld),X.applyProjection(sa)),c=qa.update(a),d instanceof\r\n\tTHREE.MultiMaterial)for(var e=c.groups,g=d.materials,d=0,f=e.length;d<f;d++){var h=e[d],k=g[h.materialIndex];!0===k.visible&&m(a,c,k,X.z,h)}else m(a,c,d,X.z,null)}c=a.children;d=0;for(f=c.length;d<f;d++)r(c[d],b)}}function s(a,b,c,d){for(var e=0,g=a.length;e<g;e++){var f=a[e],h=f.object,k=f.geometry,m=void 0===d?f.material:d,f=f.group;h.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,h.matrixWorld);h.normalMatrix.getNormalMatrix(h.modelViewMatrix);if(h instanceof THREE.ImmediateRenderObject){u(m);\r\n\tvar l=x(b,c,m,h);oa=\"\";h.render(function(a){W.renderBufferImmediate(a,l,m)})}else W.renderBufferDirect(b,c,k,m,h,f)}}function u(a){a.side!==THREE.DoubleSide?J.enable(t.CULL_FACE):J.disable(t.CULL_FACE);J.setFlipSided(a.side===THREE.BackSide);!0===a.transparent?J.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha):J.setBlending(THREE.NoBlending);J.setDepthFunc(a.depthFunc);J.setDepthTest(a.depthTest);J.setDepthWrite(a.depthWrite);\r\n\tJ.setColorWrite(a.colorWrite);J.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function x(a,b,c,d){ta=0;var e=T.get(c);ua&&((za||a!==ea)&&ba.setState(c.clippingPlanes,c.clipShadows,a,e,a===ea&&c.id===Z),void 0!==e.numClippingPlanes&&e.numClippingPlanes!==ba.numPlanes&&(c.needsUpdate=!0));void 0===e.program&&(c.needsUpdate=!0);void 0!==e.lightsHash&&e.lightsHash!==S.hash&&(c.needsUpdate=!0);if(c.needsUpdate){a:{var g=T.get(c),f=pa.getParameters(c,S,b,ba.numPlanes,d),m=\r\n\tpa.getProgramCode(c,f),l=g.program,p=!0;if(void 0===l)c.addEventListener(\"dispose\",h);else if(l.code!==m)k(c);else if(void 0!==f.shaderID)break a;else p=!1;p&&(f.shaderID?(l=THREE.ShaderLib[f.shaderID],g.__webglShader={name:c.type,uniforms:THREE.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}):g.__webglShader={name:c.type,uniforms:c.uniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader},c.__webglShader=g.__webglShader,l=pa.acquireProgram(c,\r\n\tf,m),g.program=l,c.program=l);f=l.getAttributes();if(c.morphTargets)for(m=c.numSupportedMorphTargets=0;m<W.maxMorphTargets;m++)0<=f[\"morphTarget\"+m]&&c.numSupportedMorphTargets++;if(c.morphNormals)for(m=c.numSupportedMorphNormals=0;m<W.maxMorphNormals;m++)0<=f[\"morphNormal\"+m]&&c.numSupportedMorphNormals++;f=g.__webglShader.uniforms;(c instanceof THREE.ShaderMaterial||c instanceof THREE.RawShaderMaterial)&&!0!==c.clipping||(g.numClippingPlanes=ba.numPlanes,f.clippingPlanes=ba.uniform);c.lights&&(g.lightsHash=\r\n\tS.hash,f.ambientLightColor.value=S.ambient,f.directionalLights.value=S.directional,f.spotLights.value=S.spot,f.pointLights.value=S.point,f.hemisphereLights.value=S.hemi,f.directionalShadowMap.value=S.directionalShadowMap,f.directionalShadowMatrix.value=S.directionalShadowMatrix,f.spotShadowMap.value=S.spotShadowMap,f.spotShadowMatrix.value=S.spotShadowMatrix,f.pointShadowMap.value=S.pointShadowMap,f.pointShadowMatrix.value=S.pointShadowMatrix);m=g.program.getUniforms();m=THREE.WebGLUniforms.seqWithValue(m.seq,\r\n\tf);g.uniformsList=m;g.dynamicUniforms=THREE.WebGLUniforms.splitDynamic(m,f)}c.needsUpdate=!1}var n=!1,p=l=!1,g=e.program,m=g.getUniforms(),f=e.__webglShader.uniforms;g.id!==fa&&(t.useProgram(g.program),fa=g.id,p=l=n=!0);c.id!==Z&&(Z=c.id,l=!0);if(n||a!==ea){m.set(t,a,\"projectionMatrix\");ca.logarithmicDepthBuffer&&m.setValue(t,\"logDepthBufFC\",2/(Math.log(a.far+1)/Math.LN2));a!==ea&&(ea=a,p=l=!0);if(c instanceof THREE.ShaderMaterial||c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshStandardMaterial||\r\n\tc.envMap)n=m.map.cameraPosition,void 0!==n&&n.setValue(t,X.setFromMatrixPosition(a.matrixWorld));(c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshBasicMaterial||c instanceof THREE.MeshStandardMaterial||c instanceof THREE.ShaderMaterial||c.skinning)&&m.setValue(t,\"viewMatrix\",a.matrixWorldInverse);m.set(t,W,\"toneMappingExposure\");m.set(t,W,\"toneMappingWhitePoint\")}c.skinning&&(m.setOptional(t,d,\"bindMatrix\"),m.setOptional(t,d,\"bindMatrixInverse\"),\r\n\tn=d.skeleton)&&(ca.floatVertexTextures&&n.useVertexTexture?(m.set(t,n,\"boneTexture\"),m.set(t,n,\"boneTextureWidth\"),m.set(t,n,\"boneTextureHeight\")):m.setOptional(t,n,\"boneMatrices\"));if(l){c.lights&&(l=p,f.ambientLightColor.needsUpdate=l,f.directionalLights.needsUpdate=l,f.pointLights.needsUpdate=l,f.spotLights.needsUpdate=l,f.hemisphereLights.needsUpdate=l);b&&c.fog&&(f.fogColor.value=b.color,b instanceof THREE.Fog?(f.fogNear.value=b.near,f.fogFar.value=b.far):b instanceof THREE.FogExp2&&(f.fogDensity.value=\r\n\tb.density));if(c instanceof THREE.MeshBasicMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshStandardMaterial||c instanceof THREE.MeshDepthMaterial){f.opacity.value=c.opacity;f.diffuse.value=c.color;c.emissive&&f.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity);f.map.value=c.map;f.specularMap.value=c.specularMap;f.alphaMap.value=c.alphaMap;c.aoMap&&(f.aoMap.value=c.aoMap,f.aoMapIntensity.value=c.aoMapIntensity);var q;\r\n\tc.map?q=c.map:c.specularMap?q=c.specularMap:c.displacementMap?q=c.displacementMap:c.normalMap?q=c.normalMap:c.bumpMap?q=c.bumpMap:c.roughnessMap?q=c.roughnessMap:c.metalnessMap?q=c.metalnessMap:c.alphaMap?q=c.alphaMap:c.emissiveMap&&(q=c.emissiveMap);void 0!==q&&(q instanceof THREE.WebGLRenderTarget&&(q=q.texture),b=q.offset,q=q.repeat,f.offsetRepeat.value.set(b.x,b.y,q.x,q.y));f.envMap.value=c.envMap;f.flipEnvMap.value=c.envMap instanceof THREE.CubeTexture?-1:1;f.reflectivity.value=c.reflectivity;\r\n\tf.refractionRatio.value=c.refractionRatio}c instanceof THREE.LineBasicMaterial?(f.diffuse.value=c.color,f.opacity.value=c.opacity):c instanceof THREE.LineDashedMaterial?(f.diffuse.value=c.color,f.opacity.value=c.opacity,f.dashSize.value=c.dashSize,f.totalSize.value=c.dashSize+c.gapSize,f.scale.value=c.scale):c instanceof THREE.PointsMaterial?(f.diffuse.value=c.color,f.opacity.value=c.opacity,f.size.value=c.size*$,f.scale.value=.5*z.clientHeight,f.map.value=c.map,null!==c.map&&(q=c.map.offset,c=c.map.repeat,\r\n\tf.offsetRepeat.value.set(q.x,q.y,c.x,c.y))):c instanceof THREE.MeshLambertMaterial?(c.lightMap&&(f.lightMap.value=c.lightMap,f.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(f.emissiveMap.value=c.emissiveMap)):c instanceof THREE.MeshPhongMaterial?(f.specular.value=c.specular,f.shininess.value=Math.max(c.shininess,1E-4),c.lightMap&&(f.lightMap.value=c.lightMap,f.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(f.emissiveMap.value=c.emissiveMap),c.bumpMap&&(f.bumpMap.value=\r\n\tc.bumpMap,f.bumpScale.value=c.bumpScale),c.normalMap&&(f.normalMap.value=c.normalMap,f.normalScale.value.copy(c.normalScale)),c.displacementMap&&(f.displacementMap.value=c.displacementMap,f.displacementScale.value=c.displacementScale,f.displacementBias.value=c.displacementBias)):c instanceof THREE.MeshPhysicalMaterial?v(f,c):c instanceof THREE.MeshStandardMaterial?v(f,c):c instanceof THREE.MeshDepthMaterial?c.displacementMap&&(f.displacementMap.value=c.displacementMap,f.displacementScale.value=c.displacementScale,\r\n\tf.displacementBias.value=c.displacementBias):c instanceof THREE.MeshNormalMaterial&&(f.opacity.value=c.opacity);THREE.WebGLUniforms.upload(t,e.uniformsList,f,W)}m.set(t,d,\"modelViewMatrix\");m.set(t,d,\"normalMatrix\");m.setValue(t,\"modelMatrix\",d.matrixWorld);e=e.dynamicUniforms;null!==e&&(THREE.WebGLUniforms.evalDynamic(e,f,d,a),THREE.WebGLUniforms.upload(t,e,f,W));return g}function v(a,b){a.roughness.value=b.roughness;a.metalness.value=b.metalness;b.roughnessMap&&(a.roughnessMap.value=b.roughnessMap);\r\n\tb.metalnessMap&&(a.metalnessMap.value=b.metalnessMap);b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity);b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap);b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale);b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale));b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias);b.envMap&&\r\n\t(a.envMapIntensity.value=b.envMapIntensity)}function C(a,b,c){c?(t.texParameteri(a,t.TEXTURE_WRAP_S,G(b.wrapS)),t.texParameteri(a,t.TEXTURE_WRAP_T,G(b.wrapT)),t.texParameteri(a,t.TEXTURE_MAG_FILTER,G(b.magFilter)),t.texParameteri(a,t.TEXTURE_MIN_FILTER,G(b.minFilter))):(t.texParameteri(a,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(a,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),b.wrapS===THREE.ClampToEdgeWrapping&&b.wrapT===THREE.ClampToEdgeWrapping||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\",\r\n\tb),t.texParameteri(a,t.TEXTURE_MAG_FILTER,B(b.magFilter)),t.texParameteri(a,t.TEXTURE_MIN_FILTER,B(b.minFilter)),b.minFilter!==THREE.NearestFilter&&b.minFilter!==THREE.LinearFilter&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\",b));!(c=V.get(\"EXT_texture_filter_anisotropic\"))||b.type===THREE.FloatType&&null===V.get(\"OES_texture_float_linear\")||b.type===THREE.HalfFloatType&&null===V.get(\"OES_texture_half_float_linear\")||\r\n\t!(1<b.anisotropy||T.get(b).__currentAnisotropy)||(t.texParameterf(a,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,W.getMaxAnisotropy())),T.get(b).__currentAnisotropy=b.anisotropy)}function w(a,b){if(a.width>b||a.height>b){var c=b/Math.max(a.width,a.height),d=document.createElement(\"canvas\");d.width=Math.floor(a.width*c);d.height=Math.floor(a.height*c);d.getContext(\"2d\").drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height);console.warn(\"THREE.WebGLRenderer: image is too big (\"+a.width+\"x\"+a.height+\r\n\t\"). Resized to \"+d.width+\"x\"+d.height,a);return d}return a}function D(a){return THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height)}function A(a,b,c,d){var e=G(b.texture.format),f=G(b.texture.type);J.texImage2D(d,0,e,b.width,b.height,0,e,f,null);t.bindFramebuffer(t.FRAMEBUFFER,a);t.framebufferTexture2D(t.FRAMEBUFFER,c,d,T.get(b.texture).__webglTexture,0);t.bindFramebuffer(t.FRAMEBUFFER,null)}function y(a,b){t.bindRenderbuffer(t.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,\r\n\tt.DEPTH_COMPONENT16,b.width,b.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,b.width,b.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,a)):t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,b.width,b.height);t.bindRenderbuffer(t.RENDERBUFFER,null)}function B(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?\r\n\tt.NEAREST:t.LINEAR}function G(a){var b;if(a===THREE.RepeatWrapping)return t.REPEAT;if(a===THREE.ClampToEdgeWrapping)return t.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return t.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return t.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return t.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return t.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return t.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return t.LINEAR_MIPMAP_NEAREST;if(a===\r\n\tTHREE.LinearMipMapLinearFilter)return t.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return t.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return t.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return t.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return t.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return t.BYTE;if(a===THREE.ShortType)return t.SHORT;if(a===THREE.UnsignedShortType)return t.UNSIGNED_SHORT;if(a===THREE.IntType)return t.INT;if(a===THREE.UnsignedIntType)return t.UNSIGNED_INT;\r\n\tif(a===THREE.FloatType)return t.FLOAT;b=V.get(\"OES_texture_half_float\");if(null!==b&&a===THREE.HalfFloatType)return b.HALF_FLOAT_OES;if(a===THREE.AlphaFormat)return t.ALPHA;if(a===THREE.RGBFormat)return t.RGB;if(a===THREE.RGBAFormat)return t.RGBA;if(a===THREE.LuminanceFormat)return t.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return t.LUMINANCE_ALPHA;if(a===THREE.DepthFormat)return t.DEPTH_COMPONENT;if(a===THREE.AddEquation)return t.FUNC_ADD;if(a===THREE.SubtractEquation)return t.FUNC_SUBTRACT;if(a===\r\n\tTHREE.ReverseSubtractEquation)return t.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return t.ZERO;if(a===THREE.OneFactor)return t.ONE;if(a===THREE.SrcColorFactor)return t.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return t.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return t.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return t.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return t.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return t.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return t.DST_COLOR;\r\n\tif(a===THREE.OneMinusDstColorFactor)return t.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return t.SRC_ALPHA_SATURATE;b=V.get(\"WEBGL_compressed_texture_s3tc\");if(null!==b){if(a===THREE.RGB_S3TC_DXT1_Format)return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return b.COMPRESSED_RGBA_S3TC_DXT5_EXT}b=V.get(\"WEBGL_compressed_texture_pvrtc\");\r\n\tif(null!==b){if(a===THREE.RGB_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===THREE.RGB_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===THREE.RGBA_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(a===THREE.RGBA_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}b=V.get(\"WEBGL_compressed_texture_etc1\");if(null!==b&&a===THREE.RGB_ETC1_Format)return b.COMPRESSED_RGB_ETC1_WEBGL;b=V.get(\"EXT_blend_minmax\");if(null!==b){if(a===THREE.MinEquation)return b.MIN_EXT;\r\n\tif(a===THREE.MaxEquation)return b.MAX_EXT}return 0}console.log(\"THREE.WebGLRenderer\",THREE.REVISION);a=a||{};var z=void 0!==a.canvas?a.canvas:document.createElement(\"canvas\"),H=void 0!==a.context?a.context:null,M=void 0!==a.alpha?a.alpha:!1,O=void 0!==a.depth?a.depth:!0,N=void 0!==a.stencil?a.stencil:!0,E=void 0!==a.antialias?a.antialias:!1,K=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,I=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,L=[],P=[],Q=-1,R=[],F=-1,da=new Float32Array(8),\r\n\tU=[],Y=[];this.domElement=z;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.clippingPlanes=[];this.localClippingEnabled=!1;this.gammaFactor=2;this.physicallyCorrectLights=this.gammaOutput=this.gammaInput=!1;this.toneMapping=THREE.LinearToneMapping;this.toneMappingWhitePoint=this.toneMappingExposure=1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;var W=this,fa=null,la=null,ga=null,Z=-1,oa=\"\",ea=null,ra=\r\n\tnew THREE.Vector4,Aa=null,ma=new THREE.Vector4,ta=0,aa=new THREE.Color(0),ia=0,va=z.width,wa=z.height,$=1,ya=new THREE.Vector4(0,0,va,wa),Ca=!1,na=new THREE.Vector4(0,0,va,wa),Ba=new THREE.Frustum,ba=new THREE.WebGLClipping,ua=!1,za=!1,ka=new THREE.Sphere,sa=new THREE.Matrix4,X=new THREE.Vector3,S={hash:\"\",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},\r\n\tja={geometries:0,textures:0},ha={calls:0,vertices:0,faces:0,points:0};this.info={render:ha,memory:ja,programs:null};var t;try{M={alpha:M,depth:O,stencil:N,antialias:E,premultipliedAlpha:K,preserveDrawingBuffer:I};t=H||z.getContext(\"webgl\",M)||z.getContext(\"experimental-webgl\",M);if(null===t){if(null!==z.getContext(\"webgl\"))throw\"Error creating WebGL context with your selected attributes.\";throw\"Error creating WebGL context.\";}void 0===t.getShaderPrecisionFormat&&(t.getShaderPrecisionFormat=function(){return{rangeMin:1,\r\n\trangeMax:1,precision:1}});z.addEventListener(\"webglcontextlost\",e,!1)}catch(Fa){console.error(\"THREE.WebGLRenderer: \"+Fa)}var Da=\"undefined\"!==typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,V=new THREE.WebGLExtensions(t);V.get(\"WEBGL_depth_texture\");V.get(\"OES_texture_float\");V.get(\"OES_texture_float_linear\");V.get(\"OES_texture_half_float\");V.get(\"OES_texture_half_float_linear\");V.get(\"OES_standard_derivatives\");V.get(\"ANGLE_instanced_arrays\");V.get(\"OES_element_index_uint\")&&\r\n\t(THREE.BufferGeometry.MaxIndex=4294967296);var ca=new THREE.WebGLCapabilities(t,V,a),J=new THREE.WebGLState(t,V,G),T=new THREE.WebGLProperties,qa=new THREE.WebGLObjects(t,T,this.info),pa=new THREE.WebGLPrograms(this,ca),xa=new THREE.WebGLLights;this.info.programs=pa.programs;var Ga=new THREE.WebGLBufferRenderer(t,V,ha),Ha=new THREE.WebGLIndexedBufferRenderer(t,V,ha);c();this.context=t;this.capabilities=ca;this.extensions=V;this.properties=T;this.state=J;var Ea=new THREE.WebGLShadowMap(this,S,qa);\r\n\tthis.shadowMap=Ea;var Ia=new THREE.SpritePlugin(this,U),Ja=new THREE.LensFlarePlugin(this,Y);this.getContext=function(){return t};this.getContextAttributes=function(){return t.getContextAttributes()};this.forceContextLoss=function(){V.get(\"WEBGL_lose_context\").loseContext()};this.getMaxAnisotropy=function(){var a;return function(){if(void 0!==a)return a;var b=V.get(\"EXT_texture_filter_anisotropic\");return a=null!==b?t.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}}();this.getPrecision=function(){return ca.precision};\r\n\tthis.getPixelRatio=function(){return $};this.setPixelRatio=function(a){void 0!==a&&($=a,this.setSize(na.z,na.w,!1))};this.getSize=function(){return{width:va,height:wa}};this.setSize=function(a,b,c){va=a;wa=b;z.width=a*$;z.height=b*$;!1!==c&&(z.style.width=a+\"px\",z.style.height=b+\"px\");this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){J.viewport(na.set(a,b,c,d))};this.setScissor=function(a,b,c,d){J.scissor(ya.set(a,b,c,d))};this.setScissorTest=function(a){J.setScissorTest(Ca=a)};this.getClearColor=\r\n\tfunction(){return aa};this.setClearColor=function(a,c){aa.set(a);ia=void 0!==c?c:1;b(aa.r,aa.g,aa.b,ia)};this.getClearAlpha=function(){return ia};this.setClearAlpha=function(a){ia=a;b(aa.r,aa.g,aa.b,ia)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=t.COLOR_BUFFER_BIT;if(void 0===b||b)d|=t.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=t.STENCIL_BUFFER_BIT;t.clear(d)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,\r\n\t!1,!0)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.resetGLState=d;this.dispose=function(){z.removeEventListener(\"webglcontextlost\",e,!1)};this.renderBufferImmediate=function(a,b,c){J.initAttributes();var d=T.get(a);a.hasPositions&&!d.position&&(d.position=t.createBuffer());a.hasNormals&&!d.normal&&(d.normal=t.createBuffer());a.hasUvs&&!d.uv&&(d.uv=t.createBuffer());a.hasColors&&!d.color&&(d.color=t.createBuffer());b=b.getAttributes();a.hasPositions&&(t.bindBuffer(t.ARRAY_BUFFER,\r\n\td.position),t.bufferData(t.ARRAY_BUFFER,a.positionArray,t.DYNAMIC_DRAW),J.enableAttribute(b.position),t.vertexAttribPointer(b.position,3,t.FLOAT,!1,0,0));if(a.hasNormals){t.bindBuffer(t.ARRAY_BUFFER,d.normal);if(\"MeshPhongMaterial\"!==c.type&&\"MeshStandardMaterial\"!==c.type&&\"MeshPhysicalMaterial\"!==c.type&&c.shading===THREE.FlatShading)for(var e=0,f=3*a.count;e<f;e+=9){var g=a.normalArray,h=(g[e+0]+g[e+3]+g[e+6])/3,k=(g[e+1]+g[e+4]+g[e+7])/3,m=(g[e+2]+g[e+5]+g[e+8])/3;g[e+0]=h;g[e+1]=k;g[e+2]=m;g[e+\r\n\t3]=h;g[e+4]=k;g[e+5]=m;g[e+6]=h;g[e+7]=k;g[e+8]=m}t.bufferData(t.ARRAY_BUFFER,a.normalArray,t.DYNAMIC_DRAW);J.enableAttribute(b.normal);t.vertexAttribPointer(b.normal,3,t.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(t.bindBuffer(t.ARRAY_BUFFER,d.uv),t.bufferData(t.ARRAY_BUFFER,a.uvArray,t.DYNAMIC_DRAW),J.enableAttribute(b.uv),t.vertexAttribPointer(b.uv,2,t.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(t.bindBuffer(t.ARRAY_BUFFER,d.color),t.bufferData(t.ARRAY_BUFFER,a.colorArray,t.DYNAMIC_DRAW),\r\n\tJ.enableAttribute(b.color),t.vertexAttribPointer(b.color,3,t.FLOAT,!1,0,0));J.disableUnusedAttributes();t.drawArrays(t.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){u(d);var g=x(a,b,d,e),h=!1;a=c.id+\"_\"+g.id+\"_\"+d.wireframe;a!==oa&&(oa=a,h=!0);b=e.morphTargetInfluences;if(void 0!==b){a=[];for(var k=0,h=b.length;k<h;k++){var m=b[k];a.push([m,k])}a.sort(l);8<a.length&&(a.length=8);for(var p=c.morphAttributes,k=0,h=a.length;k<h;k++)m=a[k],da[k]=m[0],0!==m[0]?(b=m[1],!0===\r\n\td.morphTargets&&p.position&&c.addAttribute(\"morphTarget\"+k,p.position[b]),!0===d.morphNormals&&p.normal&&c.addAttribute(\"morphNormal\"+k,p.normal[b])):(!0===d.morphTargets&&c.removeAttribute(\"morphTarget\"+k),!0===d.morphNormals&&c.removeAttribute(\"morphNormal\"+k));g.getUniforms().setValue(t,\"morphTargetInfluences\",da);h=!0}b=c.index;k=c.attributes.position;!0===d.wireframe&&(b=qa.getWireframeAttribute(c));null!==b?(a=Ha,a.setIndex(b)):a=Ga;if(h){a:{var h=void 0,n;if(c instanceof THREE.InstancedBufferGeometry&&\r\n\t(n=V.get(\"ANGLE_instanced_arrays\"),null===n)){console.error(\"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");break a}void 0===h&&(h=0);J.initAttributes();var m=c.attributes,g=g.getAttributes(),p=d.defaultAttributeValues,q;for(q in g){var r=g[q];if(0<=r){var s=m[q];if(void 0!==s){var v=t.FLOAT,w=s.array,E=s.normalized;w instanceof Float32Array?v=t.FLOAT:w instanceof Float64Array?console.warn(\"Unsupported data buffer format: Float64Array\"):\r\n\tw instanceof Uint16Array?v=t.UNSIGNED_SHORT:w instanceof Int16Array?v=t.SHORT:w instanceof Uint32Array?v=t.UNSIGNED_INT:w instanceof Int32Array?v=t.INT:w instanceof Int8Array?v=t.BYTE:w instanceof Uint8Array&&(v=t.UNSIGNED_BYTE);var w=s.itemSize,L=qa.getAttributeBuffer(s);if(s instanceof THREE.InterleavedBufferAttribute){var y=s.data,C=y.stride,s=s.offset;y instanceof THREE.InstancedInterleavedBuffer?(J.enableAttributeAndDivisor(r,y.meshPerAttribute,n),void 0===c.maxInstancedCount&&(c.maxInstancedCount=\r\n\ty.meshPerAttribute*y.count)):J.enableAttribute(r);t.bindBuffer(t.ARRAY_BUFFER,L);t.vertexAttribPointer(r,w,v,E,C*y.array.BYTES_PER_ELEMENT,(h*C+s)*y.array.BYTES_PER_ELEMENT)}else s instanceof THREE.InstancedBufferAttribute?(J.enableAttributeAndDivisor(r,s.meshPerAttribute,n),void 0===c.maxInstancedCount&&(c.maxInstancedCount=s.meshPerAttribute*s.count)):J.enableAttribute(r),t.bindBuffer(t.ARRAY_BUFFER,L),t.vertexAttribPointer(r,w,v,E,0,h*w*s.array.BYTES_PER_ELEMENT)}else if(void 0!==p&&(v=p[q],void 0!==\r\n\tv))switch(v.length){case 2:t.vertexAttrib2fv(r,v);break;case 3:t.vertexAttrib3fv(r,v);break;case 4:t.vertexAttrib4fv(r,v);break;default:t.vertexAttrib1fv(r,v)}}}J.disableUnusedAttributes()}null!==b&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,qa.getAttributeBuffer(b))}n=Infinity;null!==b?n=b.count:void 0!==k&&(n=k.count);q=c.drawRange.start;b=c.drawRange.count;k=null!==f?f.start:0;h=null!==f?f.count:Infinity;f=Math.max(0,q,k);n=Math.min(0+n,q+b,k+h)-1;n=Math.max(0,n-f+1);if(e instanceof THREE.Mesh)if(!0===\r\n\td.wireframe)J.setLineWidth(d.wireframeLinewidth*(null===la?$:1)),a.setMode(t.LINES);else switch(e.drawMode){case THREE.TrianglesDrawMode:a.setMode(t.TRIANGLES);break;case THREE.TriangleStripDrawMode:a.setMode(t.TRIANGLE_STRIP);break;case THREE.TriangleFanDrawMode:a.setMode(t.TRIANGLE_FAN)}else e instanceof THREE.Line?(d=d.linewidth,void 0===d&&(d=1),J.setLineWidth(d*(null===la?$:1)),e instanceof THREE.LineSegments?a.setMode(t.LINES):a.setMode(t.LINE_STRIP)):e instanceof THREE.Points&&a.setMode(t.POINTS);\r\n\tc instanceof THREE.InstancedBufferGeometry?0<c.maxInstancedCount&&a.renderInstances(c,f,n):a.render(f,n)};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");else{var e=a.fog;oa=\"\";Z=-1;ea=null;!0===a.autoUpdate&&a.updateMatrixWorld();null===b.parent&&b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);sa.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);Ba.setFromMatrix(sa);\r\n\tL.length=0;F=Q=-1;U.length=0;Y.length=0;za=this.localClippingEnabled;ua=ba.init(this.clippingPlanes,za,b);r(a,b);P.length=Q+1;R.length=F+1;!0===W.sortObjects&&(P.sort(n),R.sort(p));ua&&ba.beginShadows();for(var f=L,g=0,h=0,k=f.length;h<k;h++){var m=f[h];m.castShadow&&(S.shadows[g++]=m)}S.shadows.length=g;Ea.render(a,b);for(var f=L,l=m=0,q=0,v,x,u,w,E=b.matrixWorldInverse,y=0,C=0,A=0,I=0,g=0,h=f.length;g<h;g++)if(k=f[g],v=k.color,x=k.intensity,u=k.distance,w=k.shadow&&k.shadow.map?k.shadow.map.texture:\r\n\tnull,k instanceof THREE.AmbientLight)m+=v.r*x,l+=v.g*x,q+=v.b*x;else if(k instanceof THREE.DirectionalLight){var z=xa.get(k);z.color.copy(k.color).multiplyScalar(k.intensity);z.direction.setFromMatrixPosition(k.matrixWorld);X.setFromMatrixPosition(k.target.matrixWorld);z.direction.sub(X);z.direction.transformDirection(E);if(z.shadow=k.castShadow)z.shadowBias=k.shadow.bias,z.shadowRadius=k.shadow.radius,z.shadowMapSize=k.shadow.mapSize;S.directionalShadowMap[y]=w;S.directionalShadowMatrix[y]=k.shadow.matrix;\r\n\tS.directional[y++]=z}else if(k instanceof THREE.SpotLight){z=xa.get(k);z.position.setFromMatrixPosition(k.matrixWorld);z.position.applyMatrix4(E);z.color.copy(v).multiplyScalar(x);z.distance=u;z.direction.setFromMatrixPosition(k.matrixWorld);X.setFromMatrixPosition(k.target.matrixWorld);z.direction.sub(X);z.direction.transformDirection(E);z.coneCos=Math.cos(k.angle);z.penumbraCos=Math.cos(k.angle*(1-k.penumbra));z.decay=0===k.distance?0:k.decay;if(z.shadow=k.castShadow)z.shadowBias=k.shadow.bias,\r\n\tz.shadowRadius=k.shadow.radius,z.shadowMapSize=k.shadow.mapSize;S.spotShadowMap[A]=w;S.spotShadowMatrix[A]=k.shadow.matrix;S.spot[A++]=z}else if(k instanceof THREE.PointLight){z=xa.get(k);z.position.setFromMatrixPosition(k.matrixWorld);z.position.applyMatrix4(E);z.color.copy(k.color).multiplyScalar(k.intensity);z.distance=k.distance;z.decay=0===k.distance?0:k.decay;if(z.shadow=k.castShadow)z.shadowBias=k.shadow.bias,z.shadowRadius=k.shadow.radius,z.shadowMapSize=k.shadow.mapSize;S.pointShadowMap[C]=\r\n\tw;void 0===S.pointShadowMatrix[C]&&(S.pointShadowMatrix[C]=new THREE.Matrix4);X.setFromMatrixPosition(k.matrixWorld).negate();S.pointShadowMatrix[C].identity().setPosition(X);S.point[C++]=z}else k instanceof THREE.HemisphereLight&&(z=xa.get(k),z.direction.setFromMatrixPosition(k.matrixWorld),z.direction.transformDirection(E),z.direction.normalize(),z.skyColor.copy(k.color).multiplyScalar(x),z.groundColor.copy(k.groundColor).multiplyScalar(x),S.hemi[I++]=z);S.ambient[0]=m;S.ambient[1]=l;S.ambient[2]=\r\n\tq;S.directional.length=y;S.spot.length=A;S.point.length=C;S.hemi.length=I;S.hash=y+\",\"+C+\",\"+A+\",\"+I+\",\"+S.shadows.length;ua&&ba.endShadows();ha.calls=0;ha.vertices=0;ha.faces=0;ha.points=0;void 0===c&&(c=null);this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);a.overrideMaterial?(d=a.overrideMaterial,s(P,b,e,d),s(R,b,e,d)):(J.setBlending(THREE.NoBlending),s(P,b,e),s(R,b,e));Ia.render(a,b);Ja.render(a,b,ma);c&&(a=c.texture,a.generateMipmaps&&\r\n\tD(c)&&a.minFilter!==THREE.NearestFilter&&a.minFilter!==THREE.LinearFilter&&(a=c instanceof THREE.WebGLRenderTargetCube?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,c=T.get(c.texture).__webglTexture,J.bindTexture(a,c),t.generateMipmap(a),J.bindTexture(a,null)));J.setDepthTest(!0);J.setDepthWrite(!0);J.setColorWrite(!0)}};this.setFaceCulling=function(a,b){J.setCullFace(a);J.setFlipSided(b===THREE.FrontFaceDirectionCW)};this.allocTextureUnit=function(){var a=ta;a>=ca.maxTextures&&console.warn(\"WebGLRenderer: trying to use \"+\r\n\ta+\" texture units while this GPU supports only \"+ca.maxTextures);ta+=1;return a};this.setTexture2D=function(){var a=!1;return function(b,c){b instanceof THREE.WebGLRenderTarget&&(a||(console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\"),a=!0),b=b.texture);var d=b,e=T.get(d);if(0<d.version&&e.__version!==d.version){var g=d.image;if(void 0===g)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\",d);\r\n\telse if(!1===g.complete)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\",d);else{void 0===e.__webglInit&&(e.__webglInit=!0,d.addEventListener(\"dispose\",f),e.__webglTexture=t.createTexture(),ja.textures++);J.activeTexture(t.TEXTURE0+c);J.bindTexture(t.TEXTURE_2D,e.__webglTexture);t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,d.flipY);t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,d.premultiplyAlpha);t.pixelStorei(t.UNPACK_ALIGNMENT,d.unpackAlignment);var h=w(d.image,ca.maxTextureSize);\r\n\tif((d.wrapS!==THREE.ClampToEdgeWrapping||d.wrapT!==THREE.ClampToEdgeWrapping||d.minFilter!==THREE.NearestFilter&&d.minFilter!==THREE.LinearFilter)&&!1===D(h))if(g=h,g instanceof HTMLImageElement||g instanceof HTMLCanvasElement){var k=document.createElement(\"canvas\");k.width=THREE.Math.nearestPowerOfTwo(g.width);k.height=THREE.Math.nearestPowerOfTwo(g.height);k.getContext(\"2d\").drawImage(g,0,0,k.width,k.height);console.warn(\"THREE.WebGLRenderer: image is not power of two (\"+g.width+\"x\"+g.height+\"). Resized to \"+\r\n\tk.width+\"x\"+k.height,g);h=k}else h=g;var g=D(h),k=G(d.format),m=G(d.type);C(t.TEXTURE_2D,d,g);var l=d.mipmaps;if(d instanceof THREE.DepthTexture){l=t.DEPTH_COMPONENT;if(d.type===THREE.FloatType){if(!Da)throw Error(\"Float Depth Texture only supported in WebGL2.0\");l=t.DEPTH_COMPONENT32F}else Da&&(l=t.DEPTH_COMPONENT16);J.texImage2D(t.TEXTURE_2D,0,l,h.width,h.height,0,k,m,null)}else if(d instanceof THREE.DataTexture)if(0<l.length&&g){for(var n=0,p=l.length;n<p;n++)h=l[n],J.texImage2D(t.TEXTURE_2D,n,\r\n\tk,h.width,h.height,0,k,m,h.data);d.generateMipmaps=!1}else J.texImage2D(t.TEXTURE_2D,0,k,h.width,h.height,0,k,m,h.data);else if(d instanceof THREE.CompressedTexture)for(n=0,p=l.length;n<p;n++)h=l[n],d.format!==THREE.RGBAFormat&&d.format!==THREE.RGBFormat?-1<J.getCompressedTextureFormats().indexOf(k)?J.compressedTexImage2D(t.TEXTURE_2D,n,k,h.width,h.height,0,h.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):J.texImage2D(t.TEXTURE_2D,\r\n\tn,k,h.width,h.height,0,k,m,h.data);else if(0<l.length&&g){n=0;for(p=l.length;n<p;n++)h=l[n],J.texImage2D(t.TEXTURE_2D,n,k,k,m,h);d.generateMipmaps=!1}else J.texImage2D(t.TEXTURE_2D,0,k,k,m,h);d.generateMipmaps&&g&&t.generateMipmap(t.TEXTURE_2D);e.__version=d.version;if(d.onUpdate)d.onUpdate(d)}}else J.activeTexture(t.TEXTURE0+c),J.bindTexture(t.TEXTURE_2D,e.__webglTexture)}}();this.setTexture=function(){var a=!1;return function(b,c){a||(console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\"),\r\n\ta=!0);W.setTexture2D(b,c)}}();this.setTextureCube=function(){var a=!1;return function(b,c){b instanceof THREE.WebGLRenderTargetCube&&(a||(console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),a=!0),b=b.texture);if(b instanceof THREE.CubeTexture||Array.isArray(b.image)&&6===b.image.length){var d=b,e=T.get(d);if(6===d.image.length)if(0<d.version&&e.__version!==d.version){e.__image__webglTextureCube||(d.addEventListener(\"dispose\",\r\n\tf),e.__image__webglTextureCube=t.createTexture(),ja.textures++);J.activeTexture(t.TEXTURE0+c);J.bindTexture(t.TEXTURE_CUBE_MAP,e.__image__webglTextureCube);t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,d.flipY);for(var g=d instanceof THREE.CompressedTexture,h=d.image[0]instanceof THREE.DataTexture,k=[],m=0;6>m;m++)k[m]=!W.autoScaleCubemaps||g||h?h?d.image[m].image:d.image[m]:w(d.image[m],ca.maxCubemapSize);var l=D(k[0]),n=G(d.format),p=G(d.type);C(t.TEXTURE_CUBE_MAP,d,l);for(m=0;6>m;m++)if(g)for(var q,r=k[m].mipmaps,\r\n\ts=0,x=r.length;s<x;s++)q=r[s],d.format!==THREE.RGBAFormat&&d.format!==THREE.RGBFormat?-1<J.getCompressedTextureFormats().indexOf(n)?J.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,s,n,q.width,q.height,0,q.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):J.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,s,n,q.width,q.height,0,n,p,q.data);else h?J.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,n,k[m].width,k[m].height,0,n,p,k[m].data):\r\n\tJ.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,n,n,p,k[m]);d.generateMipmaps&&l&&t.generateMipmap(t.TEXTURE_CUBE_MAP);e.__version=d.version;if(d.onUpdate)d.onUpdate(d)}else J.activeTexture(t.TEXTURE0+c),J.bindTexture(t.TEXTURE_CUBE_MAP,e.__image__webglTextureCube)}else d=b,J.activeTexture(t.TEXTURE0+c),J.bindTexture(t.TEXTURE_CUBE_MAP,T.get(d).__webglTexture)}}();this.getCurrentRenderTarget=function(){return la};this.setRenderTarget=function(a){if((la=a)&&void 0===T.get(a).__webglFramebuffer){var b=\r\n\tT.get(a),c=T.get(a.texture);a.addEventListener(\"dispose\",g);c.__webglTexture=t.createTexture();ja.textures++;var d=a instanceof THREE.WebGLRenderTargetCube,e=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height);if(d){b.__webglFramebuffer=[];for(var f=0;6>f;f++)b.__webglFramebuffer[f]=t.createFramebuffer()}else b.__webglFramebuffer=t.createFramebuffer();if(d){J.bindTexture(t.TEXTURE_CUBE_MAP,c.__webglTexture);C(t.TEXTURE_CUBE_MAP,a.texture,e);for(f=0;6>f;f++)A(b.__webglFramebuffer[f],\r\n\ta,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+f);a.texture.generateMipmaps&&e&&t.generateMipmap(t.TEXTURE_CUBE_MAP);J.bindTexture(t.TEXTURE_CUBE_MAP,null)}else J.bindTexture(t.TEXTURE_2D,c.__webglTexture),C(t.TEXTURE_2D,a.texture,e),A(b.__webglFramebuffer,a,t.COLOR_ATTACHMENT0,t.TEXTURE_2D),a.texture.generateMipmaps&&e&&t.generateMipmap(t.TEXTURE_2D),J.bindTexture(t.TEXTURE_2D,null);if(a.depthBuffer){b=T.get(a);c=a instanceof THREE.WebGLRenderTargetCube;if(a.depthTexture){if(c)throw Error(\"target.depthTexture not supported in Cube render targets\");\r\n\tif(a instanceof THREE.WebGLRenderTargetCube)throw Error(\"Depth Texture with cube render targets is not supported!\");t.bindFramebuffer(t.FRAMEBUFFER,b.__webglFramebuffer);if(!(a.depthTexture instanceof THREE.DepthTexture))throw Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");T.get(a.depthTexture).__webglTexture&&a.depthTexture.image.width===a.width&&a.depthTexture.image.height===a.height||(a.depthTexture.image.width=a.width,a.depthTexture.image.height=a.height,a.depthTexture.needsUpdate=\r\n\t!0);W.setTexture2D(a.depthTexture,0);b=T.get(a.depthTexture).__webglTexture;t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,b,0)}else if(c)for(b.__webglDepthbuffer=[],c=0;6>c;c++)t.bindFramebuffer(t.FRAMEBUFFER,b.__webglFramebuffer[c]),b.__webglDepthbuffer[c]=t.createRenderbuffer(),y(b.__webglDepthbuffer[c],a);else t.bindFramebuffer(t.FRAMEBUFFER,b.__webglFramebuffer),b.__webglDepthbuffer=t.createRenderbuffer(),y(b.__webglDepthbuffer,a);t.bindFramebuffer(t.FRAMEBUFFER,null)}}b=\r\n\ta instanceof THREE.WebGLRenderTargetCube;a?(c=T.get(a),c=b?c.__webglFramebuffer[a.activeCubeFace]:c.__webglFramebuffer,ra.copy(a.scissor),Aa=a.scissorTest,ma.copy(a.viewport)):(c=null,ra.copy(ya).multiplyScalar($),Aa=Ca,ma.copy(na).multiplyScalar($));ga!==c&&(t.bindFramebuffer(t.FRAMEBUFFER,c),ga=c);J.scissor(ra);J.setScissorTest(Aa);J.viewport(ma);b&&(b=T.get(a.texture),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+a.activeCubeFace,b.__webglTexture,a.activeMipMapLevel))};\r\n\tthis.readRenderTargetPixels=function(a,b,c,d,e,f){if(!1===a instanceof THREE.WebGLRenderTarget)console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");else{var g=T.get(a).__webglFramebuffer;if(g){var h=!1;g!==ga&&(t.bindFramebuffer(t.FRAMEBUFFER,g),h=!0);try{var k=a.texture;k.format!==THREE.RGBAFormat&&G(k.format)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)?console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\"):\r\n\tk.type===THREE.UnsignedByteType||G(k.type)===t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE)||k.type===THREE.FloatType&&V.get(\"WEBGL_color_buffer_float\")||k.type===THREE.HalfFloatType&&V.get(\"EXT_color_buffer_half_float\")?t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE?0<=b&&b<=a.width-d&&0<=c&&c<=a.height-e&&t.readPixels(b,c,d,e,G(k.format),G(k.type),f):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\"):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\")}finally{h&&\r\n\tt.bindFramebuffer(t.FRAMEBUFFER,ga)}}}}};\r\n\tTHREE.WebGLRenderTarget=function(a,b,c){this.uuid=THREE.Math.generateUUID();this.width=a;this.height=b;this.scissor=new THREE.Vector4(0,0,a,b);this.scissorTest=!1;this.viewport=new THREE.Vector4(0,0,a,b);c=c||{};void 0===c.minFilter&&(c.minFilter=THREE.LinearFilter);this.texture=new THREE.Texture(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,c.encoding);this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:\r\n\t!0;this.depthTexture=null};\r\n\tObject.assign(THREE.WebGLRenderTarget.prototype,THREE.EventDispatcher.prototype,{setSize:function(a,b){if(this.width!==a||this.height!==b)this.width=a,this.height=b,this.dispose();this.viewport.set(0,0,a,b);this.scissor.set(0,0,a,b)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.width=a.width;this.height=a.height;this.viewport.copy(a.viewport);this.texture=a.texture.clone();this.depthBuffer=a.depthBuffer;this.stencilBuffer=a.stencilBuffer;this.depthTexture=a.depthTexture;\r\n\treturn this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeMipMapLevel=this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;\r\n\tTHREE.WebGLBufferRenderer=function(a,b,c){var d;this.setMode=function(a){d=a};this.render=function(b,f){a.drawArrays(d,b,f);c.calls++;c.vertices+=f;d===a.TRIANGLES&&(c.faces+=f/3)};this.renderInstances=function(e){var f=b.get(\"ANGLE_instanced_arrays\");if(null===f)console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");else{var g=e.attributes.position,h=0,h=g instanceof THREE.InterleavedBufferAttribute?g.data.count:\r\n\tg.count;f.drawArraysInstancedANGLE(d,0,h,e.maxInstancedCount);c.calls++;c.vertices+=h*e.maxInstancedCount;d===a.TRIANGLES&&(c.faces+=e.maxInstancedCount*h/3)}}};\r\n\tTHREE.WebGLClipping=function(){function a(){l.value!==d&&(l.value=d,l.needsUpdate=0<e);c.numPlanes=e}function b(a,b,d,e){var f=null!==a?a.length:0,g=null;if(0!==f){g=l.value;if(!0!==e||null===g){e=d+4*f;b=b.matrixWorldInverse;k.getNormalMatrix(b);if(null===g||g.length<e)g=new Float32Array(e);for(e=0;e!==f;++e,d+=4)h.copy(a[e]).applyMatrix4(b,k),h.normal.toArray(g,d),g[d+3]=h.constant}l.value=g;l.needsUpdate=!0}c.numPlanes=f;return g}var c=this,d=null,e=0,f=!1,g=!1,h=new THREE.Plane,k=new THREE.Matrix3,\r\n\tl={value:null,needsUpdate:!1};this.uniform=l;this.numPlanes=0;this.init=function(a,c,g){var h=0!==a.length||c||0!==e||f;f=c;d=b(a,g,0);e=a.length;return h};this.beginShadows=function(){g=!0;b(null)};this.endShadows=function(){g=!1;a()};this.setState=function(c,h,k,q,r){if(!f||null===c||0===c.length||g&&!h)g?b(null):a();else{h=g?0:e;var s=4*h,u=q.clippingState||null;l.value=u;u=b(c,k,s,r);for(c=0;c!==s;++c)u[c]=d[c];q.clippingState=u;this.numPlanes+=h}}};\r\n\tTHREE.WebGLIndexedBufferRenderer=function(a,b,c){var d,e,f;this.setMode=function(a){d=a};this.setIndex=function(c){c.array instanceof Uint32Array&&b.get(\"OES_element_index_uint\")?(e=a.UNSIGNED_INT,f=4):(e=a.UNSIGNED_SHORT,f=2)};this.render=function(b,h){a.drawElements(d,h,e,b*f);c.calls++;c.vertices+=h;d===a.TRIANGLES&&(c.faces+=h/3)};this.renderInstances=function(g,h,k){var l=b.get(\"ANGLE_instanced_arrays\");null===l?console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\"):\r\n\t(l.drawElementsInstancedANGLE(d,k,e,h*f,g.maxInstancedCount),c.calls++,c.vertices+=k*g.maxInstancedCount,d===a.TRIANGLES&&(c.faces+=g.maxInstancedCount*k/3))}};\r\n\tTHREE.WebGLExtensions=function(a){var b={};this.get=function(c){if(void 0!==b[c])return b[c];var d;switch(c){case \"WEBGL_depth_texture\":d=a.getExtension(\"WEBGL_depth_texture\")||a.getExtension(\"MOZ_WEBGL_depth_texture\")||a.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case \"EXT_texture_filter_anisotropic\":d=a.getExtension(\"EXT_texture_filter_anisotropic\")||a.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||a.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case \"WEBGL_compressed_texture_s3tc\":d=\r\n\ta.getExtension(\"WEBGL_compressed_texture_s3tc\")||a.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||a.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case \"WEBGL_compressed_texture_pvrtc\":d=a.getExtension(\"WEBGL_compressed_texture_pvrtc\")||a.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;case \"WEBGL_compressed_texture_etc1\":d=a.getExtension(\"WEBGL_compressed_texture_etc1\");break;default:d=a.getExtension(c)}null===d&&console.warn(\"THREE.WebGLRenderer: \"+c+\" extension not supported.\");\r\n\treturn b[c]=d}};\r\n\tTHREE.WebGLCapabilities=function(a,b,c){function d(b){if(\"highp\"===b){if(0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision)return\"highp\";b=\"mediump\"}return\"mediump\"===b&&0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision?\"mediump\":\"lowp\"}this.getMaxPrecision=d;this.precision=void 0!==c.precision?c.precision:\"highp\";\r\n\tthis.logarithmicDepthBuffer=void 0!==c.logarithmicDepthBuffer?c.logarithmicDepthBuffer:!1;this.maxTextures=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);this.maxVertexTextures=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.maxTextureSize=a.getParameter(a.MAX_TEXTURE_SIZE);this.maxCubemapSize=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE);this.maxAttributes=a.getParameter(a.MAX_VERTEX_ATTRIBS);this.maxVertexUniforms=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS);this.maxVaryings=a.getParameter(a.MAX_VARYING_VECTORS);\r\n\tthis.maxFragmentUniforms=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);this.vertexTextures=0<this.maxVertexTextures;this.floatFragmentTextures=!!b.get(\"OES_texture_float\");this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;c=d(this.precision);c!==this.precision&&(console.warn(\"THREE.WebGLRenderer:\",this.precision,\"not supported, using\",c,\"instead.\"),this.precision=c);this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!b.get(\"EXT_frag_depth\"))};\r\n\tTHREE.WebGLGeometries=function(a,b,c){function d(a){var h=a.target;a=f[h.id];null!==a.index&&e(a.index);var k=a.attributes,l;for(l in k)e(k[l]);h.removeEventListener(\"dispose\",d);delete f[h.id];l=b.get(h);l.wireframe&&e(l.wireframe);b.delete(h);h=b.get(a);h.wireframe&&e(h.wireframe);b.delete(a);c.memory.geometries--}function e(c){var d;d=c instanceof THREE.InterleavedBufferAttribute?b.get(c.data).__webglBuffer:b.get(c).__webglBuffer;void 0!==d&&(a.deleteBuffer(d),c instanceof THREE.InterleavedBufferAttribute?\r\n\tb.delete(c.data):b.delete(c))}var f={};this.get=function(a){var b=a.geometry;if(void 0!==f[b.id])return f[b.id];b.addEventListener(\"dispose\",d);var e;b instanceof THREE.BufferGeometry?e=b:b instanceof THREE.Geometry&&(void 0===b._bufferGeometry&&(b._bufferGeometry=(new THREE.BufferGeometry).setFromObject(a)),e=b._bufferGeometry);f[b.id]=e;c.memory.geometries++;return e}};\r\n\tTHREE.WebGLLights=function(){var a={};this.get=function(b){if(void 0!==a[b.id])return a[b.id];var c;switch(b.type){case \"DirectionalLight\":c={direction:new THREE.Vector3,color:new THREE.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case \"SpotLight\":c={position:new THREE.Vector3,direction:new THREE.Vector3,color:new THREE.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case \"PointLight\":c=\r\n\t{position:new THREE.Vector3,color:new THREE.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case \"HemisphereLight\":c={direction:new THREE.Vector3,skyColor:new THREE.Color,groundColor:new THREE.Color}}return a[b.id]=c}};\r\n\tTHREE.WebGLObjects=function(a,b,c){function d(c,d){var e=c instanceof THREE.InterleavedBufferAttribute?c.data:c,f=b.get(e);void 0===f.__webglBuffer?(f.__webglBuffer=a.createBuffer(),a.bindBuffer(d,f.__webglBuffer),a.bufferData(d,e.array,e.dynamic?a.DYNAMIC_DRAW:a.STATIC_DRAW),f.version=e.version):f.version!==e.version&&(a.bindBuffer(d,f.__webglBuffer),!1===e.dynamic||-1===e.updateRange.count?a.bufferSubData(d,0,e.array):0===e.updateRange.count?console.error(\"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.\"):\r\n\t(a.bufferSubData(d,e.updateRange.offset*e.array.BYTES_PER_ELEMENT,e.array.subarray(e.updateRange.offset,e.updateRange.offset+e.updateRange.count)),e.updateRange.count=0),f.version=e.version)}function e(a,b,c){if(b>c){var d=b;b=c;c=d}d=a[b];return void 0===d?(a[b]=[c],!0):-1===d.indexOf(c)?(d.push(c),!0):!1}var f=new THREE.WebGLGeometries(a,b,c);this.getAttributeBuffer=function(a){return a instanceof THREE.InterleavedBufferAttribute?b.get(a.data).__webglBuffer:b.get(a).__webglBuffer};this.getWireframeAttribute=\r\n\tfunction(c){var f=b.get(c);if(void 0!==f.wireframe)return f.wireframe;var k=[],l=c.index,n=c.attributes;c=n.position;if(null!==l)for(var n={},l=l.array,p=0,m=l.length;p<m;p+=3){var q=l[p+0],r=l[p+1],s=l[p+2];e(n,q,r)&&k.push(q,r);e(n,r,s)&&k.push(r,s);e(n,s,q)&&k.push(s,q)}else for(l=n.position.array,p=0,m=l.length/3-1;p<m;p+=3)q=p+0,r=p+1,s=p+2,k.push(q,r,r,s,s,q);k=new THREE.BufferAttribute(new (65535<c.count?Uint32Array:Uint16Array)(k),1);d(k,a.ELEMENT_ARRAY_BUFFER);return f.wireframe=k};this.update=\r\n\tfunction(b){var c=f.get(b);b.geometry instanceof THREE.Geometry&&c.updateFromObject(b);b=c.index;var e=c.attributes;null!==b&&d(b,a.ELEMENT_ARRAY_BUFFER);for(var l in e)d(e[l],a.ARRAY_BUFFER);b=c.morphAttributes;for(l in b)for(var e=b[l],n=0,p=e.length;n<p;n++)d(e[n],a.ARRAY_BUFFER);return c}};\r\n\tTHREE.WebGLProgram=function(){function a(a){switch(a){case THREE.LinearEncoding:return[\"Linear\",\"( value )\"];case THREE.sRGBEncoding:return[\"sRGB\",\"( value )\"];case THREE.RGBEEncoding:return[\"RGBE\",\"( value )\"];case THREE.RGBM7Encoding:return[\"RGBM\",\"( value, 7.0 )\"];case THREE.RGBM16Encoding:return[\"RGBM\",\"( value, 16.0 )\"];case THREE.RGBDEncoding:return[\"RGBD\",\"( value, 256.0 )\"];case THREE.GammaEncoding:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];default:throw Error(\"unsupported encoding: \"+\r\n\ta);}}function b(b,c){var d=a(c);return\"vec4 \"+b+\"( vec4 value ) { return \"+d[0]+\"ToLinear\"+d[1]+\"; }\"}function c(b,c){var d=a(c);return\"vec4 \"+b+\"( vec4 value ) { return LinearTo\"+d[0]+d[1]+\"; }\"}function d(a,b){var c;switch(b){case THREE.LinearToneMapping:c=\"Linear\";break;case THREE.ReinhardToneMapping:c=\"Reinhard\";break;case THREE.Uncharted2ToneMapping:c=\"Uncharted2\";break;case THREE.CineonToneMapping:c=\"OptimizedCineon\";break;default:throw Error(\"unsupported toneMapping: \"+b);}return\"vec3 \"+a+\r\n\t\"( vec3 color ) { return \"+c+\"ToneMapping( color ); }\"}function e(a,b,c){a=a||{};return[a.derivatives||b.envMapCubeUV||b.bumpMap||b.normalMap||b.flatShading?\"#extension GL_OES_standard_derivatives : enable\":\"\",(a.fragDepth||b.logarithmicDepthBuffer)&&c.get(\"EXT_frag_depth\")?\"#extension GL_EXT_frag_depth : enable\":\"\",a.drawBuffers&&c.get(\"WEBGL_draw_buffers\")?\"#extension GL_EXT_draw_buffers : require\":\"\",(a.shaderTextureLOD||b.envMap)&&c.get(\"EXT_shader_texture_lod\")?\"#extension GL_EXT_shader_texture_lod : enable\":\r\n\t\"\"].filter(g).join(\"\\n\")}function f(a){var b=[],c;for(c in a){var d=a[c];!1!==d&&b.push(\"#define \"+c+\" \"+d)}return b.join(\"\\n\")}function g(a){return\"\"!==a}function h(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights)}function k(a){return a.replace(/#include +<([\\w\\d.]+)>/g,function(a,b){var c=THREE.ShaderChunk[b];if(void 0===c)throw Error(\"Can not resolve #include <\"+\r\n\tb+\">\");return k(c)})}function l(a){return a.replace(/for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g,function(a,b,c,d){a=\"\";for(b=parseInt(b);b<parseInt(c);b++)a+=d.replace(/\\[ i \\]/g,\"[ \"+b+\" ]\");return a})}var n=0;return function(a,m,q,r){var s=a.context,u=q.extensions,x=q.defines,v=q.__webglShader.vertexShader,C=q.__webglShader.fragmentShader,w=\"SHADOWMAP_TYPE_BASIC\";r.shadowMapType===THREE.PCFShadowMap?w=\"SHADOWMAP_TYPE_PCF\":r.shadowMapType===THREE.PCFSoftShadowMap&&(w=\"SHADOWMAP_TYPE_PCF_SOFT\");\r\n\tvar D=\"ENVMAP_TYPE_CUBE\",A=\"ENVMAP_MODE_REFLECTION\",y=\"ENVMAP_BLENDING_MULTIPLY\";if(r.envMap){switch(q.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:D=\"ENVMAP_TYPE_CUBE\";break;case THREE.CubeUVReflectionMapping:case THREE.CubeUVRefractionMapping:D=\"ENVMAP_TYPE_CUBE_UV\";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:D=\"ENVMAP_TYPE_EQUIREC\";break;case THREE.SphericalReflectionMapping:D=\"ENVMAP_TYPE_SPHERE\"}switch(q.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:A=\r\n\t\"ENVMAP_MODE_REFRACTION\"}switch(q.combine){case THREE.MultiplyOperation:y=\"ENVMAP_BLENDING_MULTIPLY\";break;case THREE.MixOperation:y=\"ENVMAP_BLENDING_MIX\";break;case THREE.AddOperation:y=\"ENVMAP_BLENDING_ADD\"}}var B=0<a.gammaFactor?a.gammaFactor:1,u=e(u,r,a.extensions),G=f(x),z=s.createProgram();q instanceof THREE.RawShaderMaterial?w=x=\"\":(x=[\"precision \"+r.precision+\" float;\",\"precision \"+r.precision+\" int;\",\"#define SHADER_NAME \"+q.__webglShader.name,G,r.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\r\n\t\"\",\"#define GAMMA_FACTOR \"+B,\"#define MAX_BONES \"+r.maxBones,r.map?\"#define USE_MAP\":\"\",r.envMap?\"#define USE_ENVMAP\":\"\",r.envMap?\"#define \"+A:\"\",r.lightMap?\"#define USE_LIGHTMAP\":\"\",r.aoMap?\"#define USE_AOMAP\":\"\",r.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",r.bumpMap?\"#define USE_BUMPMAP\":\"\",r.normalMap?\"#define USE_NORMALMAP\":\"\",r.displacementMap&&r.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",r.specularMap?\"#define USE_SPECULARMAP\":\"\",r.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",r.metalnessMap?\r\n\t\"#define USE_METALNESSMAP\":\"\",r.alphaMap?\"#define USE_ALPHAMAP\":\"\",r.vertexColors?\"#define USE_COLOR\":\"\",r.flatShading?\"#define FLAT_SHADED\":\"\",r.skinning?\"#define USE_SKINNING\":\"\",r.useVertexTexture?\"#define BONE_TEXTURE\":\"\",r.morphTargets?\"#define USE_MORPHTARGETS\":\"\",r.morphNormals&&!1===r.flatShading?\"#define USE_MORPHNORMALS\":\"\",r.doubleSided?\"#define DOUBLE_SIDED\":\"\",r.flipSided?\"#define FLIP_SIDED\":\"\",\"#define NUM_CLIPPING_PLANES \"+r.numClippingPlanes,r.shadowMapEnabled?\"#define USE_SHADOWMAP\":\r\n\t\"\",r.shadowMapEnabled?\"#define \"+w:\"\",r.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",r.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",r.logarithmicDepthBuffer&&a.extensions.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_COLOR\",\r\n\t\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\r\n\t\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(g).join(\"\\n\"),w=[u,\"precision \"+r.precision+\" float;\",\"precision \"+r.precision+\" int;\",\"#define SHADER_NAME \"+q.__webglShader.name,G,r.alphaTest?\"#define ALPHATEST \"+r.alphaTest:\"\",\"#define GAMMA_FACTOR \"+B,r.useFog&&r.fog?\"#define USE_FOG\":\"\",r.useFog&&r.fogExp?\"#define FOG_EXP2\":\"\",r.map?\"#define USE_MAP\":\"\",r.envMap?\"#define USE_ENVMAP\":\"\",r.envMap?\"#define \"+D:\"\",r.envMap?\r\n\t\"#define \"+A:\"\",r.envMap?\"#define \"+y:\"\",r.lightMap?\"#define USE_LIGHTMAP\":\"\",r.aoMap?\"#define USE_AOMAP\":\"\",r.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",r.bumpMap?\"#define USE_BUMPMAP\":\"\",r.normalMap?\"#define USE_NORMALMAP\":\"\",r.specularMap?\"#define USE_SPECULARMAP\":\"\",r.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",r.metalnessMap?\"#define USE_METALNESSMAP\":\"\",r.alphaMap?\"#define USE_ALPHAMAP\":\"\",r.vertexColors?\"#define USE_COLOR\":\"\",r.flatShading?\"#define FLAT_SHADED\":\"\",r.doubleSided?\"#define DOUBLE_SIDED\":\r\n\t\"\",r.flipSided?\"#define FLIP_SIDED\":\"\",\"#define NUM_CLIPPING_PLANES \"+r.numClippingPlanes,r.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",r.shadowMapEnabled?\"#define \"+w:\"\",r.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",r.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",r.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",r.logarithmicDepthBuffer&&a.extensions.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",r.envMap&&a.extensions.get(\"EXT_shader_texture_lod\")?\"#define TEXTURE_LOD_EXT\":\r\n\t\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",r.toneMapping!==THREE.NoToneMapping?\"#define TONE_MAPPING\":\"\",r.toneMapping!==THREE.NoToneMapping?THREE.ShaderChunk.tonemapping_pars_fragment:\"\",r.toneMapping!==THREE.NoToneMapping?d(\"toneMapping\",r.toneMapping):\"\",r.outputEncoding||r.mapEncoding||r.envMapEncoding||r.emissiveMapEncoding?THREE.ShaderChunk.encodings_pars_fragment:\"\",r.mapEncoding?b(\"mapTexelToLinear\",r.mapEncoding):\"\",r.envMapEncoding?b(\"envMapTexelToLinear\",r.envMapEncoding):\r\n\t\"\",r.emissiveMapEncoding?b(\"emissiveMapTexelToLinear\",r.emissiveMapEncoding):\"\",r.outputEncoding?c(\"linearToOutputTexel\",r.outputEncoding):\"\",r.depthPacking?\"#define DEPTH_PACKING \"+q.depthPacking:\"\",\"\\n\"].filter(g).join(\"\\n\"));v=k(v,r);v=h(v,r);C=k(C,r);C=h(C,r);!1===q instanceof THREE.ShaderMaterial&&(v=l(v),C=l(C));C=w+C;v=THREE.WebGLShader(s,s.VERTEX_SHADER,x+v);C=THREE.WebGLShader(s,s.FRAGMENT_SHADER,C);s.attachShader(z,v);s.attachShader(z,C);void 0!==q.index0AttributeName?s.bindAttribLocation(z,\r\n\t0,q.index0AttributeName):!0===r.morphTargets&&s.bindAttribLocation(z,0,\"position\");s.linkProgram(z);r=s.getProgramInfoLog(z);D=s.getShaderInfoLog(v);A=s.getShaderInfoLog(C);B=y=!0;if(!1===s.getProgramParameter(z,s.LINK_STATUS))y=!1,console.error(\"THREE.WebGLProgram: shader error: \",s.getError(),\"gl.VALIDATE_STATUS\",s.getProgramParameter(z,s.VALIDATE_STATUS),\"gl.getProgramInfoLog\",r,D,A);else if(\"\"!==r)console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",r);else if(\"\"===D||\"\"===A)B=!1;B&&(this.diagnostics=\r\n\t{runnable:y,material:q,programLog:r,vertexShader:{log:D,prefix:x},fragmentShader:{log:A,prefix:w}});s.deleteShader(v);s.deleteShader(C);var H;this.getUniforms=function(){void 0===H&&(H=new THREE.WebGLUniforms(s,z,a));return H};var M;this.getAttributes=function(){if(void 0===M){for(var a={},b=s.getProgramParameter(z,s.ACTIVE_ATTRIBUTES),c=0;c<b;c++){var d=s.getActiveAttrib(z,c).name;a[d]=s.getAttribLocation(z,d)}M=a}return M};this.destroy=function(){s.deleteProgram(z);this.program=void 0};Object.defineProperties(this,\r\n\t{uniforms:{get:function(){console.warn(\"THREE.WebGLProgram: .uniforms is now .getUniforms().\");return this.getUniforms()}},attributes:{get:function(){console.warn(\"THREE.WebGLProgram: .attributes is now .getAttributes().\");return this.getAttributes()}}});this.id=n++;this.code=m;this.usedTimes=1;this.program=z;this.vertexShader=v;this.fragmentShader=C;return this}}();\r\n\tTHREE.WebGLPrograms=function(a,b){function c(a,b){var c;a?a instanceof THREE.Texture?c=a.encoding:a instanceof THREE.WebGLRenderTarget&&(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),c=a.texture.encoding):c=THREE.LinearEncoding;c===THREE.LinearEncoding&&b&&(c=THREE.GammaEncoding);return c}var d=[],e={MeshDepthMaterial:\"depth\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",\r\n\tMeshPhongMaterial:\"phong\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\"},f=\"precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes depthPacking\".split(\" \");\r\n\tthis.getParameters=function(d,f,k,l,n){var p=e[d.type],m;b.floatVertexTextures&&n&&n.skeleton&&n.skeleton.useVertexTexture?m=1024:(m=Math.floor((b.maxVertexUniforms-20)/4),void 0!==n&&n instanceof THREE.SkinnedMesh&&(m=Math.min(n.skeleton.bones.length,m),m<n.skeleton.bones.length&&console.warn(\"WebGLRenderer: too many bones - \"+n.skeleton.bones.length+\", this GPU supports just \"+m+\" (try OpenGL instead of ANGLE)\")));var q=a.getPrecision();null!==d.precision&&(q=b.getMaxPrecision(d.precision),q!==\r\n\td.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",d.precision,\"not supported, using\",q,\"instead.\"));var r=a.getCurrentRenderTarget();return{shaderID:p,precision:q,supportsVertexTextures:b.vertexTextures,outputEncoding:c(r?r.texture:null,a.gammaOutput),map:!!d.map,mapEncoding:c(d.map,a.gammaInput),envMap:!!d.envMap,envMapMode:d.envMap&&d.envMap.mapping,envMapEncoding:c(d.envMap,a.gammaInput),envMapCubeUV:!!d.envMap&&(d.envMap.mapping===THREE.CubeUVReflectionMapping||d.envMap.mapping===\r\n\tTHREE.CubeUVRefractionMapping),lightMap:!!d.lightMap,aoMap:!!d.aoMap,emissiveMap:!!d.emissiveMap,emissiveMapEncoding:c(d.emissiveMap,a.gammaInput),bumpMap:!!d.bumpMap,normalMap:!!d.normalMap,displacementMap:!!d.displacementMap,roughnessMap:!!d.roughnessMap,metalnessMap:!!d.metalnessMap,specularMap:!!d.specularMap,alphaMap:!!d.alphaMap,combine:d.combine,vertexColors:d.vertexColors,fog:k,useFog:d.fog,fogExp:k instanceof THREE.FogExp2,flatShading:d.shading===THREE.FlatShading,sizeAttenuation:d.sizeAttenuation,\r\n\tlogarithmicDepthBuffer:b.logarithmicDepthBuffer,skinning:d.skinning,maxBones:m,useVertexTexture:b.floatVertexTextures&&n&&n.skeleton&&n.skeleton.useVertexTexture,morphTargets:d.morphTargets,morphNormals:d.morphNormals,maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:f.directional.length,numPointLights:f.point.length,numSpotLights:f.spot.length,numHemiLights:f.hemi.length,numClippingPlanes:l,shadowMapEnabled:a.shadowMap.enabled&&n.receiveShadow&&0<f.shadows.length,shadowMapType:a.shadowMap.type,\r\n\ttoneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:d.premultipliedAlpha,alphaTest:d.alphaTest,doubleSided:d.side===THREE.DoubleSide,flipSided:d.side===THREE.BackSide,depthPacking:void 0!==d.depthPacking?d.depthPacking:!1}};this.getProgramCode=function(a,b){var c=[];b.shaderID?c.push(b.shaderID):(c.push(a.fragmentShader),c.push(a.vertexShader));if(void 0!==a.defines)for(var d in a.defines)c.push(d),c.push(a.defines[d]);for(d=0;d<f.length;d++)c.push(b[f[d]]);\r\n\treturn c.join()};this.acquireProgram=function(b,c,e){for(var f,n=0,p=d.length;n<p;n++){var m=d[n];if(m.code===e){f=m;++f.usedTimes;break}}void 0===f&&(f=new THREE.WebGLProgram(a,e,b,c),d.push(f));return f};this.releaseProgram=function(a){if(0===--a.usedTimes){var b=d.indexOf(a);d[b]=d[d.length-1];d.pop();a.destroy()}};this.programs=d};\r\n\tTHREE.WebGLProperties=function(){var a={};this.get=function(b){b=b.uuid;var c=a[b];void 0===c&&(c={},a[b]=c);return c};this.delete=function(b){delete a[b.uuid]};this.clear=function(){a={}}};\r\n\tTHREE.WebGLShader=function(){function a(a){a=a.split(\"\\n\");for(var c=0;c<a.length;c++)a[c]=c+1+\": \"+a[c];return a.join(\"\\n\")}return function(b,c,d){var e=b.createShader(c);b.shaderSource(e,d);b.compileShader(e);!1===b.getShaderParameter(e,b.COMPILE_STATUS)&&console.error(\"THREE.WebGLShader: Shader couldn't compile.\");\"\"!==b.getShaderInfoLog(e)&&console.warn(\"THREE.WebGLShader: gl.getShaderInfoLog()\",c===b.VERTEX_SHADER?\"vertex\":\"fragment\",b.getShaderInfoLog(e),a(d));return e}}();\r\n\tTHREE.WebGLShadowMap=function(a,b,c){function d(b,c,d,e){var f=b.geometry,g=null,g=r,h=b.customDepthMaterial;d&&(g=s,h=b.customDistanceMaterial);h?g=h:(b=b instanceof THREE.SkinnedMesh&&c.skinning,h=0,void 0!==f.morphTargets&&0<f.morphTargets.length&&c.morphTargets&&(h|=1),b&&(h|=2),g=g[h]);a.localClippingEnabled&&!0===c.clipShadows&&0!==c.clippingPlanes.length&&(h=g.uuid,f=c.uuid,b=u[h],void 0===b&&(b={},u[h]=b),h=b[f],void 0===h&&(h=g.clone(),b[f]=h),g=h);g.visible=c.visible;g.wireframe=c.wireframe;\r\n\tf=c.side;z.renderSingleSided&&f==THREE.DoubleSide&&(f=THREE.FrontSide);z.renderReverseSided&&(f===THREE.FrontSide?f=THREE.BackSide:f===THREE.BackSide&&(f=THREE.FrontSide));g.side=f;g.clipShadows=c.clipShadows;g.clippingPlanes=c.clippingPlanes;g.wireframeLinewidth=c.wireframeLinewidth;g.linewidth=c.linewidth;d&&void 0!==g.uniforms.lightPos&&g.uniforms.lightPos.value.copy(e);return g}function e(a,b,c){if(!1!==a.visible){a.layers.test(b.layers)&&(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof\r\n\tTHREE.Points)&&a.castShadow&&(!1===a.frustumCulled||!0===h.intersectsObject(a))&&!0===a.material.visible&&(a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld),q.push(a));a=a.children;for(var d=0,f=a.length;d<f;d++)e(a[d],b,c)}}var f=a.context,g=a.state,h=new THREE.Frustum,k=new THREE.Matrix4,l=b.shadows,n=new THREE.Vector2,p=new THREE.Vector3,m=new THREE.Vector3,q=[],r=Array(4),s=Array(4),u={},x=[new THREE.Vector3(1,0,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,\r\n\t0,-1),new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1,0)],v=[new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1)],C=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4];b=new THREE.MeshDepthMaterial;b.depthPacking=THREE.RGBADepthPacking;b.clipping=!0;for(var w=THREE.ShaderLib.distanceRGBA,D=THREE.UniformsUtils.clone(w.uniforms),A=0;4!==A;++A){var y=\r\n\t0!==(A&1),B=0!==(A&2),G=b.clone();G.morphTargets=y;G.skinning=B;r[A]=G;y=new THREE.ShaderMaterial({defines:{USE_SHADOWMAP:\"\"},uniforms:D,vertexShader:w.vertexShader,fragmentShader:w.fragmentShader,morphTargets:y,skinning:B,clipping:!0});s[A]=y}var z=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=THREE.PCFShadowMap;this.renderSingleSided=this.renderReverseSided=!0;this.render=function(b,r){if(!1!==z.enabled&&(!1!==z.autoUpdate||!1!==z.needsUpdate)&&0!==l.length){g.clearColor(1,\r\n\t1,1,1);g.disable(f.BLEND);g.setDepthTest(!0);g.setScissorTest(!1);for(var s,u,w=0,y=l.length;w<y;w++){var A=l[w],L=A.shadow;if(void 0===L)console.warn(\"THREE.WebGLShadowMap:\",A,\"has no shadow.\");else{var P=L.camera;n.copy(L.mapSize);if(A instanceof THREE.PointLight){s=6;u=!0;var B=n.x,D=n.y;C[0].set(2*B,D,B,D);C[1].set(0,D,B,D);C[2].set(3*B,D,B,D);C[3].set(B,D,B,D);C[4].set(3*B,0,B,D);C[5].set(B,0,B,D);n.x*=4;n.y*=2}else s=1,u=!1;null===L.map&&(L.map=new THREE.WebGLRenderTarget(n.x,n.y,{minFilter:THREE.NearestFilter,\r\n\tmagFilter:THREE.NearestFilter,format:THREE.RGBAFormat}),P.updateProjectionMatrix());L instanceof THREE.SpotLightShadow&&L.update(A);B=L.map;L=L.matrix;m.setFromMatrixPosition(A.matrixWorld);P.position.copy(m);a.setRenderTarget(B);a.clear();for(B=0;B<s;B++){u?(p.copy(P.position),p.add(x[B]),P.up.copy(v[B]),P.lookAt(p),g.viewport(C[B])):(p.setFromMatrixPosition(A.target.matrixWorld),P.lookAt(p));P.updateMatrixWorld();P.matrixWorldInverse.getInverse(P.matrixWorld);L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,\r\n\t0,0,0,1);L.multiply(P.projectionMatrix);L.multiply(P.matrixWorldInverse);k.multiplyMatrices(P.projectionMatrix,P.matrixWorldInverse);h.setFromMatrix(k);q.length=0;e(b,r,P);for(var D=0,F=q.length;D<F;D++){var G=q[D],U=c.update(G),Y=G.material;if(Y instanceof THREE.MultiMaterial)for(var W=U.groups,Y=Y.materials,fa=0,la=W.length;fa<la;fa++){var ga=W[fa],Z=Y[ga.materialIndex];!0===Z.visible&&(Z=d(G,Z,u,m),a.renderBufferDirect(P,null,U,Z,G,ga))}else Z=d(G,Y,u,m),a.renderBufferDirect(P,null,U,Z,G,null)}}}}s=\r\n\ta.getClearColor();u=a.getClearAlpha();a.setClearColor(s,u);z.needsUpdate=!1}}};\r\n\tTHREE.WebGLState=function(a,b,c){function d(b,c,d){var e=new Uint8Array(3),f=a.createTexture();a.bindTexture(b,f);a.texParameteri(b,a.TEXTURE_MIN_FILTER,a.NEAREST);a.texParameteri(b,a.TEXTURE_MAG_FILTER,a.NEAREST);for(b=0;b<d;b++)a.texImage2D(c+b,0,a.RGB,1,1,0,a.RGB,a.UNSIGNED_BYTE,e);return f}var e=this;this.buffers={color:new THREE.WebGLColorBuffer(a,this),depth:new THREE.WebGLDepthBuffer(a,this),stencil:new THREE.WebGLStencilBuffer(a,this)};var f=a.getParameter(a.MAX_VERTEX_ATTRIBS),g=new Uint8Array(f),\r\n\th=new Uint8Array(f),k=new Uint8Array(f),l={},n=null,p=null,m=null,q=null,r=null,s=null,u=null,x=null,v=!1,C=null,w=null,D=null,A=null,y=null,B=null,G=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),z=null,H={},M=new THREE.Vector4,O=new THREE.Vector4,N={};N[a.TEXTURE_2D]=d(a.TEXTURE_2D,a.TEXTURE_2D,1);N[a.TEXTURE_CUBE_MAP]=d(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6);this.init=function(){this.clearColor(0,0,0,1);this.clearDepth(1);this.clearStencil(0);this.enable(a.DEPTH_TEST);this.setDepthFunc(THREE.LessEqualDepth);\r\n\tthis.setFlipSided(!1);this.setCullFace(THREE.CullFaceBack);this.enable(a.CULL_FACE);this.enable(a.BLEND);this.setBlending(THREE.NormalBlending)};this.initAttributes=function(){for(var a=0,b=g.length;a<b;a++)g[a]=0};this.enableAttribute=function(c){g[c]=1;0===h[c]&&(a.enableVertexAttribArray(c),h[c]=1);0!==k[c]&&(b.get(\"ANGLE_instanced_arrays\").vertexAttribDivisorANGLE(c,0),k[c]=0)};this.enableAttributeAndDivisor=function(b,c,d){g[b]=1;0===h[b]&&(a.enableVertexAttribArray(b),h[b]=1);k[b]!==c&&(d.vertexAttribDivisorANGLE(b,\r\n\tc),k[b]=c)};this.disableUnusedAttributes=function(){for(var b=0,c=h.length;b!==c;++b)h[b]!==g[b]&&(a.disableVertexAttribArray(b),h[b]=0)};this.enable=function(b){!0!==l[b]&&(a.enable(b),l[b]=!0)};this.disable=function(b){!1!==l[b]&&(a.disable(b),l[b]=!1)};this.getCompressedTextureFormats=function(){if(null===n&&(n=[],b.get(\"WEBGL_compressed_texture_pvrtc\")||b.get(\"WEBGL_compressed_texture_s3tc\")||b.get(\"WEBGL_compressed_texture_etc1\")))for(var c=a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d=0;d<\r\n\tc.length;d++)n.push(c[d]);return n};this.setBlending=function(b,d,e,f,g,h,k,l){if(b!==THREE.NoBlending){this.enable(a.BLEND);if(b!==p||l!==v)b===THREE.AdditiveBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE,a.ONE,a.ONE)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE)):b===THREE.SubtractiveBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),\r\n\ta.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR)):b===THREE.MultiplyBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.SRC_COLOR,a.ZERO,a.SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR)):l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),\r\n\tp=b,v=l;if(b===THREE.CustomBlending){g=g||d;h=h||e;k=k||f;if(d!==m||g!==s)a.blendEquationSeparate(c(d),c(g)),m=d,s=g;if(e!==q||f!==r||h!==u||k!==x)a.blendFuncSeparate(c(e),c(f),c(h),c(k)),q=e,r=f,u=h,x=k}else x=u=s=r=q=m=null}else this.disable(a.BLEND),p=b};this.setColorWrite=function(a){this.buffers.color.setMask(a)};this.setDepthTest=function(a){this.buffers.depth.setTest(a)};this.setDepthWrite=function(a){this.buffers.depth.setMask(a)};this.setDepthFunc=function(a){this.buffers.depth.setFunc(a)};\r\n\tthis.setStencilTest=function(a){this.buffers.stencil.setTest(a)};this.setStencilWrite=function(a){this.buffers.stencil.setMask(a)};this.setStencilFunc=function(a,b,c){this.buffers.stencil.setFunc(a,b,c)};this.setStencilOp=function(a,b,c){this.buffers.stencil.setOp(a,b,c)};this.setFlipSided=function(b){C!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),C=b)};this.setCullFace=function(b){b!==THREE.CullFaceNone?(this.enable(a.CULL_FACE),b!==w&&(b===THREE.CullFaceBack?a.cullFace(a.BACK):b===THREE.CullFaceFront?\r\n\ta.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):this.disable(a.CULL_FACE);w=b};this.setLineWidth=function(b){b!==D&&(a.lineWidth(b),D=b)};this.setPolygonOffset=function(b,c,d){if(b){if(this.enable(a.POLYGON_OFFSET_FILL),A!==c||y!==d)a.polygonOffset(c,d),A=c,y=d}else this.disable(a.POLYGON_OFFSET_FILL)};this.getScissorTest=function(){return B};this.setScissorTest=function(b){(B=b)?this.enable(a.SCISSOR_TEST):this.disable(a.SCISSOR_TEST)};this.activeTexture=function(b){void 0===b&&(b=a.TEXTURE0+\r\n\tG-1);z!==b&&(a.activeTexture(b),z=b)};this.bindTexture=function(b,c){null===z&&e.activeTexture();var d=H[z];void 0===d&&(d={type:void 0,texture:void 0},H[z]=d);if(d.type!==b||d.texture!==c)a.bindTexture(b,c||N[b]),d.type=b,d.texture=c};this.compressedTexImage2D=function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(b){console.error(b)}};this.texImage2D=function(){try{a.texImage2D.apply(a,arguments)}catch(b){console.error(b)}};this.clearColor=function(a,b,c,d){this.buffers.color.setClear(a,\r\n\tb,c,d)};this.clearDepth=function(a){this.buffers.depth.setClear(a)};this.clearStencil=function(a){this.buffers.stencil.setClear(a)};this.scissor=function(b){!1===M.equals(b)&&(a.scissor(b.x,b.y,b.z,b.w),M.copy(b))};this.viewport=function(b){!1===O.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),O.copy(b))};this.reset=function(){for(var b=0;b<h.length;b++)1===h[b]&&(a.disableVertexAttribArray(b),h[b]=0);l={};z=n=null;H={};w=C=p=null;this.buffers.color.reset();this.buffers.depth.reset();this.buffers.stencil.reset()}};\r\n\tTHREE.WebGLColorBuffer=function(a,b){var c=!1,d=new THREE.Vector4,e=null,f=new THREE.Vector4;this.setMask=function(b){e===b||c||(a.colorMask(b,b,b,b),e=b)};this.setLocked=function(a){c=a};this.setClear=function(b,c,e,l){d.set(b,c,e,l);!1===f.equals(d)&&(a.clearColor(b,c,e,l),f.copy(d))};this.reset=function(){c=!1;e=null;f=new THREE.Vector4}};\r\n\tTHREE.WebGLDepthBuffer=function(a,b){var c=!1,d=null,e=null,f=null;this.setTest=function(c){c?b.enable(a.DEPTH_TEST):b.disable(a.DEPTH_TEST)};this.setMask=function(b){d===b||c||(a.depthMask(b),d=b)};this.setFunc=function(b){if(e!==b){if(b)switch(b){case THREE.NeverDepth:a.depthFunc(a.NEVER);break;case THREE.AlwaysDepth:a.depthFunc(a.ALWAYS);break;case THREE.LessDepth:a.depthFunc(a.LESS);break;case THREE.LessEqualDepth:a.depthFunc(a.LEQUAL);break;case THREE.EqualDepth:a.depthFunc(a.EQUAL);break;case THREE.GreaterEqualDepth:a.depthFunc(a.GEQUAL);\r\n\tbreak;case THREE.GreaterDepth:a.depthFunc(a.GREATER);break;case THREE.NotEqualDepth:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}else a.depthFunc(a.LEQUAL);e=b}};this.setLocked=function(a){c=a};this.setClear=function(b){f!==b&&(a.clearDepth(b),f=b)};this.reset=function(){c=!1;f=e=d=null}};\r\n\tTHREE.WebGLStencilBuffer=function(a,b){var c=!1,d=null,e=null,f=null,g=null,h=null,k=null,l=null,n=null;this.setTest=function(c){c?b.enable(a.STENCIL_TEST):b.disable(a.STENCIL_TEST)};this.setMask=function(b){d===b||c||(a.stencilMask(b),d=b)};this.setFunc=function(b,c,d){if(e!==b||f!==c||g!==d)a.stencilFunc(b,c,d),e=b,f=c,g=d};this.setOp=function(b,c,d){if(h!==b||k!==c||l!==d)a.stencilOp(b,c,d),h=b,k=c,l=d};this.setLocked=function(a){c=a};this.setClear=function(b){n!==b&&(a.clearStencil(b),n=b)};this.reset=\r\n\tfunction(){c=!1;n=l=k=h=g=f=e=d=null}};\r\n\tTHREE.WebGLUniforms=function(){var a=[],b=[],c=function(b,c,d){var e=b[0];if(0>=e||0<e)return b;var f=c*d,g=a[f];void 0===g&&(g=new Float32Array(f),a[f]=g);if(0!==c)for(e.toArray(g,0),e=1,f=0;e!==c;++e)f+=d,b[e].toArray(g,f);return g},d=function(a,c){var d=b[c];void 0===d&&(d=new Int32Array(c),b[c]=d);for(var e=0;e!==c;++e)d[e]=a.allocTextureUnit();return d},e=function(a,b){a.uniform1f(this.addr,b)},f=function(a,b){a.uniform1i(this.addr,b)},g=function(a,b){void 0===b.x?a.uniform2fv(this.addr,b):a.uniform2f(this.addr,\r\n\tb.x,b.y)},h=function(a,b){void 0!==b.x?a.uniform3f(this.addr,b.x,b.y,b.z):void 0!==b.r?a.uniform3f(this.addr,b.r,b.g,b.b):a.uniform3fv(this.addr,b)},k=function(a,b){void 0===b.x?a.uniform4fv(this.addr,b):a.uniform4f(this.addr,b.x,b.y,b.z,b.w)},l=function(a,b){a.uniformMatrix2fv(this.addr,!1,b.elements||b)},n=function(a,b){a.uniformMatrix3fv(this.addr,!1,b.elements||b)},p=function(a,b){a.uniformMatrix4fv(this.addr,!1,b.elements||b)},m=function(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,\r\n\td);b&&c.setTexture2D(b,d)},q=function(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,d);b&&c.setTextureCube(b,d)},r=function(a,b){a.uniform2iv(this.addr,b)},s=function(a,b){a.uniform3iv(this.addr,b)},u=function(a,b){a.uniform4iv(this.addr,b)},x=function(a){switch(a){case 5126:return e;case 35664:return g;case 35665:return h;case 35666:return k;case 35674:return l;case 35675:return n;case 35676:return p;case 35678:return m;case 35680:return q;case 5124:case 35670:return f;case 35667:case 35671:return r;\r\n\tcase 35668:case 35672:return s;case 35669:case 35673:return u}},v=function(a,b){a.uniform1fv(this.addr,b)},C=function(a,b){a.uniform1iv(this.addr,b)},w=function(a,b){a.uniform2fv(this.addr,c(b,this.size,2))},D=function(a,b){a.uniform3fv(this.addr,c(b,this.size,3))},A=function(a,b){a.uniform4fv(this.addr,c(b,this.size,4))},y=function(a,b){a.uniformMatrix2fv(this.addr,!1,c(b,this.size,4))},B=function(a,b){a.uniformMatrix3fv(this.addr,!1,c(b,this.size,9))},G=function(a,b){a.uniformMatrix4fv(this.addr,\r\n\t!1,c(b,this.size,16))},z=function(a,b,c){var e=b.length,f=d(c,e);a.uniform1iv(this.addr,f);for(a=0;a!==e;++a){var g=b[a];g&&c.setTexture2D(g,f[a])}},H=function(a,b,c){var e=b.length,f=d(c,e);a.uniform1iv(this.addr,f);for(a=0;a!==e;++a){var g=b[a];g&&c.setTextureCube(g,f[a])}},M=function(a){switch(a){case 5126:return v;case 35664:return w;case 35665:return D;case 35666:return A;case 35674:return y;case 35675:return B;case 35676:return G;case 35678:return z;case 35680:return H;case 5124:case 35670:return C;\r\n\tcase 35667:case 35671:return r;case 35668:case 35672:return s;case 35669:case 35673:return u}},O=function(a,b,c){this.id=a;this.addr=c;this.setValue=x(b.type)},N=function(a,b,c){this.id=a;this.addr=c;this.size=b.size;this.setValue=M(b.type)},E=function(a){this.id=a;this.seq=[];this.map={}};E.prototype.setValue=function(a,b){for(var c=this.seq,d=0,e=c.length;d!==e;++d){var f=c[d];f.setValue(a,b[f.id])}};var K=/([\\w\\d_]+)(\\])?(\\[|\\.)?/g,I=function(a,b,c){this.seq=[];this.map={};this.renderer=c;c=a.getProgramParameter(b,\r\n\ta.ACTIVE_UNIFORMS);for(var d=0;d!==c;++d){var e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name),g=this,h=e.name,k=h.length;for(K.lastIndex=0;;){var m=K.exec(h),l=K.lastIndex,n=m[1],q=m[3];\"]\"===m[2]&&(n|=0);if(void 0===q||\"[\"===q&&l+2===k){h=g;e=void 0===q?new O(n,e,f):new N(n,e,f);h.seq.push(e);h.map[e.id]=e;break}else q=g.map[n],void 0===q&&(q=new E(n),n=g,g=q,n.seq.push(g),n.map[g.id]=g),g=q}}};I.prototype.setValue=function(a,b,c){b=this.map[b];void 0!==b&&b.setValue(a,c,this.renderer)};\r\n\tI.prototype.set=function(a,b,c){var d=this.map[c];void 0!==d&&d.setValue(a,b[c],this.renderer)};I.prototype.setOptional=function(a,b,c){b=b[c];void 0!==b&&this.setValue(a,c,b)};I.upload=function(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}};I.seqWithValue=function(a,b){for(var c=[],d=0,e=a.length;d!==e;++d){var f=a[d];f.id in b&&c.push(f)}return c};I.splitDynamic=function(a,b){for(var c=null,d=a.length,e=0,f=0;f!==d;++f){var g=a[f],h=\r\n\tb[g.id];h&&!0===h.dynamic?(null===c&&(c=[]),c.push(g)):(e<f&&(a[e]=g),++e)}e<d&&(a.length=e);return c};I.evalDynamic=function(a,b,c,d){for(var e=0,f=a.length;e!==f;++e){var g=b[a[e].id],h=g.onUpdateCallback;void 0!==h&&h.call(g,c,d)}};return I}();\r\n\tTHREE.LensFlarePlugin=function(a,b){var c,d,e,f,g,h,k,l,n,p,m=a.context,q=a.state,r,s,u,x,v,C;this.render=function(w,D,A){if(0!==b.length){w=new THREE.Vector3;var y=A.w/A.z,B=.5*A.z,G=.5*A.w,z=16/A.w,H=new THREE.Vector2(z*y,z),M=new THREE.Vector3(1,1,0),O=new THREE.Vector2(1,1),N=new THREE.Box2;N.min.set(0,0);N.max.set(A.z-16,A.w-16);if(void 0===x){var z=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),E=new Uint16Array([0,1,2,0,2,3]);r=m.createBuffer();s=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,\r\n\tr);m.bufferData(m.ARRAY_BUFFER,z,m.STATIC_DRAW);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,s);m.bufferData(m.ELEMENT_ARRAY_BUFFER,E,m.STATIC_DRAW);v=m.createTexture();C=m.createTexture();q.bindTexture(m.TEXTURE_2D,v);m.texImage2D(m.TEXTURE_2D,0,m.RGB,16,16,0,m.RGB,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,\r\n\tm.NEAREST);q.bindTexture(m.TEXTURE_2D,C);m.texImage2D(m.TEXTURE_2D,0,m.RGBA,16,16,0,m.RGBA,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);var z=u={vertexShader:\"uniform lowp int renderType;\\nuniform vec3 screenPosition;\\nuniform vec2 scale;\\nuniform float rotation;\\nuniform sampler2D occlusionMap;\\nattribute vec2 position;\\nattribute vec2 uv;\\nvarying vec2 vUV;\\nvarying float vVisibility;\\nvoid main() {\\nvUV = uv;\\nvec2 pos = position;\\nif ( renderType == 2 ) {\\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\nvVisibility =        visibility.r / 9.0;\\nvVisibility *= 1.0 - visibility.g / 9.0;\\nvVisibility *=       visibility.b / 9.0;\\nvVisibility *= 1.0 - visibility.a / 9.0;\\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\\n}\\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\n}\",\r\n\tfragmentShader:\"uniform lowp int renderType;\\nuniform sampler2D map;\\nuniform float opacity;\\nuniform vec3 color;\\nvarying vec2 vUV;\\nvarying float vVisibility;\\nvoid main() {\\nif ( renderType == 0 ) {\\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\\n} else if ( renderType == 1 ) {\\ngl_FragColor = texture2D( map, vUV );\\n} else {\\nvec4 texture = texture2D( map, vUV );\\ntexture.a *= opacity * vVisibility;\\ngl_FragColor = texture;\\ngl_FragColor.rgb *= color;\\n}\\n}\"},E=m.createProgram(),K=m.createShader(m.FRAGMENT_SHADER),\r\n\tI=m.createShader(m.VERTEX_SHADER),L=\"precision \"+a.getPrecision()+\" float;\\n\";m.shaderSource(K,L+z.fragmentShader);m.shaderSource(I,L+z.vertexShader);m.compileShader(K);m.compileShader(I);m.attachShader(E,K);m.attachShader(E,I);m.linkProgram(E);x=E;n=m.getAttribLocation(x,\"position\");p=m.getAttribLocation(x,\"uv\");c=m.getUniformLocation(x,\"renderType\");d=m.getUniformLocation(x,\"map\");e=m.getUniformLocation(x,\"occlusionMap\");f=m.getUniformLocation(x,\"opacity\");g=m.getUniformLocation(x,\"color\");h=m.getUniformLocation(x,\r\n\t\"scale\");k=m.getUniformLocation(x,\"rotation\");l=m.getUniformLocation(x,\"screenPosition\")}m.useProgram(x);q.initAttributes();q.enableAttribute(n);q.enableAttribute(p);q.disableUnusedAttributes();m.uniform1i(e,0);m.uniform1i(d,1);m.bindBuffer(m.ARRAY_BUFFER,r);m.vertexAttribPointer(n,2,m.FLOAT,!1,16,0);m.vertexAttribPointer(p,2,m.FLOAT,!1,16,8);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,s);q.disable(m.CULL_FACE);q.setDepthWrite(!1);E=0;for(K=b.length;E<K;E++)if(z=16/A.w,H.set(z*y,z),I=b[E],w.set(I.matrixWorld.elements[12],\r\n\tI.matrixWorld.elements[13],I.matrixWorld.elements[14]),w.applyMatrix4(D.matrixWorldInverse),w.applyProjection(D.projectionMatrix),M.copy(w),O.x=A.x+M.x*B+B-8,O.y=A.y+M.y*G+G-8,!0===N.containsPoint(O)){q.activeTexture(m.TEXTURE0);q.bindTexture(m.TEXTURE_2D,null);q.activeTexture(m.TEXTURE1);q.bindTexture(m.TEXTURE_2D,v);m.copyTexImage2D(m.TEXTURE_2D,0,m.RGB,O.x,O.y,16,16,0);m.uniform1i(c,0);m.uniform2f(h,H.x,H.y);m.uniform3f(l,M.x,M.y,M.z);q.disable(m.BLEND);q.enable(m.DEPTH_TEST);m.drawElements(m.TRIANGLES,\r\n\t6,m.UNSIGNED_SHORT,0);q.activeTexture(m.TEXTURE0);q.bindTexture(m.TEXTURE_2D,C);m.copyTexImage2D(m.TEXTURE_2D,0,m.RGBA,O.x,O.y,16,16,0);m.uniform1i(c,1);q.disable(m.DEPTH_TEST);q.activeTexture(m.TEXTURE1);q.bindTexture(m.TEXTURE_2D,v);m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0);I.positionScreen.copy(M);I.customUpdateCallback?I.customUpdateCallback(I):I.updateLensFlares();m.uniform1i(c,2);q.enable(m.BLEND);for(var L=0,P=I.lensFlares.length;L<P;L++){var Q=I.lensFlares[L];.001<Q.opacity&&.001<Q.scale&&\r\n\t(M.x=Q.x,M.y=Q.y,M.z=Q.z,z=Q.size*Q.scale/A.w,H.x=z*y,H.y=z,m.uniform3f(l,M.x,M.y,M.z),m.uniform2f(h,H.x,H.y),m.uniform1f(k,Q.rotation),m.uniform1f(f,Q.opacity),m.uniform3f(g,Q.color.r,Q.color.g,Q.color.b),q.setBlending(Q.blending,Q.blendEquation,Q.blendSrc,Q.blendDst),a.setTexture2D(Q.texture,1),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0))}}q.enable(m.CULL_FACE);q.enable(m.DEPTH_TEST);q.setDepthWrite(!0);a.resetGLState()}}};\r\n\tTHREE.SpritePlugin=function(a,b){var c,d,e,f,g,h,k,l,n,p,m,q,r,s,u,x,v;function C(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var w=a.context,D=a.state,A,y,B,G,z=new THREE.Vector3,H=new THREE.Quaternion,M=new THREE.Vector3;this.render=function(O,N){if(0!==b.length){if(void 0===B){var E=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),K=new Uint16Array([0,1,2,0,2,3]);A=w.createBuffer();y=w.createBuffer();w.bindBuffer(w.ARRAY_BUFFER,\r\n\tA);w.bufferData(w.ARRAY_BUFFER,E,w.STATIC_DRAW);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,y);w.bufferData(w.ELEMENT_ARRAY_BUFFER,K,w.STATIC_DRAW);var E=w.createProgram(),K=w.createShader(w.VERTEX_SHADER),I=w.createShader(w.FRAGMENT_SHADER);w.shaderSource(K,[\"precision \"+a.getPrecision()+\" float;\",\"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform float rotation;\\nuniform vec2 scale;\\nuniform vec2 uvOffset;\\nuniform vec2 uvScale;\\nattribute vec2 position;\\nattribute vec2 uv;\\nvarying vec2 vUV;\\nvoid main() {\\nvUV = uvOffset + uv * uvScale;\\nvec2 alignedPosition = position * scale;\\nvec2 rotatedPosition;\\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\nvec4 finalPosition;\\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\nfinalPosition.xy += rotatedPosition;\\nfinalPosition = projectionMatrix * finalPosition;\\ngl_Position = finalPosition;\\n}\"].join(\"\\n\"));\r\n\tw.shaderSource(I,[\"precision \"+a.getPrecision()+\" float;\",\"uniform vec3 color;\\nuniform sampler2D map;\\nuniform float opacity;\\nuniform int fogType;\\nuniform vec3 fogColor;\\nuniform float fogDensity;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform float alphaTest;\\nvarying vec2 vUV;\\nvoid main() {\\nvec4 texture = texture2D( map, vUV );\\nif ( texture.a < alphaTest ) discard;\\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\\nif ( fogType > 0 ) {\\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\nfloat fogFactor = 0.0;\\nif ( fogType == 1 ) {\\nfogFactor = smoothstep( fogNear, fogFar, depth );\\n} else {\\nconst float LOG2 = 1.442695;\\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\\n}\\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}\\n}\"].join(\"\\n\"));\r\n\tw.compileShader(K);w.compileShader(I);w.attachShader(E,K);w.attachShader(E,I);w.linkProgram(E);B=E;x=w.getAttribLocation(B,\"position\");v=w.getAttribLocation(B,\"uv\");c=w.getUniformLocation(B,\"uvOffset\");d=w.getUniformLocation(B,\"uvScale\");e=w.getUniformLocation(B,\"rotation\");f=w.getUniformLocation(B,\"scale\");g=w.getUniformLocation(B,\"color\");h=w.getUniformLocation(B,\"map\");k=w.getUniformLocation(B,\"opacity\");l=w.getUniformLocation(B,\"modelViewMatrix\");n=w.getUniformLocation(B,\"projectionMatrix\");p=\r\n\tw.getUniformLocation(B,\"fogType\");m=w.getUniformLocation(B,\"fogDensity\");q=w.getUniformLocation(B,\"fogNear\");r=w.getUniformLocation(B,\"fogFar\");s=w.getUniformLocation(B,\"fogColor\");u=w.getUniformLocation(B,\"alphaTest\");E=document.createElement(\"canvas\");E.width=8;E.height=8;K=E.getContext(\"2d\");K.fillStyle=\"white\";K.fillRect(0,0,8,8);G=new THREE.Texture(E);G.needsUpdate=!0}w.useProgram(B);D.initAttributes();D.enableAttribute(x);D.enableAttribute(v);D.disableUnusedAttributes();D.disable(w.CULL_FACE);\r\n\tD.enable(w.BLEND);w.bindBuffer(w.ARRAY_BUFFER,A);w.vertexAttribPointer(x,2,w.FLOAT,!1,16,0);w.vertexAttribPointer(v,2,w.FLOAT,!1,16,8);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,y);w.uniformMatrix4fv(n,!1,N.projectionMatrix.elements);D.activeTexture(w.TEXTURE0);w.uniform1i(h,0);K=E=0;(I=O.fog)?(w.uniform3f(s,I.color.r,I.color.g,I.color.b),I instanceof THREE.Fog?(w.uniform1f(q,I.near),w.uniform1f(r,I.far),w.uniform1i(p,1),K=E=1):I instanceof THREE.FogExp2&&(w.uniform1f(m,I.density),w.uniform1i(p,2),K=E=2)):\r\n\t(w.uniform1i(p,0),K=E=0);for(var I=0,L=b.length;I<L;I++){var P=b[I];P.modelViewMatrix.multiplyMatrices(N.matrixWorldInverse,P.matrixWorld);P.z=-P.modelViewMatrix.elements[14]}b.sort(C);for(var Q=[],I=0,L=b.length;I<L;I++){var P=b[I],R=P.material;w.uniform1f(u,R.alphaTest);w.uniformMatrix4fv(l,!1,P.modelViewMatrix.elements);P.matrixWorld.decompose(z,H,M);Q[0]=M.x;Q[1]=M.y;P=0;O.fog&&R.fog&&(P=K);E!==P&&(w.uniform1i(p,P),E=P);null!==R.map?(w.uniform2f(c,R.map.offset.x,R.map.offset.y),w.uniform2f(d,\r\n\tR.map.repeat.x,R.map.repeat.y)):(w.uniform2f(c,0,0),w.uniform2f(d,1,1));w.uniform1f(k,R.opacity);w.uniform3f(g,R.color.r,R.color.g,R.color.b);w.uniform1f(e,R.rotation);w.uniform2fv(f,Q);D.setBlending(R.blending,R.blendEquation,R.blendSrc,R.blendDst);D.setDepthTest(R.depthTest);D.setDepthWrite(R.depthWrite);R.map?a.setTexture2D(R.map,0):a.setTexture2D(G,0);w.drawElements(w.TRIANGLES,6,w.UNSIGNED_SHORT,0)}D.enable(w.CULL_FACE);a.resetGLState()}}};\r\n\tObject.assign(THREE,{Face4:function(a,b,c,d,e,f,g){console.warn(\"THREE.Face4 has been removed. A THREE.Face3 will be created instead.\");return new THREE.Face3(a,b,c,e,f,g)},LineStrip:0,LinePieces:1,MeshFaceMaterial:THREE.MultiMaterial,PointCloud:function(a,b){console.warn(\"THREE.PointCloud has been renamed to THREE.Points.\");return new THREE.Points(a,b)},Particle:THREE.Sprite,ParticleSystem:function(a,b){console.warn(\"THREE.ParticleSystem has been renamed to THREE.Points.\");return new THREE.Points(a,\r\n\tb)},PointCloudMaterial:function(a){console.warn(\"THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.\");return new THREE.PointsMaterial(a)},ParticleBasicMaterial:function(a){console.warn(\"THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.\");return new THREE.PointsMaterial(a)},ParticleSystemMaterial:function(a){console.warn(\"THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.\");return new THREE.PointsMaterial(a)},Vertex:function(a,b,c){console.warn(\"THREE.Vertex has been removed. Use THREE.Vector3 instead.\");\r\n\treturn new THREE.Vector3(a,b,c)}});Object.assign(THREE.Box2.prototype,{empty:function(){console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\");return this.isEmpty()},isIntersectionBox:function(a){console.warn(\"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\");return this.intersectsBox(a)}});\r\n\tObject.assign(THREE.Box3.prototype,{empty:function(){console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\");return this.isEmpty()},isIntersectionBox:function(a){console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\");return this.intersectsBox(a)},isIntersectionSphere:function(a){console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\");return this.intersectsSphere(a)}});\r\n\tObject.assign(THREE.Matrix3.prototype,{multiplyVector3:function(a){console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\");return a.applyMatrix3(this)},multiplyVector3Array:function(a){console.warn(\"THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.\");return this.applyToVector3Array(a)}});\r\n\tObject.assign(THREE.Matrix4.prototype,{extractPosition:function(a){console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\");return this.copyPosition(a)},setRotationFromQuaternion:function(a){console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\");return this.makeRotationFromQuaternion(a)},multiplyVector3:function(a){console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.\");\r\n\treturn a.applyProjection(this)},multiplyVector4:function(a){console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\");return a.applyMatrix4(this)},multiplyVector3Array:function(a){console.warn(\"THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.\");return this.applyToVector3Array(a)},rotateAxis:function(a){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\");\r\n\ta.transformDirection(this)},crossVector:function(a){console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\");return a.applyMatrix4(this)},translate:function(a){console.error(\"THREE.Matrix4: .translate() has been removed.\")},rotateX:function(a){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},rotateY:function(a){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},rotateZ:function(a){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},\r\n\trotateByAxis:function(a,b){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")}});Object.assign(THREE.Plane.prototype,{isIntersectionLine:function(a){console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\");return this.intersectsLine(a)}});Object.assign(THREE.Quaternion.prototype,{multiplyVector3:function(a){console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\");return a.applyQuaternion(this)}});\r\n\tObject.assign(THREE.Ray.prototype,{isIntersectionBox:function(a){console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\");return this.intersectsBox(a)},isIntersectionPlane:function(a){console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\");return this.intersectsPlane(a)},isIntersectionSphere:function(a){console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\");return this.intersectsSphere(a)}});\r\n\tObject.assign(THREE.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},setEulerFromQuaternion:function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},getPositionFromMatrix:function(a){console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\");return this.setFromMatrixPosition(a)},\r\n\tgetScaleFromMatrix:function(a){console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\");return this.setFromMatrixColumn(b,a)}});\r\n\tObject.assign(THREE.Object3D.prototype,{getChildByName:function(a){console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\");return this.getObjectByName(a)},renderDepth:function(a){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},translate:function(a,b){console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\");return this.translateOnAxis(b,a)}});\r\n\tObject.defineProperties(THREE.Object3D.prototype,{eulerOrder:{get:function(){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\");return this.rotation.order},set:function(a){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\");this.rotation.order=a}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(a){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}});\r\n\tObject.defineProperties(THREE.LOD.prototype,{objects:{get:function(){console.warn(\"THREE.LOD: .objects has been renamed to .levels.\");return this.levels}}});THREE.PerspectiveCamera.prototype.setLens=function(a,b){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\");void 0!==b&&(this.filmGauge=b);this.setFocalLength(a)};\r\n\tObject.defineProperties(THREE.Light.prototype,{onlyShadow:{set:function(a){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(a){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\");this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\");this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\");\r\n\tthis.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\");this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\");this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\");this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\");\r\n\tthis.shadow.camera.far=a}},shadowCameraVisible:{set:function(a){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(a){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\");this.shadow.bias=a}},shadowDarkness:{set:function(a){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(a){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\");\r\n\tthis.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\");this.shadow.mapSize.height=a}}});Object.defineProperties(THREE.BufferAttribute.prototype,{length:{get:function(){console.warn(\"THREE.BufferAttribute: .length has been deprecated. Please use .count.\");return this.array.length}}});\r\n\tObject.assign(THREE.BufferGeometry.prototype,{addIndex:function(a){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\");this.setIndex(a)},addDrawCall:function(a,b,c){void 0!==c&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\");console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\");this.addGroup(a,b)},clearDrawCalls:function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\");this.clearGroups()},\r\n\tcomputeTangents:function(){console.warn(\"THREE.BufferGeometry: .computeTangents() has been removed.\")},computeOffsets:function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")}});Object.defineProperties(THREE.BufferGeometry.prototype,{drawcalls:{get:function(){console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\");return this.groups}},offsets:{get:function(){console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\");return this.groups}}});\r\n\tObject.defineProperties(THREE.Material.prototype,{wrapAround:{get:function(){console.warn(\"THREE.\"+this.type+\": .wrapAround has been removed.\")},set:function(a){console.warn(\"THREE.\"+this.type+\": .wrapAround has been removed.\")}},wrapRGB:{get:function(){console.warn(\"THREE.\"+this.type+\": .wrapRGB has been removed.\");return new THREE.Color}}});\r\n\tObject.defineProperties(THREE.MeshPhongMaterial.prototype,{metal:{get:function(){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.\");return!1},set:function(a){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead\")}}});\r\n\tObject.defineProperties(THREE.ShaderMaterial.prototype,{derivatives:{get:function(){console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\");return this.extensions.derivatives},set:function(a){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\");this.extensions.derivatives=a}}});\r\n\tTHREE.EventDispatcher.prototype=Object.assign(Object.create({constructor:THREE.EventDispatcher,apply:function(a){console.warn(\"THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in.\");Object.assign(a,this)}}),THREE.EventDispatcher.prototype);\r\n\tObject.assign(THREE.WebGLRenderer.prototype,{supportsFloatTextures:function(){console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\");return this.extensions.get(\"OES_texture_float\")},supportsHalfFloatTextures:function(){console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\");return this.extensions.get(\"OES_texture_half_float\")},supportsStandardDerivatives:function(){console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\");\r\n\treturn this.extensions.get(\"OES_standard_derivatives\")},supportsCompressedTextureS3TC:function(){console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\");return this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},supportsCompressedTexturePVRTC:function(){console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\");return this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},\r\n\tsupportsBlendMinMax:function(){console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\");return this.extensions.get(\"EXT_blend_minmax\")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},supportsInstancedArrays:function(){console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\");return this.extensions.get(\"ANGLE_instanced_arrays\")},enableScissorTest:function(a){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\");\r\n\tthis.setScissorTest(a)},initMaterial:function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},addPrePlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},addPostPlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},updateShadowMap:function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")}});\r\n\tObject.defineProperties(THREE.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\");this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\");this.shadowMap.type=a}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(a){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.\");\r\n\tthis.shadowMap.cullFace=a}}});Object.defineProperties(THREE.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?THREE.CullFaceFront:THREE.CullFaceBack},set:function(a){a=a!==THREE.CullFaceBack;console.warn(\"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \"+a+\".\");this.renderReverseSided=a}}});\r\n\tObject.defineProperties(THREE.WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\");return this.texture.wrapS},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\");this.texture.wrapS=a}},wrapT:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\");return this.texture.wrapT},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\");this.texture.wrapT=\r\n\ta}},magFilter:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\");return this.texture.magFilter},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\");this.texture.magFilter=a}},minFilter:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\");return this.texture.minFilter},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\");this.texture.minFilter=\r\n\ta}},anisotropy:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\");return this.texture.anisotropy},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\");this.texture.anisotropy=a}},offset:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\");return this.texture.offset},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\");this.texture.offset=\r\n\ta}},repeat:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\");return this.texture.repeat},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\");this.texture.repeat=a}},format:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\");return this.texture.format},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\");this.texture.format=a}},type:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\");\r\n\treturn this.texture.type},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\");this.texture.type=a}},generateMipmaps:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\");return this.texture.generateMipmaps},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\");this.texture.generateMipmaps=a}}});\r\n\tObject.assign(THREE.Audio.prototype,{load:function(a){console.warn(\"THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.\");var b=this;(new THREE.AudioLoader).load(a,function(a){b.setBuffer(a)});return this}});Object.assign(THREE.AudioAnalyser.prototype,{getData:function(a){console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\");return this.getFrequencyData()}});\r\n\tTHREE.GeometryUtils={merge:function(a,b,c){console.warn(\"THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.\");var d;b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,b=b.geometry);a.merge(b,d,c)},center:function(a){console.warn(\"THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.\");return a.center()}};\r\n\tTHREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){console.warn(\"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\");var e=new THREE.TextureLoader;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a},loadTextureCube:function(a,b,c,d){console.warn(\"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\");var e=new THREE.CubeTextureLoader;e.setCrossOrigin(this.crossOrigin);a=e.load(a,\r\n\tc,void 0,d);b&&(a.mapping=b);return a},loadCompressedTexture:function(){console.error(\"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\")},loadCompressedTextureCube:function(){console.error(\"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\")}};\r\n\tTHREE.Projector=function(){console.error(\"THREE.Projector has been moved to /examples/js/renderers/Projector.js.\");this.projectVector=function(a,b){console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");a.project(b)};this.unprojectVector=function(a,b){console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");a.unproject(b)};this.pickingRay=function(a,b){console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\")}};\r\n\tTHREE.CanvasRenderer=function(){console.error(\"THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js\");this.domElement=document.createElement(\"canvas\");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};\r\n\tTHREE.CurveUtils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=.5*(c-a);d=.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};\r\n\tTHREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Group,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};\r\n\tTHREE.ShapeUtils={area:function(a){for(var b=a.length,c=0,d=b-1,e=0;e<b;d=e++)c+=a[d].x*a[e].y-a[e].x*a[d].y;return.5*c},triangulate:function(){return function(a,b){var c=a.length;if(3>c)return null;var d=[],e=[],f=[],g,h,k;if(0<THREE.ShapeUtils.area(a))for(h=0;h<c;h++)e[h]=h;else for(h=0;h<c;h++)e[h]=c-1-h;var l=2*c;for(h=c-1;2<c;){if(0>=l--){console.warn(\"THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()\");break}g=h;c<=g&&(g=0);h=g+1;c<=h&&(h=0);k=h+1;c<=k&&(k=0);var n;a:{var p=\r\n\tn=void 0,m=void 0,q=void 0,r=void 0,s=void 0,u=void 0,x=void 0,v=void 0,p=a[e[g]].x,m=a[e[g]].y,q=a[e[h]].x,r=a[e[h]].y,s=a[e[k]].x,u=a[e[k]].y;if(Number.EPSILON>(q-p)*(u-m)-(r-m)*(s-p))n=!1;else{var C=void 0,w=void 0,D=void 0,A=void 0,y=void 0,B=void 0,G=void 0,z=void 0,H=void 0,M=void 0,H=z=G=v=x=void 0,C=s-q,w=u-r,D=p-s,A=m-u,y=q-p,B=r-m;for(n=0;n<c;n++)if(x=a[e[n]].x,v=a[e[n]].y,!(x===p&&v===m||x===q&&v===r||x===s&&v===u)&&(G=x-p,z=v-m,H=x-q,M=v-r,x-=s,v-=u,H=C*M-w*H,G=y*z-B*G,z=D*v-A*x,H>=-Number.EPSILON&&\r\n\tz>=-Number.EPSILON&&G>=-Number.EPSILON)){n=!1;break a}n=!0}}if(n){d.push([a[e[g]],a[e[h]],a[e[k]]]);f.push([e[g],e[h],e[k]]);g=h;for(k=h+1;k<c;g++,k++)e[g]=e[k];c--;l=2*c}}return b?f:d}}(),triangulateShape:function(a,b){function c(a,b,c){return a.x!==b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,l=e.y-d.y,n=a.x-d.x,p=a.y-d.y,y=h*k-g*l,B=h*n-g*p;if(Math.abs(y)>Number.EPSILON){if(0<y){if(0>B||B>\r\n\ty)return[];k=l*n-k*p;if(0>k||k>y)return[]}else{if(0<B||B<y)return[];k=l*n-k*p;if(0<k||k<y)return[]}if(0===k)return!f||0!==B&&B!==y?[a]:[];if(k===y)return!f||0!==B&&B!==y?[b]:[];if(0===B)return[d];if(B===y)return[e];f=k/y;return[{x:a.x+f*g,y:a.y+f*h}]}if(0!==B||l*n!==k*p)return[];h=0===g&&0===h;k=0===k&&0===l;if(h&&k)return a.x!==d.x||a.y!==d.y?[]:[a];if(h)return c(d,e,a)?[a]:[];if(k)return c(a,b,d)?[d]:[];0!==g?(a.x<b.x?(g=a,k=a.x,h=b,a=b.x):(g=b,k=b.x,h=a,a=a.x),d.x<e.x?(b=d,y=d.x,l=e,d=e.x):(b=\r\n\te,y=e.x,l=d,d=d.x)):(a.y<b.y?(g=a,k=a.y,h=b,a=b.y):(g=b,k=b.y,h=a,a=a.y),d.y<e.y?(b=d,y=d.y,l=e,d=e.y):(b=e,y=e.y,l=d,d=d.y));return k<=y?a<y?[]:a===y?f?[]:[b]:a<=d?[b,h]:[b,l]:k>d?[]:k===d?f?[]:[g]:a<=d?[g,h]:[g,l]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return Math.abs(a)>Number.EPSILON?(b=g*c-d*b,0<a?0<=e&&0<=b:0<=e||0<=b):0<e}var f,g,h,k,l,n={};h=a.concat();f=0;for(g=b.length;f<g;f++)Array.prototype.push.apply(h,b[f]);f=0;for(g=\r\n\th.length;f<g;f++)l=h[f].x+\":\"+h[f].y,void 0!==n[l]&&console.warn(\"THREE.Shape: Duplicate point\",l),n[l]=f;f=function(a,b){function c(a,b){var d=h.length-1,f=a-1;0>f&&(f=d);var g=a+1;g>d&&(g=0);d=e(h[a],h[f],h[g],k[b]);if(!d)return!1;d=k.length-1;f=b-1;0>f&&(f=d);g=b+1;g>d&&(g=0);return(d=e(k[b],k[f],k[g],h[a]))?!0:!1}function f(a,b){var c,e;for(c=0;c<h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0<e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e<l.length;e++)for(f=b[l[e]],\r\n\th=0;h<f.length;h++)if(k=h+1,k%=f.length,k=d(a,c,f[h],f[k],!0),0<k.length)return!0;return!1}var h=a.concat(),k,l=[],n,p,A,y,B,G=[],z,H,M,O=0;for(n=b.length;O<n;O++)l.push(O);z=0;for(var N=2*l.length;0<l.length;){N--;if(0>N){console.log(\"Infinite Loop! Holes left:\"+l.length+\", Probably Hole outside Shape!\");break}for(p=z;p<h.length;p++){A=h[p];n=-1;for(O=0;O<l.length;O++)if(y=l[O],B=A.x+\":\"+A.y+\":\"+y,void 0===G[B]){k=b[y];for(H=0;H<k.length;H++)if(y=k[H],c(p,H)&&!f(A,y)&&!g(A,y)){n=H;l.splice(O,1);\r\n\tz=h.slice(0,p+1);y=h.slice(p);H=k.slice(n);M=k.slice(0,n+1);h=z.concat(H).concat(M).concat(y);z=p;break}if(0<=n)break;G[B]=!0}if(0<=n)break}}return h}(a,b);var p=THREE.ShapeUtils.triangulate(f,!1);f=0;for(g=p.length;f<g;f++)for(k=p[f],h=0;3>h;h++)l=k[h].x+\":\"+k[h].y,l=n[l],void 0!==l&&(k[h]=l);return p.concat()},isClockWise:function(a){return 0>THREE.ShapeUtils.area(a)},b2:function(){return function(a,b,c,d){var e=1-a;return e*e*b+2*(1-a)*a*c+a*a*d}}(),b3:function(){return function(a,b,c,d,e){var f=\r\n\t1-a,g=1-a;return f*f*f*b+3*g*g*a*c+3*(1-a)*a*a*d+a*a*a*e}}()};THREE.Curve=function(){};\r\n\tTHREE.Curve.prototype={constructor:THREE.Curve,getPoint:function(a){console.warn(\"THREE.Curve: Warning, getPoint() not implemented!\");return null},getPointAt:function(a){a=this.getUtoTmapping(a);return this.getPoint(a)},getPoints:function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c},getSpacedPoints:function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c},getLength:function(){var a=this.getLengths();return a[a.length-1]},getLengths:function(a){a||\r\n\t(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()},getUtoTmapping:function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-\r\n\t1,k;g<=h;)if(d=Math.floor(g+(h-g)/2),k=c[d]-f,0>k)g=d+1;else if(0<k)h=d-1;else{h=d;break}d=h;if(c[d]===f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)},getTangent:function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()},getTangentAt:function(a){a=this.getUtoTmapping(a);return this.getTangent(a)}};\r\n\tTHREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.autoClose=!1};\r\n\tTHREE.CurvePath.prototype=Object.assign(Object.create(THREE.Curve.prototype),{constructor:THREE.CurvePath,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))},getPoint:function(a){for(var b=a*this.getLength(),c=this.getCurveLengths(),d=0;d<c.length;){if(c[d]>=b)return a=this.curves[d],b=1-(c[d]-b)/a.getLength(),a.getPointAt(b);d++}return null},getLength:function(){var a=\r\n\tthis.getCurveLengths();return a[a.length-1]},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a},createPointsGeometry:function(a){a=this.getPoints(a);return this.createGeometry(a)},createSpacedPointsGeometry:function(a){a=this.getSpacedPoints(a);return this.createGeometry(a)},createGeometry:function(a){for(var b=new THREE.Geometry,\r\n\tc=0,d=a.length;c<d;c++){var e=a[c];b.vertices.push(new THREE.Vector3(e.x,e.y,e.z||0))}return b}});THREE.Font=function(a){this.data=a};\r\n\tObject.assign(THREE.Font.prototype,{generateShapes:function(a,b,c){void 0===b&&(b=100);void 0===c&&(c=4);var d=this.data;a=String(a).split(\"\");var e=b/d.resolution,f=0;b=[];for(var g=0;g<a.length;g++){var h;h=e;var k=f,l=d.glyphs[a[g]]||d.glyphs[\"?\"];if(l){var n=new THREE.Path,p=[],m=THREE.ShapeUtils.b2,q=THREE.ShapeUtils.b3,r=void 0,s=void 0,u=s=r=void 0,x=void 0,v=void 0,C=void 0,w=void 0,D=void 0,x=void 0;if(l.o)for(var A=l._cachedOutline||(l._cachedOutline=l.o.split(\" \")),y=0,B=A.length;y<B;)switch(A[y++]){case \"m\":r=\r\n\tA[y++]*h+k;s=A[y++]*h;n.moveTo(r,s);break;case \"l\":r=A[y++]*h+k;s=A[y++]*h;n.lineTo(r,s);break;case \"q\":r=A[y++]*h+k;s=A[y++]*h;v=A[y++]*h+k;C=A[y++]*h;n.quadraticCurveTo(v,C,r,s);if(x=p[p.length-1])for(var u=x.x,x=x.y,G=1;G<=c;G++){var z=G/c;m(z,u,v,r);m(z,x,C,s)}break;case \"b\":if(r=A[y++]*h+k,s=A[y++]*h,v=A[y++]*h+k,C=A[y++]*h,w=A[y++]*h+k,D=A[y++]*h,n.bezierCurveTo(v,C,w,D,r,s),x=p[p.length-1])for(u=x.x,x=x.y,G=1;G<=c;G++)z=G/c,q(z,u,v,w,r),q(z,x,C,D,s)}h={offset:l.ha*h,path:n}}else h=void 0;f+=\r\n\th.offset;b.push(h.path)}c=[];d=0;for(a=b.length;d<a;d++)Array.prototype.push.apply(c,b[d].toShapes());return c}});THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};\r\n\tTHREE.Path.prototype=Object.assign(Object.create(THREE.CurvePath.prototype),{constructor:THREE.Path,fromPoints:function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)},moveTo:function(a,b){this.actions.push({action:\"moveTo\",args:[a,b]})},lineTo:function(a,b){var c=this.actions[this.actions.length-1].args,c=new THREE.LineCurve(new THREE.Vector2(c[c.length-2],c[c.length-1]),new THREE.Vector2(a,b));this.curves.push(c);this.actions.push({action:\"lineTo\",args:[a,\r\n\tb]})},quadraticCurveTo:function(a,b,c,d){var e=this.actions[this.actions.length-1].args,e=new THREE.QuadraticBezierCurve(new THREE.Vector2(e[e.length-2],e[e.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(e);this.actions.push({action:\"quadraticCurveTo\",args:[a,b,c,d]})},bezierCurveTo:function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args,g=new THREE.CubicBezierCurve(new THREE.Vector2(g[g.length-2],g[g.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),\r\n\tnew THREE.Vector2(e,f));this.curves.push(g);this.actions.push({action:\"bezierCurveTo\",args:[a,b,c,d,e,f]})},splineThru:function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:\"splineThru\",args:b})},arc:function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-\r\n\t1],c,d,e,f)},absarc:function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)},ellipse:function(a,b,c,d,e,f,g,h){var k=this.actions[this.actions.length-1].args;this.absellipse(a+k[k.length-2],b+k[k.length-1],c,d,e,f,g,h)},absellipse:function(a,b,c,d,e,f,g,h){var k=[a,b,c,d,e,f,g,h||0];a=new THREE.EllipseCurve(a,b,c,d,e,f,g,h);this.curves.push(a);a=a.getPoint(1);k.push(a.x);k.push(a.y);this.actions.push({action:\"ellipse\",args:k})},getSpacedPoints:function(a){a||(a=40);for(var b=[],c=0;c<a;c++)b.push(this.getPoint(c/\r\n\ta));this.autoClose&&b.push(b[0]);return b},getPoints:function(a){a=a||12;for(var b=THREE.ShapeUtils.b2,c=THREE.ShapeUtils.b3,d=[],e,f,g,h,k,l,n,p,m,q,r=0,s=this.actions.length;r<s;r++){m=this.actions[r];var u=m.args;switch(m.action){case \"moveTo\":d.push(new THREE.Vector2(u[0],u[1]));break;case \"lineTo\":d.push(new THREE.Vector2(u[0],u[1]));break;case \"quadraticCurveTo\":e=u[2];f=u[3];k=u[0];l=u[1];0<d.length?(m=d[d.length-1],n=m.x,p=m.y):(m=this.actions[r-1].args,n=m[m.length-2],p=m[m.length-1]);for(u=\r\n\t1;u<=a;u++)q=u/a,m=b(q,n,k,e),q=b(q,p,l,f),d.push(new THREE.Vector2(m,q));break;case \"bezierCurveTo\":e=u[4];f=u[5];k=u[0];l=u[1];g=u[2];h=u[3];0<d.length?(m=d[d.length-1],n=m.x,p=m.y):(m=this.actions[r-1].args,n=m[m.length-2],p=m[m.length-1]);for(u=1;u<=a;u++)q=u/a,m=c(q,n,k,g,e),q=c(q,p,l,h,f),d.push(new THREE.Vector2(m,q));break;case \"splineThru\":m=this.actions[r-1].args;q=[new THREE.Vector2(m[m.length-2],m[m.length-1])];m=a*u[0].length;q=q.concat(u[0]);q=new THREE.SplineCurve(q);for(u=1;u<=m;u++)d.push(q.getPointAt(u/\r\n\tm));break;case \"arc\":e=u[0];f=u[1];l=u[2];g=u[3];m=u[4];k=!!u[5];n=m-g;p=2*a;for(u=1;u<=p;u++)q=u/p,k||(q=1-q),q=g+q*n,m=e+l*Math.cos(q),q=f+l*Math.sin(q),d.push(new THREE.Vector2(m,q));break;case \"ellipse\":e=u[0];f=u[1];l=u[2];h=u[3];g=u[4];m=u[5];k=!!u[6];var x=u[7];n=m-g;p=2*a;var v,C;0!==x&&(v=Math.cos(x),C=Math.sin(x));for(u=1;u<=p;u++){q=u/p;k||(q=1-q);q=g+q*n;m=e+l*Math.cos(q);q=f+h*Math.sin(q);if(0!==x){var w=m;m=(w-e)*v-(q-f)*C+e;q=(w-e)*C+(q-f)*v+f}d.push(new THREE.Vector2(m,q))}}}a=d[d.length-\r\n\t1];Math.abs(a.x-d[0].x)<Number.EPSILON&&Math.abs(a.y-d[0].y)<Number.EPSILON&&d.splice(d.length-1,1);this.autoClose&&d.push(d[0]);return d},toShapes:function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c],f=new THREE.Shape;f.actions=e.actions;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,l=h.y-g.y;if(Math.abs(l)>Number.EPSILON){if(0>l&&(g=b[f],k=-k,h=b[e],l=-l),!(a.y<g.y||a.y>h.y))if(a.y===g.y){if(a.x===\r\n\tg.x)return!0}else{e=l*(a.x-g.x)-k*(a.y-g.y);if(0===e)return!0;0>e||(d=!d)}}else if(a.y===g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x))return!0}return d}var e=THREE.ShapeUtils.isClockWise,f=function(a){for(var b=[],c=new THREE.Path,d=0,e=a.length;d<e;d++){var f=a[d],g=f.args,f=f.action;\"moveTo\"===f&&0!==c.actions.length&&(b.push(c),c=new THREE.Path);c[f].apply(c,g)}0!==c.actions.length&&b.push(c);return b}(this.actions);if(0===f.length)return[];if(!0===b)return c(f);var g,h,k,l=[];if(1===f.length)return h=\r\n\tf[0],k=new THREE.Shape,k.actions=h.actions,k.curves=h.curves,l.push(k),l;var n=!e(f[0].getPoints()),n=a?!n:n;k=[];var p=[],m=[],q=0,r;p[q]=void 0;m[q]=[];for(var s=0,u=f.length;s<u;s++)h=f[s],r=h.getPoints(),g=e(r),(g=a?!g:g)?(!n&&p[q]&&q++,p[q]={s:new THREE.Shape,p:r},p[q].s.actions=h.actions,p[q].s.curves=h.curves,n&&q++,m[q]=[]):m[q].push({h:h,p:r[0]});if(!p[0])return c(f);if(1<p.length){s=!1;h=[];e=0;for(f=p.length;e<f;e++)k[e]=[];e=0;for(f=p.length;e<f;e++)for(g=m[e],n=0;n<g.length;n++){q=g[n];\r\n\tr=!0;for(u=0;u<p.length;u++)d(q.p,p[u].p)&&(e!==u&&h.push({froms:e,tos:u,hole:n}),r?(r=!1,k[u].push(q)):s=!0);r&&k[e].push(q)}0<h.length&&(s||(m=k))}s=0;for(e=p.length;s<e;s++)for(k=p[s].s,l.push(k),h=m[s],f=0,g=h.length;f<g;f++)k.holes.push(h[f].h);return l}});THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};\r\n\tTHREE.Shape.prototype=Object.assign(Object.create(THREE.Path.prototype),{constructor:THREE.Shape,extrude:function(a){return new THREE.ExtrudeGeometry(this,a)},makeGeometry:function(a){return new THREE.ShapeGeometry(this,a)},getPointsHoles:function(a){for(var b=[],c=0,d=this.holes.length;c<d;c++)b[c]=this.holes[c].getPoints(a);return b},extractAllPoints:function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},extractPoints:function(a){return this.extractAllPoints(a)}});\r\n\tTHREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.constructor=THREE.LineCurve;THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};\r\n\tTHREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve;THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b=THREE.ShapeUtils.b2;return new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y))};\r\n\tTHREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b=THREE.CurveUtils.tangentQuadraticBezier;return(new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y))).normalize()};THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve;\r\n\tTHREE.CubicBezierCurve.prototype.getPoint=function(a){var b=THREE.ShapeUtils.b3;return new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y))};THREE.CubicBezierCurve.prototype.getTangent=function(a){var b=THREE.CurveUtils.tangentCubicBezier;return(new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y))).normalize()};THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};\r\n\tTHREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor=THREE.SplineCurve;THREE.SplineCurve.prototype.getPoint=function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0===c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=THREE.CurveUtils.interpolate;return new THREE.Vector2(c(d.x,e.x,f.x,b.x,a),c(d.y,e.y,f.y,b.y,a))};\r\n\tTHREE.EllipseCurve=function(a,b,c,d,e,f,g,h){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g;this.aRotation=h||0};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve;\r\n\tTHREE.EllipseCurve.prototype.getPoint=function(a){var b=this.aEndAngle-this.aStartAngle;0>b&&(b+=2*Math.PI);b>2*Math.PI&&(b-=2*Math.PI);b=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-b):this.aStartAngle+a*b;a=this.aX+this.xRadius*Math.cos(b);var c=this.aY+this.yRadius*Math.sin(b);if(0!==this.aRotation){var b=Math.cos(this.aRotation),d=Math.sin(this.aRotation),e=a;a=(e-this.aX)*b-(c-this.aY)*d+this.aX;c=(e-this.aX)*d+(c-this.aY)*b+this.aY}return new THREE.Vector2(a,c)};\r\n\tTHREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor=THREE.ArcCurve;THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});\r\n\tTHREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b=THREE.ShapeUtils.b2;return new THREE.Vector3(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y),b(a,this.v0.z,this.v1.z,this.v2.z))});\r\n\tTHREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b=THREE.ShapeUtils.b3;return new THREE.Vector3(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y),b(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z))});\r\n\tTHREE.SplineCurve3=THREE.Curve.create(function(a){console.warn(\"THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3\");this.points=void 0==a?[]:a},function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0==c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x,e.x,f.x,b.x,a),c(d.y,e.y,f.y,b.y,a),c(d.z,e.z,f.z,b.z,a))});\r\n\tTHREE.CatmullRomCurve3=function(){function a(){}var b=new THREE.Vector3,c=new a,d=new a,e=new a;a.prototype.init=function(a,b,c,d){this.c0=a;this.c1=c;this.c2=-3*a+3*b-2*c-d;this.c3=2*a-2*b+c+d};a.prototype.initNonuniformCatmullRom=function(a,b,c,d,e,n,p){a=((b-a)/e-(c-a)/(e+n)+(c-b)/n)*n;d=((c-b)/n-(d-b)/(n+p)+(d-c)/p)*n;this.init(b,c,a,d)};a.prototype.initCatmullRom=function(a,b,c,d,e){this.init(b,c,e*(c-a),e*(d-b))};a.prototype.calc=function(a){var b=a*a;return this.c0+this.c1*a+this.c2*b+this.c3*\r\n\tb*a};return THREE.Curve.create(function(a){this.points=a||[];this.closed=!1},function(a){var g=this.points,h,k;k=g.length;2>k&&console.log(\"duh, you need at least 2 points\");a*=k-(this.closed?0:1);h=Math.floor(a);a-=h;this.closed?h+=0<h?0:(Math.floor(Math.abs(h)/g.length)+1)*g.length:0===a&&h===k-1&&(h=k-2,a=1);var l,n,p;this.closed||0<h?l=g[(h-1)%k]:(b.subVectors(g[0],g[1]).add(g[0]),l=b);n=g[h%k];p=g[(h+1)%k];this.closed||h+2<k?g=g[(h+2)%k]:(b.subVectors(g[k-1],g[k-2]).add(g[k-1]),g=b);if(void 0===\r\n\tthis.type||\"centripetal\"===this.type||\"chordal\"===this.type){var m=\"chordal\"===this.type?.5:.25;k=Math.pow(l.distanceToSquared(n),m);h=Math.pow(n.distanceToSquared(p),m);m=Math.pow(p.distanceToSquared(g),m);1E-4>h&&(h=1);1E-4>k&&(k=h);1E-4>m&&(m=h);c.initNonuniformCatmullRom(l.x,n.x,p.x,g.x,k,h,m);d.initNonuniformCatmullRom(l.y,n.y,p.y,g.y,k,h,m);e.initNonuniformCatmullRom(l.z,n.z,p.z,g.z,k,h,m)}else\"catmullrom\"===this.type&&(k=void 0!==this.tension?this.tension:.5,c.initCatmullRom(l.x,n.x,p.x,g.x,\r\n\tk),d.initCatmullRom(l.y,n.y,p.y,g.y,k),e.initCatmullRom(l.z,n.z,p.z,g.z,k));return new THREE.Vector3(c.calc(a),d.calc(a),e.calc(a))})}();THREE.ClosedSplineCurve3=function(a){console.warn(\"THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.\");THREE.CatmullRomCurve3.call(this,a);this.type=\"catmullrom\";this.closed=!0};THREE.ClosedSplineCurve3.prototype=Object.create(THREE.CatmullRomCurve3.prototype);\r\n\tTHREE.BoxGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type=\"BoxGeometry\";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.fromBufferGeometry(new THREE.BoxBufferGeometry(a,b,c,d,e,f));this.mergeVertices()};THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry;THREE.CubeGeometry=THREE.BoxGeometry;\r\n\tTHREE.BoxBufferGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,k,l,M,O){var N=f/l,E=g/M,K=f/2,I=g/2,L=k/2;g=l+1;for(var P=M+1,Q=f=0,R=new THREE.Vector3,F=0;F<P;F++)for(var da=F*E-I,U=0;U<g;U++)R[a]=(U*N-K)*d,R[b]=da*e,R[c]=L,p[r]=R.x,p[r+1]=R.y,p[r+2]=R.z,R[a]=0,R[b]=0,R[c]=0<k?1:-1,m[r]=R.x,m[r+1]=R.y,m[r+2]=R.z,q[s]=U/l,q[s+1]=1-F/M,r+=3,s+=2,f+=1;for(F=0;F<M;F++)for(U=0;U<l;U++)a=x+U+g*(F+1),b=x+(U+1)+g*(F+1),c=x+(U+1)+g*F,n[u]=x+U+g*F,n[u+1]=a,n[u+2]=c,n[u+3]=a,n[u+4]=b,n[u+5]=c,u+=6,\r\n\tQ+=6;h.addGroup(v,Q,O);v+=Q;x+=f}THREE.BufferGeometry.call(this);this.type=\"BoxBufferGeometry\";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};var h=this;d=Math.floor(d)||1;e=Math.floor(e)||1;f=Math.floor(f)||1;var k=function(a,b,c){a=0+(a+1)*(b+1)*2+(a+1)*(c+1)*2;return a+=(c+1)*(b+1)*2}(d,e,f),l=function(a,b,c){a=0+a*b*2+a*c*2;a+=c*b*2;return 6*a}(d,e,f),n=new (65535<l?Uint32Array:Uint16Array)(l),p=new Float32Array(3*k),m=new Float32Array(3*k),q=new Float32Array(2*\r\n\tk),r=0,s=0,u=0,x=0,v=0;g(\"z\",\"y\",\"x\",-1,-1,c,b,a,f,e,0);g(\"z\",\"y\",\"x\",1,-1,c,b,-a,f,e,1);g(\"x\",\"z\",\"y\",1,1,a,c,b,d,f,2);g(\"x\",\"z\",\"y\",1,-1,a,c,-b,d,f,3);g(\"x\",\"y\",\"z\",1,-1,a,b,c,d,e,4);g(\"x\",\"y\",\"z\",-1,-1,a,b,-c,d,e,5);this.setIndex(new THREE.BufferAttribute(n,1));this.addAttribute(\"position\",new THREE.BufferAttribute(p,3));this.addAttribute(\"normal\",new THREE.BufferAttribute(m,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(q,2))};THREE.BoxBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);\r\n\tTHREE.BoxBufferGeometry.prototype.constructor=THREE.BoxBufferGeometry;THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type=\"CircleGeometry\";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};this.fromBufferGeometry(new THREE.CircleBufferGeometry(a,b,c,d))};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry;\r\n\tTHREE.CircleBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type=\"CircleBufferGeometry\";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||50;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e=b+2,f=new Float32Array(3*e),g=new Float32Array(3*e),e=new Float32Array(2*e);g[2]=1;e[0]=.5;e[1]=.5;for(var h=0,k=3,l=2;h<=b;h++,k+=3,l+=2){var n=c+h/b*d;f[k]=a*Math.cos(n);f[k+1]=a*Math.sin(n);g[k+2]=1;e[l]=(f[k]/a+1)/2;e[l+1]=(f[k+1]/a+1)/2}c=\r\n\t[];for(k=1;k<=b;k++)c.push(k,k+1,0);this.setIndex(new THREE.BufferAttribute(new Uint16Array(c),1));this.addAttribute(\"position\",new THREE.BufferAttribute(f,3));this.addAttribute(\"normal\",new THREE.BufferAttribute(g,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(e,2));this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.CircleBufferGeometry.prototype.constructor=THREE.CircleBufferGeometry;\r\n\tTHREE.CylinderBufferGeometry=function(a,b,c,d,e,f,g,h){function k(c){var e,f,k,m=new THREE.Vector2,n=new THREE.Vector3,p=0,C=!0===c?a:b,N=!0===c?1:-1;f=x;for(e=1;e<=d;e++)r.setXYZ(x,0,w*N,0),s.setXYZ(x,0,N,0),m.x=.5,m.y=.5,u.setXY(x,m.x,m.y),x++;k=x;for(e=0;e<=d;e++){var E=e/d*h+g,K=Math.cos(E),E=Math.sin(E);n.x=C*E;n.y=w*N;n.z=C*K;r.setXYZ(x,n.x,n.y,n.z);s.setXYZ(x,0,N,0);m.x=.5*K+.5;m.y=.5*E*N+.5;u.setXY(x,m.x,m.y);x++}for(e=0;e<d;e++)m=f+e,n=k+e,!0===c?(q.setX(v,n),v++,q.setX(v,n+1)):(q.setX(v,\r\n\tn+1),v++,q.setX(v,n)),v++,q.setX(v,m),v++,p+=3;l.addGroup(D,p,!0===c?1:2);D+=p}THREE.BufferGeometry.call(this);this.type=\"CylinderBufferGeometry\";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};var l=this;a=void 0!==a?a:20;b=void 0!==b?b:20;c=void 0!==c?c:100;d=Math.floor(d)||8;e=Math.floor(e)||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var n=0;!1===f&&(0<a&&n++,0<b&&n++);var p=function(){var a=(d+1)*\r\n\t(e+1);!1===f&&(a+=(d+1)*n+d*n);return a}(),m=function(){var a=d*e*6;!1===f&&(a+=d*n*3);return a}(),q=new THREE.BufferAttribute(new (65535<m?Uint32Array:Uint16Array)(m),1),r=new THREE.BufferAttribute(new Float32Array(3*p),3),s=new THREE.BufferAttribute(new Float32Array(3*p),3),u=new THREE.BufferAttribute(new Float32Array(2*p),2),x=0,v=0,C=[],w=c/2,D=0;(function(){var f,k,m=new THREE.Vector3,n=new THREE.Vector3,p=0,H=(b-a)/c;for(k=0;k<=e;k++){var M=[],O=k/e,N=O*(b-a)+a;for(f=0;f<=d;f++){var E=f/d;n.x=\r\n\tN*Math.sin(E*h+g);n.y=-O*c+w;n.z=N*Math.cos(E*h+g);r.setXYZ(x,n.x,n.y,n.z);m.copy(n);if(0===a&&0===k||0===b&&k===e)m.x=Math.sin(E*h+g),m.z=Math.cos(E*h+g);m.setY(Math.sqrt(m.x*m.x+m.z*m.z)*H).normalize();s.setXYZ(x,m.x,m.y,m.z);u.setXY(x,E,1-O);M.push(x);x++}C.push(M)}for(f=0;f<d;f++)for(k=0;k<e;k++)m=C[k+1][f],n=C[k+1][f+1],H=C[k][f+1],q.setX(v,C[k][f]),v++,q.setX(v,m),v++,q.setX(v,H),v++,q.setX(v,m),v++,q.setX(v,n),v++,q.setX(v,H),v++,p+=6;l.addGroup(D,p,0);D+=p})();!1===f&&(0<a&&k(!0),0<b&&k(!1));\r\n\tthis.setIndex(q);this.addAttribute(\"position\",r);this.addAttribute(\"normal\",s);this.addAttribute(\"uv\",u)};THREE.CylinderBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.CylinderBufferGeometry.prototype.constructor=THREE.CylinderBufferGeometry;\r\n\tTHREE.CylinderGeometry=function(a,b,c,d,e,f,g,h){THREE.Geometry.call(this);this.type=\"CylinderGeometry\";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};this.fromBufferGeometry(new THREE.CylinderBufferGeometry(a,b,c,d,e,f,g,h));this.mergeVertices()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;\r\n\tTHREE.ConeBufferGeometry=function(a,b,c,d,e,f,g){THREE.CylinderBufferGeometry.call(this,0,a,b,c,d,e,f,g);this.type=\"ConeBufferGeometry\";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,thetaStart:f,thetaLength:g}};THREE.ConeBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.ConeBufferGeometry.prototype.constructor=THREE.ConeBufferGeometry;\r\n\tTHREE.ConeGeometry=function(a,b,c,d,e,f,g){THREE.CylinderGeometry.call(this,0,a,b,c,d,e,f,g);this.type=\"ConeGeometry\";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}};THREE.ConeGeometry.prototype=Object.create(THREE.CylinderGeometry.prototype);THREE.ConeGeometry.prototype.constructor=THREE.ConeGeometry;\r\n\tTHREE.EdgesGeometry=function(a,b){function c(a,b){return a-b}THREE.BufferGeometry.call(this);var d=Math.cos(THREE.Math.DEG2RAD*(void 0!==b?b:1)),e=[0,0],f={},g=[\"a\",\"b\",\"c\"],h;a instanceof THREE.BufferGeometry?(h=new THREE.Geometry,h.fromBufferGeometry(a)):h=a.clone();h.mergeVertices();h.computeFaceNormals();var k=h.vertices;h=h.faces;for(var l=0,n=h.length;l<n;l++)for(var p=h[l],m=0;3>m;m++){e[0]=p[g[m]];e[1]=p[g[(m+1)%3]];e.sort(c);var q=e.toString();void 0===f[q]?f[q]={vert1:e[0],vert2:e[1],face1:l,\r\n\tface2:void 0}:f[q].face2=l}e=[];for(q in f)if(g=f[q],void 0===g.face2||h[g.face1].normal.dot(h[g.face2].normal)<=d)l=k[g.vert1],e.push(l.x),e.push(l.y),e.push(l.z),l=k[g.vert2],e.push(l.x),e.push(l.y),e.push(l.z);this.addAttribute(\"position\",new THREE.BufferAttribute(new Float32Array(e),3))};THREE.EdgesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry;\r\n\tTHREE.ExtrudeGeometry=function(a,b){\"undefined\"!==typeof a&&(THREE.Geometry.call(this),this.type=\"ExtrudeGeometry\",a=Array.isArray(a)?a:[a],this.addShapeList(a,b),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry;THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};\r\n\tTHREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||console.error(\"THREE.ExtrudeGeometry: vec does not exist\");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=1,d=a.x-b.x,e=a.y-b.y,f=c.x-a.x,g=c.y-a.y,h=d*d+e*e;if(Math.abs(d*g-e*f)>Number.EPSILON){var k=Math.sqrt(h),l=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;f=((c.x-g/l-h)*g-(c.y+f/l-b)*f)/(d*g-e*f);c=h+d*f-a.x;a=b+e*f-a.y;d=c*c+a*a;if(2>=d)return new THREE.Vector2(c,a);d=Math.sqrt(d/2)}else a=!1,d>Number.EPSILON?\r\n\tf>Number.EPSILON&&(a=!0):d<-Number.EPSILON?f<-Number.EPSILON&&(a=!0):Math.sign(e)===Math.sign(g)&&(a=!0),a?(c=-e,a=d,d=Math.sqrt(h)):(c=d,a=e,d=Math.sqrt(h/2));return new THREE.Vector2(c/d,a/d)}function e(a,b){var c,d;for(F=a.length;0<=--F;){c=F;d=F-1;0>d&&(d=a.length-1);for(var e=0,f=q+2*n,e=0;e<f;e++){var g=P*e,h=P*(e+1),k=b+c+g,g=b+d+g,l=b+d+h,h=b+c+h,k=k+z,g=g+z,l=l+z,h=h+z;G.faces.push(new THREE.Face3(k,g,h,null,null,1));G.faces.push(new THREE.Face3(g,l,h,null,null,1));k=x.generateSideWallUV(G,\r\n\tk,g,l,h);G.faceVertexUvs[0].push([k[0],k[1],k[3]]);G.faceVertexUvs[0].push([k[1],k[2],k[3]])}}}function f(a,b,c){G.vertices.push(new THREE.Vector3(a,b,c))}function g(a,b,c){a+=z;b+=z;c+=z;G.faces.push(new THREE.Face3(a,b,c,null,null,0));a=x.generateTopUV(G,a,b,c);G.faceVertexUvs[0].push(a)}var h=void 0!==b.amount?b.amount:100,k=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:k-2,n=void 0!==b.bevelSegments?b.bevelSegments:3,p=void 0!==b.bevelEnabled?b.bevelEnabled:!0,\r\n\tm=void 0!==b.curveSegments?b.curveSegments:12,q=void 0!==b.steps?b.steps:1,r=b.extrudePath,s,u=!1,x=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,v,C,w,D;r&&(s=r.getSpacedPoints(q),u=!0,p=!1,v=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(r,q,!1),C=new THREE.Vector3,w=new THREE.Vector3,D=new THREE.Vector3);p||(l=k=n=0);var A,y,B,G=this,z=this.vertices.length,r=a.extractPoints(m),m=r.shape,H=r.holes;if(r=!THREE.ShapeUtils.isClockWise(m)){m=m.reverse();\r\n\ty=0;for(B=H.length;y<B;y++)A=H[y],THREE.ShapeUtils.isClockWise(A)&&(H[y]=A.reverse());r=!1}var M=THREE.ShapeUtils.triangulateShape(m,H),O=m;y=0;for(B=H.length;y<B;y++)A=H[y],m=m.concat(A);var N,E,K,I,L,P=m.length,Q,R=M.length,r=[],F=0;K=O.length;N=K-1;for(E=F+1;F<K;F++,N++,E++)N===K&&(N=0),E===K&&(E=0),r[F]=d(O[F],O[N],O[E]);var da=[],U,Y=r.concat();y=0;for(B=H.length;y<B;y++){A=H[y];U=[];F=0;K=A.length;N=K-1;for(E=F+1;F<K;F++,N++,E++)N===K&&(N=0),E===K&&(E=0),U[F]=d(A[F],A[N],A[E]);da.push(U);Y=\r\n\tY.concat(U)}for(N=0;N<n;N++){K=N/n;I=k*(1-K);E=l*Math.sin(K*Math.PI/2);F=0;for(K=O.length;F<K;F++)L=c(O[F],r[F],E),f(L.x,L.y,-I);y=0;for(B=H.length;y<B;y++)for(A=H[y],U=da[y],F=0,K=A.length;F<K;F++)L=c(A[F],U[F],E),f(L.x,L.y,-I)}E=l;for(F=0;F<P;F++)L=p?c(m[F],Y[F],E):m[F],u?(w.copy(v.normals[0]).multiplyScalar(L.x),C.copy(v.binormals[0]).multiplyScalar(L.y),D.copy(s[0]).add(w).add(C),f(D.x,D.y,D.z)):f(L.x,L.y,0);for(K=1;K<=q;K++)for(F=0;F<P;F++)L=p?c(m[F],Y[F],E):m[F],u?(w.copy(v.normals[K]).multiplyScalar(L.x),\r\n\tC.copy(v.binormals[K]).multiplyScalar(L.y),D.copy(s[K]).add(w).add(C),f(D.x,D.y,D.z)):f(L.x,L.y,h/q*K);for(N=n-1;0<=N;N--){K=N/n;I=k*(1-K);E=l*Math.sin(K*Math.PI/2);F=0;for(K=O.length;F<K;F++)L=c(O[F],r[F],E),f(L.x,L.y,h+I);y=0;for(B=H.length;y<B;y++)for(A=H[y],U=da[y],F=0,K=A.length;F<K;F++)L=c(A[F],U[F],E),u?f(L.x,L.y+s[q-1].y,s[q-1].x+I):f(L.x,L.y,h+I)}(function(){if(p){var a;a=0*P;for(F=0;F<R;F++)Q=M[F],g(Q[2]+a,Q[1]+a,Q[0]+a);a=q+2*n;a*=P;for(F=0;F<R;F++)Q=M[F],g(Q[0]+a,Q[1]+a,Q[2]+a)}else{for(F=\r\n\t0;F<R;F++)Q=M[F],g(Q[2],Q[1],Q[0]);for(F=0;F<R;F++)Q=M[F],g(Q[0]+P*q,Q[1]+P*q,Q[2]+P*q)}})();(function(){var a=0;e(O,a);a+=O.length;y=0;for(B=H.length;y<B;y++)A=H[y],e(A,a),a+=A.length})()};\r\n\tTHREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d){a=a.vertices;b=a[b];c=a[c];d=a[d];return[new THREE.Vector2(b.x,b.y),new THREE.Vector2(c.x,c.y),new THREE.Vector2(d.x,d.y)]},generateSideWallUV:function(a,b,c,d,e){a=a.vertices;b=a[b];c=a[c];d=a[d];e=a[e];return.01>Math.abs(b.y-c.y)?[new THREE.Vector2(b.x,1-b.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(d.x,1-d.z),new THREE.Vector2(e.x,1-e.z)]:[new THREE.Vector2(b.y,1-b.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(d.y,\r\n\t1-d.z),new THREE.Vector2(e.y,1-e.z)]}};THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);this.type=\"ShapeGeometry\";!1===Array.isArray(a)&&(a=[a]);this.addShapeList(a,b);this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};\r\n\tTHREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,h=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var k=e.shape,l=e.holes;if(!THREE.ShapeUtils.isClockWise(k))for(k=k.reverse(),e=0,f=l.length;e<f;e++)g=l[e],THREE.ShapeUtils.isClockWise(g)&&(l[e]=g.reverse());var n=THREE.ShapeUtils.triangulateShape(k,l);e=0;for(f=l.length;e<f;e++)g=l[e],k=k.concat(g);\r\n\tl=k.length;f=n.length;for(e=0;e<l;e++)g=k[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)l=n[e],k=l[0]+h,g=l[1]+h,l=l[2]+h,this.faces.push(new THREE.Face3(k,g,l,null,null,c)),this.faceVertexUvs[0].push(d.generateTopUV(this,k,g,l))};\r\n\tTHREE.LatheBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type=\"LatheBufferGeometry\";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=Math.floor(b)||12;c=c||0;d=d||2*Math.PI;d=THREE.Math.clamp(d,0,2*Math.PI);for(var e=(b+1)*a.length,f=b*a.length*6,g=new THREE.BufferAttribute(new (65535<f?Uint32Array:Uint16Array)(f),1),h=new THREE.BufferAttribute(new Float32Array(3*e),3),k=new THREE.BufferAttribute(new Float32Array(2*e),2),l=0,n=0,p=1/b,m=new THREE.Vector3,q=new THREE.Vector2,\r\n\te=0;e<=b;e++)for(var f=c+e*p*d,r=Math.sin(f),s=Math.cos(f),f=0;f<=a.length-1;f++)m.x=a[f].x*r,m.y=a[f].y,m.z=a[f].x*s,h.setXYZ(l,m.x,m.y,m.z),q.x=e/b,q.y=f/(a.length-1),k.setXY(l,q.x,q.y),l++;for(e=0;e<b;e++)for(f=0;f<a.length-1;f++)c=f+e*a.length,l=c+a.length,p=c+a.length+1,m=c+1,g.setX(n,c),n++,g.setX(n,l),n++,g.setX(n,m),n++,g.setX(n,l),n++,g.setX(n,p),n++,g.setX(n,m),n++;this.setIndex(g);this.addAttribute(\"position\",h);this.addAttribute(\"uv\",k);this.computeVertexNormals();if(d===2*Math.PI)for(d=\r\n\tthis.attributes.normal.array,g=new THREE.Vector3,h=new THREE.Vector3,k=new THREE.Vector3,c=b*a.length*3,f=e=0;e<a.length;e++,f+=3)g.x=d[f+0],g.y=d[f+1],g.z=d[f+2],h.x=d[c+f+0],h.y=d[c+f+1],h.z=d[c+f+2],k.addVectors(g,h).normalize(),d[f+0]=d[c+f+0]=k.x,d[f+1]=d[c+f+1]=k.y,d[f+2]=d[c+f+2]=k.z};THREE.LatheBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.LatheBufferGeometry.prototype.constructor=THREE.LatheBufferGeometry;\r\n\tTHREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type=\"LatheGeometry\";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};this.fromBufferGeometry(new THREE.LatheBufferGeometry(a,b,c,d));this.mergeVertices()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry;\r\n\tTHREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type=\"PlaneGeometry\";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a,b,c,d))};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;\r\n\tTHREE.PlaneBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type=\"PlaneBufferGeometry\";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};var e=a/2,f=b/2;c=Math.floor(c)||1;d=Math.floor(d)||1;var g=c+1,h=d+1,k=a/c,l=b/d;b=new Float32Array(g*h*3);a=new Float32Array(g*h*3);for(var n=new Float32Array(g*h*2),p=0,m=0,q=0;q<h;q++)for(var r=q*l-f,s=0;s<g;s++)b[p]=s*k-e,b[p+1]=-r,a[p+2]=1,n[m]=s/c,n[m+1]=1-q/d,p+=3,m+=2;p=0;e=new (65535<b.length/3?Uint32Array:Uint16Array)(c*\r\n\td*6);for(q=0;q<d;q++)for(s=0;s<c;s++)f=s+g*(q+1),h=s+1+g*(q+1),k=s+1+g*q,e[p]=s+g*q,e[p+1]=f,e[p+2]=k,e[p+3]=f,e[p+4]=h,e[p+5]=k,p+=6;this.setIndex(new THREE.BufferAttribute(e,1));this.addAttribute(\"position\",new THREE.BufferAttribute(b,3));this.addAttribute(\"normal\",new THREE.BufferAttribute(a,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(n,2))};THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry;\r\n\tTHREE.RingBufferGeometry=function(a,b,c,d,e,f){THREE.BufferGeometry.call(this);this.type=\"RingBufferGeometry\";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};a=a||20;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):1;var g=(c+1)*(d+1),h=c*d*6,h=new THREE.BufferAttribute(new (65535<h?Uint32Array:Uint16Array)(h),1),k=new THREE.BufferAttribute(new Float32Array(3*g),3),l=new THREE.BufferAttribute(new Float32Array(3*\r\n\tg),3),g=new THREE.BufferAttribute(new Float32Array(2*g),2),n=0,p=0,m,q=a,r=(b-a)/d,s=new THREE.Vector3,u=new THREE.Vector2,x;for(a=0;a<=d;a++){for(x=0;x<=c;x++)m=e+x/c*f,s.x=q*Math.cos(m),s.y=q*Math.sin(m),k.setXYZ(n,s.x,s.y,s.z),l.setXYZ(n,0,0,1),u.x=(s.x/b+1)/2,u.y=(s.y/b+1)/2,g.setXY(n,u.x,u.y),n++;q+=r}for(a=0;a<d;a++)for(b=a*(c+1),x=0;x<c;x++)e=m=x+b,f=m+c+1,n=m+c+2,m+=1,h.setX(p,e),p++,h.setX(p,f),p++,h.setX(p,n),p++,h.setX(p,e),p++,h.setX(p,n),p++,h.setX(p,m),p++;this.setIndex(h);this.addAttribute(\"position\",\r\n\tk);this.addAttribute(\"normal\",l);this.addAttribute(\"uv\",g)};THREE.RingBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.RingBufferGeometry.prototype.constructor=THREE.RingBufferGeometry;THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type=\"RingGeometry\";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};this.fromBufferGeometry(new THREE.RingBufferGeometry(a,b,c,d,e,f))};\r\n\tTHREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor=THREE.RingGeometry;THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.type=\"SphereGeometry\";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};this.fromBufferGeometry(new THREE.SphereBufferGeometry(a,b,c,d,e,f,g))};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);\r\n\tTHREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry;\r\n\tTHREE.SphereBufferGeometry=function(a,b,c,d,e,f,g){THREE.BufferGeometry.call(this);this.type=\"SphereBufferGeometry\";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||50;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;for(var h=f+g,k=(b+1)*(c+1),l=new THREE.BufferAttribute(new Float32Array(3*k),3),n=new THREE.BufferAttribute(new Float32Array(3*\r\n\tk),3),k=new THREE.BufferAttribute(new Float32Array(2*k),2),p=0,m=[],q=new THREE.Vector3,r=0;r<=c;r++){for(var s=[],u=r/c,x=0;x<=b;x++){var v=x/b,C=-a*Math.cos(d+v*e)*Math.sin(f+u*g),w=a*Math.cos(f+u*g),D=a*Math.sin(d+v*e)*Math.sin(f+u*g);q.set(C,w,D).normalize();l.setXYZ(p,C,w,D);n.setXYZ(p,q.x,q.y,q.z);k.setXY(p,v,1-u);s.push(p);p++}m.push(s)}d=[];for(r=0;r<c;r++)for(x=0;x<b;x++)e=m[r][x+1],g=m[r][x],p=m[r+1][x],q=m[r+1][x+1],(0!==r||0<f)&&d.push(e,g,q),(r!==c-1||h<Math.PI)&&d.push(g,p,q);this.setIndex(new (65535<\r\n\tl.count?THREE.Uint32Attribute:THREE.Uint16Attribute)(d,1));this.addAttribute(\"position\",l);this.addAttribute(\"normal\",n);this.addAttribute(\"uv\",k);this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.SphereBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.SphereBufferGeometry.prototype.constructor=THREE.SphereBufferGeometry;\r\n\tTHREE.TextGeometry=function(a,b){b=b||{};var c=b.font;if(!1===c instanceof THREE.Font)return console.error(\"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"),new THREE.Geometry;c=c.generateShapes(a,b.size,b.curveSegments);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b);this.type=\"TextGeometry\"};\r\n\tTHREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);THREE.TextGeometry.prototype.constructor=THREE.TextGeometry;\r\n\tTHREE.TorusBufferGeometry=function(a,b,c,d,e){THREE.BufferGeometry.call(this);this.type=\"TorusBufferGeometry\";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||100;b=b||40;c=Math.floor(c)||8;d=Math.floor(d)||6;e=e||2*Math.PI;var f=(c+1)*(d+1),g=c*d*6,g=new (65535<g?Uint32Array:Uint16Array)(g),h=new Float32Array(3*f),k=new Float32Array(3*f),f=new Float32Array(2*f),l=0,n=0,p=0,m=new THREE.Vector3,q=new THREE.Vector3,r=new THREE.Vector3,s,u;for(s=0;s<=c;s++)for(u=0;u<=d;u++){var x=\r\n\tu/d*e,v=s/c*Math.PI*2;q.x=(a+b*Math.cos(v))*Math.cos(x);q.y=(a+b*Math.cos(v))*Math.sin(x);q.z=b*Math.sin(v);h[l]=q.x;h[l+1]=q.y;h[l+2]=q.z;m.x=a*Math.cos(x);m.y=a*Math.sin(x);r.subVectors(q,m).normalize();k[l]=r.x;k[l+1]=r.y;k[l+2]=r.z;f[n]=u/d;f[n+1]=s/c;l+=3;n+=2}for(s=1;s<=c;s++)for(u=1;u<=d;u++)a=(d+1)*(s-1)+u-1,b=(d+1)*(s-1)+u,e=(d+1)*s+u,g[p]=(d+1)*s+u-1,g[p+1]=a,g[p+2]=e,g[p+3]=a,g[p+4]=b,g[p+5]=e,p+=6;this.setIndex(new THREE.BufferAttribute(g,1));this.addAttribute(\"position\",new THREE.BufferAttribute(h,\r\n\t3));this.addAttribute(\"normal\",new THREE.BufferAttribute(k,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(f,2))};THREE.TorusBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TorusBufferGeometry.prototype.constructor=THREE.TorusBufferGeometry;\r\n\tTHREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.type=\"TorusGeometry\";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};this.fromBufferGeometry(new THREE.TorusBufferGeometry(a,b,c,d,e))};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry;\r\n\tTHREE.TorusKnotBufferGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=c/b;b=Math.cos(a);e.x=d*(2+b)*.5*f;e.y=d*(2+b)*g*.5;e.z=d*Math.sin(a)*.5}THREE.BufferGeometry.call(this);this.type=\"TorusKnotBufferGeometry\";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};a=a||100;b=b||40;c=Math.floor(c)||64;d=Math.floor(d)||8;e=e||2;f=f||3;var h=(d+1)*(c+1),k=d*c*6,k=new THREE.BufferAttribute(new (65535<k?Uint32Array:Uint16Array)(k),1),l=new THREE.BufferAttribute(new Float32Array(3*\r\n\th),3),n=new THREE.BufferAttribute(new Float32Array(3*h),3),h=new THREE.BufferAttribute(new Float32Array(2*h),2),p,m,q=0,r=0,s=new THREE.Vector3,u=new THREE.Vector3,x=new THREE.Vector2,v=new THREE.Vector3,C=new THREE.Vector3,w=new THREE.Vector3,D=new THREE.Vector3,A=new THREE.Vector3;for(p=0;p<=c;++p)for(m=p/c*e*Math.PI*2,g(m,e,f,a,v),g(m+.01,e,f,a,C),D.subVectors(C,v),A.addVectors(C,v),w.crossVectors(D,A),A.crossVectors(w,D),w.normalize(),A.normalize(),m=0;m<=d;++m){var y=m/d*Math.PI*2,B=-b*Math.cos(y),\r\n\ty=b*Math.sin(y);s.x=v.x+(B*A.x+y*w.x);s.y=v.y+(B*A.y+y*w.y);s.z=v.z+(B*A.z+y*w.z);l.setXYZ(q,s.x,s.y,s.z);u.subVectors(s,v).normalize();n.setXYZ(q,u.x,u.y,u.z);x.x=p/c;x.y=m/d;h.setXY(q,x.x,x.y);q++}for(m=1;m<=c;m++)for(p=1;p<=d;p++)a=(d+1)*m+(p-1),b=(d+1)*m+p,e=(d+1)*(m-1)+p,k.setX(r,(d+1)*(m-1)+(p-1)),r++,k.setX(r,a),r++,k.setX(r,e),r++,k.setX(r,a),r++,k.setX(r,b),r++,k.setX(r,e),r++;this.setIndex(k);this.addAttribute(\"position\",l);this.addAttribute(\"normal\",n);this.addAttribute(\"uv\",h)};\r\n\tTHREE.TorusKnotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TorusKnotBufferGeometry.prototype.constructor=THREE.TorusKnotBufferGeometry;\r\n\tTHREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.type=\"TorusKnotGeometry\";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};void 0!==g&&console.warn(\"THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.\");this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(a,b,c,d,e,f));this.mergeVertices()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);\r\n\tTHREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry;\r\n\tTHREE.TubeGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type=\"TubeGeometry\";this.parameters={path:a,segments:b,radius:c,radialSegments:d,closed:e,taper:f};b=b||64;c=c||1;d=d||8;e=e||!1;f=f||THREE.TubeGeometry.NoTaper;var g=[],h,k,l=b+1,n,p,m,q,r,s=new THREE.Vector3,u,x,v;u=new THREE.TubeGeometry.FrenetFrames(a,b,e);x=u.normals;v=u.binormals;this.tangents=u.tangents;this.normals=x;this.binormals=v;for(u=0;u<l;u++)for(g[u]=[],n=u/(l-1),r=a.getPointAt(n),h=x[u],k=v[u],m=c*f(n),n=0;n<\r\n\td;n++)p=n/d*2*Math.PI,q=-m*Math.cos(p),p=m*Math.sin(p),s.copy(r),s.x+=q*h.x+p*k.x,s.y+=q*h.y+p*k.y,s.z+=q*h.z+p*k.z,g[u][n]=this.vertices.push(new THREE.Vector3(s.x,s.y,s.z))-1;for(u=0;u<b;u++)for(n=0;n<d;n++)f=e?(u+1)%b:u+1,l=(n+1)%d,a=g[u][n],c=g[f][n],f=g[f][l],l=g[u][l],s=new THREE.Vector2(u/b,n/d),x=new THREE.Vector2((u+1)/b,n/d),v=new THREE.Vector2((u+1)/b,(n+1)/d),h=new THREE.Vector2(u/b,(n+1)/d),this.faces.push(new THREE.Face3(a,c,l)),this.faceVertexUvs[0].push([s,x,h]),this.faces.push(new THREE.Face3(c,\r\n\tf,l)),this.faceVertexUvs[0].push([x.clone(),v,h.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry;THREE.TubeGeometry.NoTaper=function(a){return 1};THREE.TubeGeometry.SinusoidalTaper=function(a){return Math.sin(Math.PI*a)};\r\n\tTHREE.TubeGeometry.FrenetFrames=function(a,b,c){var d=new THREE.Vector3,e=[],f=[],g=[],h=new THREE.Vector3,k=new THREE.Matrix4;b+=1;var l,n,p;this.tangents=e;this.normals=f;this.binormals=g;for(l=0;l<b;l++)n=l/(b-1),e[l]=a.getTangentAt(n),e[l].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;l=Math.abs(e[0].x);n=Math.abs(e[0].y);p=Math.abs(e[0].z);l<=a&&(a=l,d.set(1,0,0));n<=a&&(a=n,d.set(0,1,0));p<=a&&d.set(0,0,1);h.crossVectors(e[0],d).normalize();f[0].crossVectors(e[0],\r\n\th);g[0].crossVectors(e[0],f[0]);for(l=1;l<b;l++)f[l]=f[l-1].clone(),g[l]=g[l-1].clone(),h.crossVectors(e[l-1],e[l]),h.length()>Number.EPSILON&&(h.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(k.makeRotationAxis(h,d))),g[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(h.crossVectors(f[0],f[b-1]))&&(d=-d),l=1;l<b;l++)f[l].applyMatrix4(k.makeRotationAxis(e[l],d*l)),g[l].crossVectors(e[l],f[l])};\r\n\tTHREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c,d){d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()],void 0,d);k.faces.push(d);u.copy(a).add(b).add(c).divideScalar(3);d=Math.atan2(u.z,-u.x);k.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}function g(a,\r\n\tb){for(var c=Math.pow(2,b),d=e(k.vertices[a.a]),g=e(k.vertices[a.b]),h=e(k.vertices[a.c]),l=[],m=a.materialIndex,n=0;n<=c;n++){l[n]=[];for(var p=e(d.clone().lerp(h,n/c)),q=e(g.clone().lerp(h,n/c)),r=c-n,s=0;s<=r;s++)l[n][s]=0===s&&n===c?p:e(p.clone().lerp(q,s/r))}for(n=0;n<c;n++)for(s=0;s<2*(c-n)-1;s++)d=Math.floor(s/2),0===s%2?f(l[n][d+1],l[n+1][d],l[n][d],m):f(l[n][d+1],l[n+1][d+1],l[n+1][d],m)}function h(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/\r\n\t2/Math.PI+.5,a.y));return a.clone()}THREE.Geometry.call(this);this.type=\"PolyhedronGeometry\";this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;for(var k=this,l=0,n=a.length;l<n;l+=3)e(new THREE.Vector3(a[l],a[l+1],a[l+2]));a=this.vertices;for(var p=[],m=l=0,n=b.length;l<n;l+=3,m++){var q=a[b[l]],r=a[b[l+1]],s=a[b[l+2]];p[m]=new THREE.Face3(q.index,r.index,s.index,[q.clone(),r.clone(),s.clone()],void 0,m)}for(var u=new THREE.Vector3,l=0,n=p.length;l<n;l++)g(p[l],d);l=0;for(n=this.faceVertexUvs[0].length;l<\r\n\tn;l++)b=this.faceVertexUvs[0][l],d=b[0].x,a=b[1].x,p=b[2].x,m=Math.max(d,a,p),q=Math.min(d,a,p),.9<m&&.1>q&&(.2>d&&(b[0].x+=1),.2>a&&(b[1].x+=1),.2>p&&(b[2].x+=1));l=0;for(n=this.vertices.length;l<n;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry;\r\n\tTHREE.DodecahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2,d=1/c;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,\r\n\t12,14,1,14,5,1,5,9],a,b);this.type=\"DodecahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.DodecahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry;\r\n\tTHREE.IcosahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type=\"IcosahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.IcosahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);\r\n\tTHREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;THREE.OctahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type=\"OctahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.OctahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry;\r\n\tTHREE.TetrahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type=\"TetrahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.TetrahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry;\r\n\tTHREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);this.type=\"ParametricGeometry\";this.parameters={func:a,slices:b,stacks:c};var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,h,k,l,n=b+1;for(g=0;g<=c;g++)for(l=g/c,h=0;h<=b;h++)k=h/b,k=a(k,l),d.push(k);var p,m,q,r;for(g=0;g<c;g++)for(h=0;h<b;h++)a=g*n+h,d=g*n+h+1,l=(g+1)*n+h+1,k=(g+1)*n+h,p=new THREE.Vector2(h/b,g/c),m=new THREE.Vector2((h+1)/b,g/c),q=new THREE.Vector2((h+1)/b,(g+1)/c),r=new THREE.Vector2(h/b,(g+1)/c),e.push(new THREE.Face3(a,\r\n\td,k)),f.push([p,m,r]),e.push(new THREE.Face3(d,l,k)),f.push([m.clone(),q,r.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry;\r\n\tTHREE.WireframeGeometry=function(a){function b(a,b){return a-b}THREE.BufferGeometry.call(this);var c=[0,0],d={},e=[\"a\",\"b\",\"c\"];if(a instanceof THREE.Geometry){var f=a.vertices,g=a.faces,h=0,k=new Uint32Array(6*g.length);a=0;for(var l=g.length;a<l;a++)for(var n=g[a],p=0;3>p;p++){c[0]=n[e[p]];c[1]=n[e[(p+1)%3]];c.sort(b);var m=c.toString();void 0===d[m]&&(k[2*h]=c[0],k[2*h+1]=c[1],d[m]=!0,h++)}c=new Float32Array(6*h);a=0;for(l=h;a<l;a++)for(p=0;2>p;p++)d=f[k[2*a+p]],h=6*a+3*p,c[h+0]=d.x,c[h+1]=d.y,\r\n\tc[h+2]=d.z;this.addAttribute(\"position\",new THREE.BufferAttribute(c,3))}else if(a instanceof THREE.BufferGeometry){if(null!==a.index){l=a.index.array;f=a.attributes.position;e=a.groups;h=0;0===e.length&&a.addGroup(0,l.length);k=new Uint32Array(2*l.length);g=0;for(n=e.length;g<n;++g){a=e[g];p=a.start;m=a.count;a=p;for(var q=p+m;a<q;a+=3)for(p=0;3>p;p++)c[0]=l[a+p],c[1]=l[a+(p+1)%3],c.sort(b),m=c.toString(),void 0===d[m]&&(k[2*h]=c[0],k[2*h+1]=c[1],d[m]=!0,h++)}c=new Float32Array(6*h);a=0;for(l=h;a<\r\n\tl;a++)for(p=0;2>p;p++)h=6*a+3*p,d=k[2*a+p],c[h+0]=f.getX(d),c[h+1]=f.getY(d),c[h+2]=f.getZ(d)}else for(f=a.attributes.position.array,h=f.length/3,k=h/3,c=new Float32Array(6*h),a=0,l=k;a<l;a++)for(p=0;3>p;p++)h=18*a+6*p,k=9*a+3*p,c[h+0]=f[k],c[h+1]=f[k+1],c[h+2]=f[k+2],d=9*a+(p+1)%3*3,c[h+3]=f[d],c[h+4]=f[d+1],c[h+5]=f[d+2];this.addAttribute(\"position\",new THREE.BufferAttribute(c,3))}};THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);\r\n\tTHREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry;THREE.AxisHelper=function(a){a=a||1;var b=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),c=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]);a=new THREE.BufferGeometry;a.addAttribute(\"position\",new THREE.BufferAttribute(b,3));a.addAttribute(\"color\",new THREE.BufferAttribute(c,3));b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,a,b)};THREE.AxisHelper.prototype=Object.create(THREE.LineSegments.prototype);\r\n\tTHREE.AxisHelper.prototype.constructor=THREE.AxisHelper;\r\n\tTHREE.ArrowHelper=function(){var a=new THREE.BufferGeometry;a.addAttribute(\"position\",new THREE.Float32Attribute([0,0,0,0,1,0],3));var b=new THREE.CylinderBufferGeometry(0,.5,1,5,1);b.translate(0,-.5,0);return function(c,d,e,f,g,h){THREE.Object3D.call(this);void 0===f&&(f=16776960);void 0===e&&(e=1);void 0===g&&(g=.2*e);void 0===h&&(h=.2*g);this.position.copy(d);this.line=new THREE.Line(a,new THREE.LineBasicMaterial({color:f}));this.line.matrixAutoUpdate=!1;this.add(this.line);this.cone=new THREE.Mesh(b,\r\n\tnew THREE.MeshBasicMaterial({color:f}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(c);this.setLength(e,g,h)}}();THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper;\r\n\tTHREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();THREE.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,Math.max(0,a-b),1);this.line.updateMatrix();this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};\r\n\tTHREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.copy(a);this.cone.material.color.copy(a)};THREE.BoxHelper=function(a){var b=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),c=new Float32Array(24),d=new THREE.BufferGeometry;d.setIndex(new THREE.BufferAttribute(b,1));d.addAttribute(\"position\",new THREE.BufferAttribute(c,3));THREE.LineSegments.call(this,d,new THREE.LineBasicMaterial({color:16776960}));void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.LineSegments.prototype);\r\n\tTHREE.BoxHelper.prototype.constructor=THREE.BoxHelper;\r\n\tTHREE.BoxHelper.prototype.update=function(){var a=new THREE.Box3;return function(b){b instanceof THREE.Box3?a.copy(b):a.setFromObject(b);if(!a.isEmpty()){b=a.min;var c=a.max,d=this.geometry.attributes.position,e=d.array;e[0]=c.x;e[1]=c.y;e[2]=c.z;e[3]=b.x;e[4]=c.y;e[5]=c.z;e[6]=b.x;e[7]=b.y;e[8]=c.z;e[9]=c.x;e[10]=b.y;e[11]=c.z;e[12]=c.x;e[13]=c.y;e[14]=b.z;e[15]=b.x;e[16]=c.y;e[17]=b.z;e[18]=b.x;e[19]=b.y;e[20]=b.z;e[21]=c.x;e[22]=b.y;e[23]=b.z;d.needsUpdate=!0;this.geometry.computeBoundingSphere()}}}();\r\n\tTHREE.BoundingBoxHelper=function(a,b){var c=void 0!==b?b:8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};\r\n\tTHREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b(\"n1\",\"n2\",16755200);b(\"n2\",\"n4\",16755200);b(\"n4\",\"n3\",16755200);b(\"n3\",\"n1\",16755200);b(\"f1\",\"f2\",16755200);b(\"f2\",\"f4\",16755200);b(\"f4\",\"f3\",16755200);b(\"f3\",\"f1\",16755200);b(\"n1\",\"f1\",16755200);\r\n\tb(\"n2\",\"f2\",16755200);b(\"n3\",\"f3\",16755200);b(\"n4\",\"f4\",16755200);b(\"p\",\"n1\",16711680);b(\"p\",\"n2\",16711680);b(\"p\",\"n3\",16711680);b(\"p\",\"n4\",16711680);b(\"u1\",\"u2\",43775);b(\"u2\",\"u3\",43775);b(\"u3\",\"u1\",43775);b(\"c\",\"t\",16777215);b(\"p\",\"c\",3355443);b(\"cn1\",\"cn2\",3355443);b(\"cn3\",\"cn4\",3355443);b(\"cf1\",\"cf2\",3355443);b(\"cf3\",\"cf4\",3355443);THREE.LineSegments.call(this,d,e);this.camera=a;this.camera.updateProjectionMatrix();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};\r\n\tTHREE.CameraHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.CameraHelper.prototype.constructor=THREE.CameraHelper;\r\n\tTHREE.CameraHelper.prototype.update=function(){function a(a,g,h,k){d.set(g,h,k).unproject(e);a=c[a];if(void 0!==a)for(g=0,h=a.length;g<h;g++)b.vertices[a[g]].copy(d)}var b,c,d=new THREE.Vector3,e=new THREE.Camera;return function(){b=this.geometry;c=this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a(\"c\",0,0,-1);a(\"t\",0,0,1);a(\"n1\",-1,-1,-1);a(\"n2\",1,-1,-1);a(\"n3\",-1,1,-1);a(\"n4\",1,1,-1);a(\"f1\",-1,-1,1);a(\"f2\",1,-1,1);a(\"f3\",-1,1,1);a(\"f4\",1,1,1);a(\"u1\",.7,1.1,-1);a(\"u2\",-.7,1.1,\r\n\t-1);a(\"u3\",0,2,-1);a(\"cf1\",-1,0,1);a(\"cf2\",1,0,1);a(\"cf3\",0,-1,1);a(\"cf4\",0,1,1);a(\"cn1\",-1,0,-1);a(\"cn2\",1,0,-1);a(\"cn3\",0,-1,-1);a(\"cn4\",0,1,-1);b.verticesNeedUpdate=!0}}();\r\n\tTHREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;void 0===b&&(b=1);var c=new THREE.BufferGeometry;c.addAttribute(\"position\",new THREE.Float32Attribute([-b,b,0,b,b,0,b,-b,0,-b,-b,0,-b,b,0],3));var d=new THREE.LineBasicMaterial({fog:!1});this.add(new THREE.Line(c,d));c=new THREE.BufferGeometry;c.addAttribute(\"position\",new THREE.Float32Attribute([0,0,0,0,0,1],3));this.add(new THREE.Line(c,\r\n\td));this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper;THREE.DirectionalLightHelper.prototype.dispose=function(){var a=this.children[0],b=this.children[1];a.geometry.dispose();a.material.dispose();b.geometry.dispose();b.material.dispose()};\r\n\tTHREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);var d=this.children[0],e=this.children[1];d.lookAt(c);d.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);e.lookAt(c);e.scale.z=c.length()}}();\r\n\tTHREE.EdgesHelper=function(a,b,c){b=void 0!==b?b:16777215;THREE.LineSegments.call(this,new THREE.EdgesGeometry(a.geometry,c),new THREE.LineBasicMaterial({color:b}));this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.EdgesHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper;\r\n\tTHREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=0;c=this.object.geometry;c instanceof THREE.Geometry?b=c.faces.length:console.warn(\"THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.\");c=new THREE.BufferGeometry;b=new THREE.Float32Attribute(6*b,3);c.addAttribute(\"position\",b);THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:a,linewidth:d}));this.matrixAutoUpdate=\r\n\t!1;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper;\r\n\tTHREE.FaceNormalsHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(){this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);for(var d=this.object.matrixWorld,e=this.geometry.attributes.position,f=this.object.geometry,g=f.vertices,f=f.faces,h=0,k=0,l=f.length;k<l;k++){var n=f[k],p=n.normal;a.copy(g[n.a]).add(g[n.b]).add(g[n.c]).divideScalar(3).applyMatrix4(d);b.copy(p).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);\r\n\te.setXYZ(h,a.x,a.y,a.z);h+=1;e.setXYZ(h,b.x,b.y,b.z);h+=1}e.needsUpdate=!0;return this}}();\r\n\tTHREE.GridHelper=function(a,b,c,d){c=new THREE.Color(void 0!==c?c:4473924);d=new THREE.Color(void 0!==d?d:8947848);for(var e=[],f=[],g=-a,h=0;g<=a;g+=b){e.push(-a,0,g,a,0,g);e.push(g,0,-a,g,0,a);var k=0===g?c:d;k.toArray(f,h);h+=3;k.toArray(f,h);h+=3;k.toArray(f,h);h+=3;k.toArray(f,h);h+=3}a=new THREE.BufferGeometry;a.addAttribute(\"position\",new THREE.Float32Attribute(e,3));a.addAttribute(\"color\",new THREE.Float32Attribute(f,3));e=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,\r\n\ta,e)};THREE.GridHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.GridHelper.prototype.constructor=THREE.GridHelper;THREE.GridHelper.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")};\r\n\tTHREE.HemisphereLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];var c=new THREE.SphereGeometry(b,4,2);c.rotateX(-Math.PI/2);for(var d=0;8>d;d++)c.faces[d].color=this.colors[4>d?0:1];d=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(c,d);this.add(this.lightSphere);this.update()};\r\n\tTHREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};\r\n\tTHREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();\r\n\tTHREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereBufferGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper;\r\n\tTHREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};\r\n\tTHREE.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var b=new THREE.Geometry,c=0;c<this.bones.length;c++)this.bones[c].parent instanceof THREE.Bone&&(b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3),b.colors.push(new THREE.Color(0,0,1)),b.colors.push(new THREE.Color(0,1,0)));b.dynamic=!0;c=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.LineSegments.call(this,b,c);this.root=a;this.matrix=a.matrixWorld;\r\n\tthis.matrixAutoUpdate=!1;this.update()};THREE.SkeletonHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList=function(a){var b=[];a instanceof THREE.Bone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,this.getBoneList(a.children[c]));return b};\r\n\tTHREE.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,b=(new THREE.Matrix4).getInverse(this.root.matrixWorld),c=new THREE.Matrix4,d=0,e=0;e<this.bones.length;e++){var f=this.bones[e];f.parent instanceof THREE.Bone&&(c.multiplyMatrices(b,f.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(b,f.parent.matrixWorld),a.vertices[d+1].setFromMatrixPosition(c),d+=2)}a.verticesNeedUpdate=!0;a.computeBoundingSphere()};\r\n\tTHREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.BufferGeometry;for(var b=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],c=0,d=1;32>c;c++,d++){var e=c/32*Math.PI*2,f=d/32*Math.PI*2;b.push(Math.cos(e),Math.sin(e),1,Math.cos(f),Math.sin(f),1)}a.addAttribute(\"position\",new THREE.Float32Attribute(b,3));b=new THREE.LineBasicMaterial({fog:!1});this.cone=new THREE.LineSegments(a,\r\n\tb);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper;THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};\r\n\tTHREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E3,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();\r\n\tTHREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16711680;d=void 0!==d?d:1;b=0;c=this.object.geometry;c instanceof THREE.Geometry?b=3*c.faces.length:c instanceof THREE.BufferGeometry&&(b=c.attributes.normal.count);c=new THREE.BufferGeometry;b=new THREE.Float32Attribute(6*b,3);c.addAttribute(\"position\",b);THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()};\r\n\tTHREE.VertexNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper;\r\n\tTHREE.VertexNormalsHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(){var d=[\"a\",\"b\",\"c\"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var e=this.object.matrixWorld,f=this.geometry.attributes.position,g=this.object.geometry;if(g instanceof THREE.Geometry)for(var h=g.vertices,k=g.faces,l=g=0,n=k.length;l<n;l++)for(var p=k[l],m=0,q=p.vertexNormals.length;m<q;m++){var r=p.vertexNormals[m];a.copy(h[p[d[m]]]).applyMatrix4(e);\r\n\tb.copy(r).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);f.setXYZ(g,a.x,a.y,a.z);g+=1;f.setXYZ(g,b.x,b.y,b.z);g+=1}else if(g instanceof THREE.BufferGeometry)for(d=g.attributes.position,h=g.attributes.normal,m=g=0,q=d.count;m<q;m++)a.set(d.getX(m),d.getY(m),d.getZ(m)).applyMatrix4(e),b.set(h.getX(m),h.getY(m),h.getZ(m)),b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),f.setXYZ(g,a.x,a.y,a.z),g+=1,f.setXYZ(g,b.x,b.y,b.z),g+=1;f.needsUpdate=!0;return this}}();\r\n\tTHREE.WireframeHelper=function(a,b){var c=void 0!==b?b:16777215;THREE.LineSegments.call(this,new THREE.WireframeGeometry(a.geometry),new THREE.LineBasicMaterial({color:c}));this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.WireframeHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper;THREE.ImmediateRenderObject=function(a){THREE.Object3D.call(this);this.material=a;this.render=function(a){}};\r\n\tTHREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject;THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation(\"__default\",0,c-1,c/1);this.setAnimationWeight(\"__default\",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh;\r\n\tTHREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={start:b,end:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};\r\n\tTHREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)_?(\\d+)/i,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(b);if(h&&1<h.length){var k=h[1];d[k]||(d[k]={start:Infinity,end:-Infinity});h=d[k];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=k)}}for(k in d)h=d[k],this.createAnimation(k,h.start,h.end,a);this.firstAnimation=c};\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};\r\n\tTHREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):console.warn(\"THREE.MorphBlendMesh: animation[\"+a+\"] undefined in .playAnimation()\")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};\r\n\tTHREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.start+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;f!==d.currentFrame&&\r\n\t(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);d.currentFrame!==d.lastFrame?(this.morphTargetInfluences[d.currentFrame]=e*g,this.morphTargetInfluences[d.lastFrame]=(1-e)*g):this.morphTargetInfluences[d.currentFrame]=g}}};\r\n\t\r\n\t// Export the THREE object for **Node.js**, with\r\n\t// backwards-compatibility for the old `require()` API. If we're in\r\n\t// the browser, add `_` as a global object via a string identifier,\r\n\t// for Closure Compiler \"advanced\" mode.\r\n\tif (true) {\r\n\t  if (typeof module !== 'undefined' && module.exports) {\r\n\t    exports = module.exports = THREE;\r\n\t  }\r\n\t  exports.THREE = THREE;\r\n\t} else {\r\n\t  this['THREE'] = THREE;\r\n\t}\r\n\n\n/***/ },\n\n/***/ 277:\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div id=canvas-box _v-4f873413=\\\"\\\"> <h3 _v-4f873413=\\\"\\\">个人项目</h3> <h3 _v-4f873413=\\\"\\\">团队项目</h3> <h3 _v-4f873413=\\\"\\\">团队项目</h3> <h3 _v-4f873413=\\\"\\\">团队项目</h3> </div> \";\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** static/js/1.22c8afe2de0fafe5d9eb.js\n **/","var __vue_script__, __vue_template__\nvar __vue_styles__ = {}\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!sass-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./demo.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./demo.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-4f873413!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./demo.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nvar __vue_options__ = typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports\nif (__vue_template__) {\n__vue_options__.template = __vue_template__\n}\nif (!__vue_options__.computed) __vue_options__.computed = {}\nObject.keys(__vue_styles__).forEach(function (key) {\nvar module = __vue_styles__[key]\n__vue_options__.computed[key] = function () { return module }\n})\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/demo/demo.vue\n ** module id = 42\n ** module chunks = 1\n **/","<template>\n  <div id=\"canvas-box\">\n    <h3>个人项目</h3>\n    <h3>团队项目</h3>\n    <h3>团队项目</h3>\n    <h3>团队项目</h3>\n  </div>\n</template>\n\n<script>\n  import THREE from './../../../node_modules/three/three.min.js'\n  export default {\n    name: 'demo',\n    data () {\n      return {}\n    },\n    ready () {\n      let scene, camera, renderer, light, width, height\n      function initThree () {\n        let canvas = document.querySelector('#canvas-box')\n        width = canvas.clientWidth / 2\n        height = canvas.clientHeight\n        renderer = new THREE.WebGLRenderer({\n          antialias: true\n        })\n\n        renderer.setSize(width, height)\n        canvas.appendChild(renderer.domElement)\n        renderer.setClearColor(0xcccccc, 1.0)\n      }\n\n      function initCamera () {\n        camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000)\n        camera.position.x = 0\n        camera.position.y = 1000\n        camera.position.z = 0\n        camera.up.x = 0\n        camera.up.y = 0\n        camera.up.z = 0\n        camera.lookAt({x: 0, y: 0, z: 0})\n      }\n\n      function initScene () {\n        scene = new THREE.Scene()\n      }\n\n      function initLight () {\n        light = new THREE.DirectionalLight(0xFFFFFF, 1.0)\n        light.position.set(0, 1, 0)\n        scene.add(light)\n      }\n\n      function initCube () {\n        let geometry = new THREE.Geometry()\n        let material = new THREE.LineBasicMaterial({vertexColors: true})\n        let color1 = new THREE.Color(0x000000)\n        let color2 = new THREE.Color(0xFFFFFF)\n        let point1 = new THREE.Vector3(-30, 0, 30)\n        let point2 = new THREE.Vector3(30, 0, -30)\n        geometry.vertices.push(point1)\n        geometry.vertices.push(point2)\n        geometry.colors.push(color1, color2)\n\n        let line = new THREE.Line(geometry, material, THREE.LineSegments)\n        scene.add(line)\n      }\n\n      function threeStart () {\n        initThree()\n        initCamera()\n        initScene()\n        initLight()\n        initCube()\n        renderer.clear()\n        renderer.render(scene, camera)\n      }\n      threeStart()\n      window.scene = scene\n      window.THREE = THREE\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  @import './../../assets/style/mixin.scss';\n</style>\n\n\n/** WEBPACK FOOTER **\n ** demo.vue?3a8bf5ae\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\", {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"demo.vue\",\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./~/sass-loader?sourceMap!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/demo/demo.vue\n ** module id = 90\n ** module chunks = 1\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./../../../node_modules/sass-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./demo.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/vue-style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./../../../node_modules/sass-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./demo.vue\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./../../../node_modules/sass-loader/index.js?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./demo.vue\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"extract\":true,\"remove\":true}!./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-4f873413&scoped=true!./~/sass-loader?sourceMap!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/demo/demo.vue\n ** module id = 98\n ** module chunks = 1\n **/","var self = self || {};// threejs.org/license\r\n'use strict';var THREE={REVISION:\"77\"};\"function\"===typeof define&&define.amd?define(\"three\",THREE):\"undefined\"!==typeof exports&&\"undefined\"!==typeof module&&(module.exports=THREE);void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52));void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,\"name\",{get:function(){return this.toString().match(/^\\s*function\\s*(\\S*)\\s*\\(/)[1]}});\r\nvoid 0===Object.assign&&function(){Object.assign=function(a){if(void 0===a||null===a)throw new TypeError(\"Cannot convert undefined or null to object\");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)Object.prototype.hasOwnProperty.call(d,e)&&(b[e]=d[e])}return b}}();\r\nObject.assign(THREE,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,\r\nMaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,\r\nCineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1E3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,\r\nByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:THREE.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,\r\nRGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3E3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,\r\nRGBADepthPacking:3201});THREE.Color=function(a,b,c){return void 0===b&&void 0===c?this.set(a):this.setRGB(a,b,c)};\r\nTHREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):\"number\"===typeof a?this.setHex(a):\"string\"===typeof a&&this.setStyle(a);return this},setScalar:function(a){this.b=this.g=this.r=a},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(){function a(a,c,d){0>d&&(d+=1);1<d&&(d-=1);return d<1/6?a+6*(c-a)*\r\nd:.5>d?c:d<2/3?a+6*(c-a)*(2/3-d):a}return function(b,c,d){b=THREE.Math.euclideanModulo(b,1);c=THREE.Math.clamp(c,0,1);d=THREE.Math.clamp(d,0,1);0===c?this.r=this.g=this.b=d:(c=.5>=d?d*(1+c):d+c-d*c,d=2*d-c,this.r=a(d,c,b+1/3),this.g=a(d,c,b),this.b=a(d,c,b-1/3));return this}}(),setStyle:function(a){function b(b){void 0!==b&&1>parseFloat(b)&&console.warn(\"THREE.Color: Alpha component of \"+a+\" will be ignored.\")}var c;if(c=/^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(a)){var d=c[2];switch(c[1]){case \"rgb\":case \"rgba\":if(c=\r\n/^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(d))return this.r=Math.min(255,parseInt(c[1],10))/255,this.g=Math.min(255,parseInt(c[2],10))/255,this.b=Math.min(255,parseInt(c[3],10))/255,b(c[5]),this;if(c=/^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(d))return this.r=Math.min(100,parseInt(c[1],10))/100,this.g=Math.min(100,parseInt(c[2],10))/100,this.b=Math.min(100,parseInt(c[3],10))/100,b(c[5]),this;break;case \"hsl\":case \"hsla\":if(c=/^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(d)){var d=\r\nparseFloat(c[1])/360,e=parseInt(c[2],10)/100,f=parseInt(c[3],10)/100;b(c[5]);return this.setHSL(d,e,f)}}}else if(c=/^\\#([A-Fa-f0-9]+)$/.exec(a)){c=c[1];d=c.length;if(3===d)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===d)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}a&&0<a.length&&\r\n(c=THREE.ColorKeywords[a],void 0!==c?this.setHex(c):console.warn(\"THREE.Color: Unknown color \"+a));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);var c=0<b?1/b:1;this.r=Math.pow(a.r,c);this.g=Math.pow(a.g,c);this.b=Math.pow(a.b,\r\nc);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return(\"000000\"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=\r\n(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=\r\na.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,b){void 0===b&&(b=0);this.r=a[b];this.g=a[b+1];this.b=a[b+2];return this},toArray:function(a,\r\nb){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a}};\r\nTHREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,\r\ndarkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,\r\ngrey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,\r\nlime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,\r\npalegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,\r\ntomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};\r\nTHREE.Quaternion.prototype={constructor:THREE.Quaternion,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},\r\ncopy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!1===a instanceof THREE.Euler)throw Error(\"THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),h=Math.sin(a._z/2),k=a.order;\"XYZ\"===k?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):\"YXZ\"===\r\nk?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):\"ZXY\"===k?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):\"ZYX\"===k?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):\"YZX\"===k?(this._x=f*d*e+c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e-f*g*h):\"XZY\"===k&&(this._x=f*d*e-c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e+f*g*h);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,\r\nb){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],l=c+f+b;0<l?(c=.5/Math.sqrt(l+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=\r\n.25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;return this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){this._x*=\r\n-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},\r\nmultiply:function(a,b){return void 0!==b?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},premultiply:function(a){return this.multiplyQuaternions(a,this)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,k=b._z,l=b._w;this._x=c*l+f*g+d*k-e*h;this._y=d*l+f*h+e*g-c*k;this._z=e*l+f*k+c*h-d*g;this._w=f*l-c*g-d*h-e*k;this.onChangeCallback();\r\nreturn this},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.sqrt(1-g*g);if(.001>Math.abs(h))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;var k=Math.atan2(h,g),g=Math.sin((1-b)*k)/h,h=Math.sin(b*\r\nk)/h;this._w=f*g+this._w*h;this._x=c*g+this._x*h;this._y=d*g+this._y*h;this._z=e*g+this._z*h;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];this._w=a[b+3];this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},onChange:function(a){this.onChangeCallback=\r\na;return this},onChangeCallback:function(){}};\r\nObject.assign(THREE.Quaternion,{slerp:function(a,b,c,d){return c.copy(a).slerp(b,d)},slerpFlat:function(a,b,c,d,e,f,g){var h=c[d+0],k=c[d+1],l=c[d+2];c=c[d+3];d=e[f+0];var n=e[f+1],p=e[f+2];e=e[f+3];if(c!==e||h!==d||k!==n||l!==p){f=1-g;var m=h*d+k*n+l*p+c*e,q=0<=m?1:-1,r=1-m*m;r>Number.EPSILON&&(r=Math.sqrt(r),m=Math.atan2(r,m*q),f=Math.sin(f*m)/r,g=Math.sin(g*m)/r);q*=g;h=h*f+d*q;k=k*f+n*q;l=l*f+p*q;c=c*f+e*q;f===1-g&&(g=1/Math.sqrt(h*h+k*k+l*l+c*c),h*=g,k*=g,l*=g,c*=g)}a[b]=h;a[b+1]=k;a[b+2]=l;\r\na[b+3]=c}});THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};\r\nTHREE.Vector2.prototype={constructor:THREE.Vector2,get width(){return this.x},set width(a){this.x=a},get height(){return this.y},set height(a){this.y=a},set:function(a,b){this.x=a;this.y=b;return this},setScalar:function(a){this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error(\"index is out of range: \"+a);}},getComponent:function(a){switch(a){case 0:return this.x;\r\ncase 1:return this.y;default:throw Error(\"index is out of range: \"+a);}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},\r\naddScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;return this},sub:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=a.y;return this},multiplyScalar:function(a){isFinite(a)?(this.x*=a,\r\nthis.y*=a):this.y=this.x=0;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));return this},clampScalar:function(){var a,b;return function(c,d){void 0===\r\na&&(a=new THREE.Vector2,b=new THREE.Vector2);a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(b,c))/c)},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);\r\nthis.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var a=Math.atan2(this.y,this.x);0>a&&(a+=2*Math.PI);return a},\r\ndistanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},\r\ntoArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];return this},rotateAround:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=this.x-a.x,f=this.y-a.y;this.x=e*c-f*d+a.x;this.y=e*d+f*c+a.y;return this}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};\r\nTHREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setScalar:function(a){this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error(\"index is out of range: \"+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;\r\ncase 2:return this.z;default:throw Error(\"index is out of range: \"+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,\r\nb){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;return this},sub:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},\r\nmultiply:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){isFinite(a)?(this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a;return function(b){!1===b instanceof THREE.Euler&&\r\nconsole.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\");void 0===a&&(a=new THREE.Quaternion);return this.applyQuaternion(a.setFromEuler(b))}}(),applyAxisAngle:function(){var a;return function(b,c){void 0===a&&(a=new THREE.Quaternion);return this.applyQuaternion(a.setFromAxisAngle(b,c))}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},\r\napplyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=\r\na.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,l=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-l*-f;this.y=k*a+b*-f+l*-e-h*-g;this.z=l*a+b*-g+h*-f-k*-e;return this},project:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));return this.applyProjection(a)}}(),unproject:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.matrixWorld,a.getInverse(b.projectionMatrix));return this.applyProjection(a)}}(),\r\ntransformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;return this.normalize()},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=\r\nMath.max(this.z,a.z);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3,b=new THREE.Vector3);a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(b,c))/c)},floor:function(){this.x=Math.floor(this.x);this.y=\r\nMath.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=\r\n-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=\r\n(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},cross:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;this.x=d*h-e*g;this.y=e*f-c*h;\r\nthis.z=c*g-d*f;return this},projectOnVector:function(){var a,b;return function(c){void 0===a&&(a=new THREE.Vector3);a.copy(c).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/\r\nMath.sqrt(this.lengthSq()*a.lengthSq());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setFromSpherical:function(a){var b=Math.sin(a.phi)*a.radius;this.x=b*Math.sin(a.theta);this.y=Math.cos(a.phi)*a.radius;this.z=b*Math.cos(a.theta);return this},setFromMatrixPosition:function(a){return this.setFromMatrixColumn(a,3)},setFromMatrixScale:function(a){var b=\r\nthis.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length();a=this.setFromMatrixColumn(a,2).length();this.x=b;this.y=c;this.z=a;return this},setFromMatrixColumn:function(a,b){if(\"number\"===typeof a){console.warn(\"THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).\");var c=a;a=b;b=c}return this.fromArray(a.elements,4*b)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+\r\n2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];this.z=a.array[b+2];return this}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};\r\nTHREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setScalar:function(a){this.w=this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error(\"index is out of range: \"+\r\na);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error(\"index is out of range: \"+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(a,b);\r\nthis.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;this.w+=a.w*b;return this},sub:function(a,b){if(void 0!==b)return console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(a,b);this.x-=\r\na.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){isFinite(a)?(this.x*=a,this.y*=a,this.z*=a,this.w*=a):this.w=this.z=this.y=this.x=0;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=\r\na[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],h=a[5],k=a[9];c=a[2];b=a[6];var l=a[10];if(.01>Math.abs(d-g)&&.01>Math.abs(f-c)&&.01>\r\nMath.abs(k-b)){if(.1>Math.abs(d+g)&&.1>Math.abs(f+c)&&.1>Math.abs(k+b)&&.1>Math.abs(e+h+l-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;h=(h+1)/2;l=(l+1)/2;d=(d+g)/4;f=(f+c)/4;k=(k+b)/4;e>h&&e>l?.01>e?(b=0,d=c=.707106781):(b=Math.sqrt(e),c=d/b,d=f/b):h>l?.01>h?(b=.707106781,c=0,d=.707106781):(c=Math.sqrt(h),b=d/c,d=k/c):.01>l?(c=b=.707106781,d=0):(d=Math.sqrt(l),b=f/d,c=k/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-k)*(b-k)+(f-c)*(f-c)+(g-d)*(g-d));.001>Math.abs(a)&&(a=1);this.x=(b-k)/\r\na;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+h+l-1)/2);return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);this.w=Math.min(this.w,a.w);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);this.w=Math.max(this.w,a.w);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));\r\nthis.w=Math.max(a.w,Math.min(b.w,this.w));return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector4,b=new THREE.Vector4);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=\r\nMath.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*\r\na.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-\r\nthis.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+\r\nc;this.x=a.array[b];this.y=a.array[b+1];this.z=a.array[b+2];this.w=a.array[b+3];return this}};THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders=\"XYZ YZX ZXY XZY YXZ ZYX\".split(\" \");THREE.Euler.DefaultOrder=\"XYZ\";\r\nTHREE.Euler.prototype={constructor:THREE.Euler,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,\r\nthis._y,this._z,this._order)},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=THREE.Math.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],k=e[5],l=e[9],n=e[2],p=e[6],e=e[10];b=b||this._order;\"XYZ\"===b?(this._y=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(p,k),this._z=0)):\"YXZ\"===b?(this._x=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?\r\n(this._y=Math.atan2(g,e),this._z=Math.atan2(h,k)):(this._y=Math.atan2(-n,a),this._z=0)):\"ZXY\"===b?(this._x=Math.asin(d(p,-1,1)),.99999>Math.abs(p)?(this._y=Math.atan2(-n,e),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,a))):\"ZYX\"===b?(this._y=Math.asin(-d(n,-1,1)),.99999>Math.abs(n)?(this._x=Math.atan2(p,e),this._z=Math.atan2(h,a)):(this._x=0,this._z=Math.atan2(-f,k))):\"YZX\"===b?(this._z=Math.asin(d(h,-1,1)),.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-n,a)):(this._x=\r\n0,this._y=Math.atan2(g,e))):\"XZY\"===b?(this._z=Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(p,k),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-l,e),this._y=0)):console.warn(\"THREE.Euler: .setFromRotationMatrix() given unsupported order: \"+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},setFromQuaternion:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeRotationFromQuaternion(b);return this.setFromRotationMatrix(a,c,d)}}(),setFromVector3:function(a,\r\nb){return this.set(a.x,a.y,a.z,b||this._order)},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);return this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;\r\na[b+3]=this._order;return a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){}};THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};\r\nTHREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},\r\nat:function(a,b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);\r\nthis.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};\r\nTHREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);\r\nreturn this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);\r\nthis.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>\r\nthis.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&\r\na.max.equals(this.max)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};\r\nTHREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromArray:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,k=a.length;h<k;h+=3){var l=a[h],n=a[h+1],p=a[h+2];l<b&&(b=l);n<c&&(c=n);p<d&&(d=p);l>e&&(e=l);n>f&&(f=n);p>g&&(g=p)}this.min.set(b,c,d);this.max.set(e,f,g)},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=\r\nnew THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);this.makeEmpty();b.traverse(function(b){var e=b.geometry;if(void 0!==e)if(e instanceof THREE.Geometry)for(var f=e.vertices,e=0,g=f.length;e<g;e++)a.copy(f[e]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a);else if(e instanceof THREE.BufferGeometry&&void 0!==\r\ne.attributes.position)for(f=e.attributes.position.array,e=0,g=f.length;e<g;e+=3)a.fromArray(f,e),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},\r\ncenter:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<\r\nthis.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<\r\nthis.min.z||a.min.z>this.max.z?!1:!0},intersectsSphere:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);this.clampPoint(b.center,a);return a.distanceToSquared(b.center)<=b.radius*b.radius}}(),intersectsPlane:function(a){var b,c;0<a.normal.x?(b=a.normal.x*this.min.x,c=a.normal.x*this.max.x):(b=a.normal.x*this.max.x,c=a.normal.x*this.min.x);0<a.normal.y?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y);0<a.normal.z?(b+=a.normal.z*\r\nthis.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z);return b<=a.constant&&c>=a.constant},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=.5*this.size(a).length();return b}}(),\r\nintersect:function(a){this.min.max(a.min);this.max.min(a.max);this.isEmpty()&&this.makeEmpty();return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){if(this.isEmpty())return this;a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);\r\na[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&\r\na.max.equals(this.max)}};THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]);0<arguments.length&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")};\r\nTHREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[1]=d;l[2]=g;l[3]=b;l[4]=e;l[5]=h;l[6]=c;l[7]=f;l[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},setFromMatrix4:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]);\r\nreturn this},applyToVector3Array:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.fromArray(b,c),a.applyMatrix3(this),a.toArray(b,c);return b}}(),applyToBuffer:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length/b.itemSize);for(var e=0;e<d;e++,c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix3(this),b.setXYZ(a.x,a.y,a.z);return b}}(),\r\nmultiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){a instanceof THREE.Matrix4&&console.error(\"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\");var c=a.elements,d=this.elements,e=c[0],f=c[1],g=c[2],h=c[3],k=c[4],l=c[5],n=c[6],p=c[7],\r\nc=c[8],m=c*k-l*p,q=l*n-c*h,r=p*h-k*n,s=e*m+f*q+g*r;if(0===s){if(b)throw Error(\"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\");console.warn(\"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\");return this.identity()}s=1/s;d[0]=m*s;d[1]=(g*p-c*f)*s;d[2]=(l*f-g*k)*s;d[3]=q*s;d[4]=(c*e-g*n)*s;d[5]=(g*h-l*e)*s;d[6]=r*s;d[7]=(f*n-p*e)*s;d[8]=(k*e-f*h)*s;return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=\r\nb[7];b[7]=a;return this},flattenToArrayOffset:function(a,b){console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.\");return this.toArray(a,b)},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(a,b){void 0===\r\na&&(a=[]);void 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a}};THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0<arguments.length&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")};\r\nTHREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,k,l,n,p,m,q,r,s){var u=this.elements;u[0]=a;u[4]=b;u[8]=c;u[12]=d;u[1]=e;u[5]=f;u[9]=g;u[13]=h;u[2]=k;u[6]=l;u[10]=n;u[14]=p;u[3]=m;u[7]=q;u[11]=r;u[15]=s;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)},copy:function(a){this.elements.set(a.elements);return this},copyPosition:function(a){var b=this.elements;a=a.elements;\r\nb[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){a.setFromMatrixColumn(this,0);b.setFromMatrixColumn(this,1);c.setFromMatrixColumn(this,2);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1);return this},extractRotation:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);var c=this.elements,d=b.elements,e=1/a.setFromMatrixColumn(b,0).length(),f=1/a.setFromMatrixColumn(b,1).length();b=1/a.setFromMatrixColumn(b,\r\n2).length();c[0]=d[0]*e;c[1]=d[1]*e;c[2]=d[2]*e;c[4]=d[4]*f;c[5]=d[5]*f;c[6]=d[6]*f;c[8]=d[8]*b;c[9]=d[9]*b;c[10]=d[10]*b;return this}}(),makeRotationFromEuler:function(a){!1===a instanceof THREE.Euler&&console.error(\"THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if(\"XYZ\"===a.order){a=f*h;var k=f*e,l=c*h,n=c*e;b[0]=g*h;b[4]=\r\n-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-n*d;b[9]=-c*g;b[2]=n-a*d;b[6]=l+k*d;b[10]=f*g}else\"YXZ\"===a.order?(a=g*h,k=g*e,l=d*h,n=d*e,b[0]=a+n*c,b[4]=l*c-k,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=n+a*c,b[10]=f*g):\"ZXY\"===a.order?(a=g*h,k=g*e,l=d*h,n=d*e,b[0]=a-n*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=n-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):\"ZYX\"===a.order?(a=f*h,k=f*e,l=c*h,n=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+n,b[1]=g*e,b[5]=n*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):\"YZX\"===a.order?(a=f*g,k=f*\r\nd,l=c*g,n=c*d,b[0]=g*h,b[4]=n-a*e,b[8]=l*e+k,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-n*e):\"XZY\"===a.order&&(a=f*g,k=f*d,l=c*g,n=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+n,b[5]=f*h,b[9]=k*e-l,b[2]=l*e-k,b[6]=c*h,b[10]=n*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,k=e+e;a=c*g;var l=c*h,c=c*k,n=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(n+e);b[4]=l-f;b[8]=c+h;b[1]=l+\r\nf;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+n);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a,b,c;return function(d,e,f){void 0===a&&(a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3);var g=this.elements;c.subVectors(d,e).normalize();0===c.lengthSq()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.lengthSq()&&(c.z+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;\r\ng[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],k=c[12],l=c[1],n=c[5],p=c[9],m=c[13],q=c[2],r=c[6],s=c[10],u=c[14],x=c[3],v=c[7],C=c[11],c=c[15],\r\nw=d[0],D=d[4],A=d[8],y=d[12],B=d[1],G=d[5],z=d[9],H=d[13],M=d[2],O=d[6],N=d[10],E=d[14],K=d[3],I=d[7],L=d[11],d=d[15];e[0]=f*w+g*B+h*M+k*K;e[4]=f*D+g*G+h*O+k*I;e[8]=f*A+g*z+h*N+k*L;e[12]=f*y+g*H+h*E+k*d;e[1]=l*w+n*B+p*M+m*K;e[5]=l*D+n*G+p*O+m*I;e[9]=l*A+n*z+p*N+m*L;e[13]=l*y+n*H+p*E+m*d;e[2]=q*w+r*B+s*M+u*K;e[6]=q*D+r*G+s*O+u*I;e[10]=q*A+r*z+s*N+u*L;e[14]=q*y+r*H+s*E+u*d;e[3]=x*w+v*B+C*M+c*K;e[7]=x*D+v*G+C*O+c*I;e[11]=x*A+v*z+C*N+c*L;e[15]=x*y+v*H+C*E+c*d;return this},multiplyToArray:function(a,b,\r\nc){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},applyToVector3Array:function(){var a;return function(b,c,d){void 0===a&&\r\n(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.fromArray(b,c),a.applyMatrix4(this),a.toArray(b,c);return b}}(),applyToBuffer:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Vector3);void 0===c&&(c=0);void 0===d&&(d=b.length/b.itemSize);for(var e=0;e<d;e++,c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix4(this),b.setXYZ(a.x,a.y,a.z);return b}}(),determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=\r\na[5],h=a[9],k=a[13],l=a[2],n=a[6],p=a[10],m=a[14];return a[3]*(+e*h*n-d*k*n-e*g*p+c*k*p+d*g*m-c*h*m)+a[7]*(+b*h*m-b*k*p+e*f*p-d*f*m+d*k*l-e*h*l)+a[11]*(+b*k*n-b*g*m-e*f*n+c*f*m+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*n+b*g*p+d*f*n-c*f*p+c*h*l)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArrayOffset:function(a,b){console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.\");\r\nreturn this.toArray(a,b)},getPosition:function(){var a;return function(){void 0===a&&(a=new THREE.Vector3);console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\");return a.setFromMatrixColumn(this,3)}}(),setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[1],g=d[2],h=d[3],k=d[4],l=d[5],n=d[6],p=d[7],m=d[8],q=d[9],r=d[10],s=d[11],u=d[12],\r\nx=d[13],v=d[14],d=d[15],C=q*v*p-x*r*p+x*n*s-l*v*s-q*n*d+l*r*d,w=u*r*p-m*v*p-u*n*s+k*v*s+m*n*d-k*r*d,D=m*x*p-u*q*p+u*l*s-k*x*s-m*l*d+k*q*d,A=u*q*n-m*x*n-u*l*r+k*x*r+m*l*v-k*q*v,y=e*C+f*w+g*D+h*A;if(0===y){if(b)throw Error(\"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\");console.warn(\"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\");return this.identity()}y=1/y;c[0]=C*y;c[1]=(x*r*h-q*v*h-x*g*s+f*v*s+q*g*d-f*r*d)*y;c[2]=(l*v*h-x*n*h+x*g*p-f*v*p-l*g*d+f*n*d)*y;c[3]=\r\n(q*n*h-l*r*h-q*g*p+f*r*p+l*g*s-f*n*s)*y;c[4]=w*y;c[5]=(m*v*h-u*r*h+u*g*s-e*v*s-m*g*d+e*r*d)*y;c[6]=(u*n*h-k*v*h-u*g*p+e*v*p+k*g*d-e*n*d)*y;c[7]=(k*r*h-m*n*h+m*g*p-e*r*p-k*g*s+e*n*s)*y;c[8]=D*y;c[9]=(u*q*h-m*x*h-u*f*s+e*x*s+m*f*d-e*q*d)*y;c[10]=(k*x*h-u*l*h+u*f*p-e*x*p-k*f*d+e*l*d)*y;c[11]=(m*l*h-k*q*h-m*f*p+e*q*p+k*f*s-e*l*s)*y;c[12]=A*y;c[13]=(m*x*g-u*q*g+u*f*r-e*x*r-m*f*v+e*q*v)*y;c[14]=(u*l*g-k*x*g-u*f*n+e*x*n+k*f*v-e*l*v)*y;c[15]=(k*q*g-m*l*g+m*f*n-e*q*n-k*f*r+e*l*r)*y;return this},scale:function(a){var b=\r\nthis.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10]))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);\r\nreturn this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,k=e*f,l=e*g;this.set(k*f+c,k*g-d*h,k*h+d*g,0,k*g+d*h,l*g+c,l*h-d*f,0,k*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,\r\n0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a,b;return function(c,d,e){void 0===a&&(a=new THREE.Vector3,b=new THREE.Matrix4);var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/h,l=1/k;b.elements[0]*=c;b.elements[1]*=c;\r\nb.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=l;b.elements[9]*=l;b.elements[10]*=l;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(d-c);g[9]=(d+c)/(d-c);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(THREE.Math.DEG2RAD*a*.5);var e=\r\n-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=1/(b-a),k=1/(c-d),l=1/(f-e);g[0]=2*h;g[4]=0;g[8]=0;g[12]=-((b+a)*h);g[1]=0;g[5]=2*k;g[9]=0;g[13]=-((c+d)*k);g[2]=0;g[6]=0;g[10]=-2*l;g[14]=-((f+e)*l);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},equals:function(a){var b=this.elements;a=a.elements;for(var c=0;16>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a){this.elements.set(a);return this},toArray:function(a,b){void 0===a&&(a=[]);\r\nvoid 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};\r\nTHREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},lookAt:function(a){this.direction.copy(a).sub(this.origin).normalize();return this},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,\r\na));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);\r\nreturn a.distanceToSquared(b)}}(),distanceSqToSegment:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g){a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h=.5*d.distanceTo(e),k=-this.direction.dot(b),l=c.dot(this.direction),n=-c.dot(b),p=c.lengthSq(),m=Math.abs(1-k*k),q;0<m?(d=k*n-l,e=k*l-n,q=h*m,0<=d?e>=-q?e<=q?(h=1/m,d*=h,e*=h,k=d*(d+k*e+2*l)+e*(k*d+e+2*n)+p):(e=h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*\r\nn)+p):(e=-h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*n)+p):e<=-q?(d=Math.max(0,-(-k*h+l)),e=0<d?-h:Math.min(Math.max(-h,-n),h),k=-d*d+e*(e+2*n)+p):e<=q?(d=0,e=Math.min(Math.max(-h,-n),h),k=e*(e+2*n)+p):(d=Math.max(0,-(k*h+l)),e=0<d?h:Math.min(Math.max(-h,-n),h),k=-d*d+e*(e+2*n)+p)):(e=0<k?-h:h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*n)+p);f&&f.copy(this.direction).multiplyScalar(d).add(this.origin);g&&g.copy(b).multiplyScalar(e).add(a);return k}}(),intersectSphere:function(){var a=new THREE.Vector3;return function(b,\r\nc){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=b.radius*b.radius;if(e>f)return null;f=Math.sqrt(f-e);e=d-f;d+=f;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=\r\nthis.distanceToPlane(a);return null===c?null:this.at(c,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var h=this.origin;0<=d?(c=(a.min.x-h.x)*d,d*=a.max.x-h.x):(c=(a.max.x-h.x)*d,d*=a.min.x-h.x);0<=f?(e=(a.min.y-h.y)*f,f*=a.max.y-h.y):(e=(a.max.y-h.y)*f,f*=a.min.y-h.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==\r\nd)d=f;0<=g?(e=(a.min.z-h.z)*g,g*=a.max.z-h.z):(e=(a.max.z-h.z)*g,g*=a.min.z-h.z);if(c>g||e>d)return null;if(e>c||c!==c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectsBox:function(){var a=new THREE.Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,h,k){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);\r\nif(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}};\r\nTHREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};\r\nTHREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=0,g=b.length;f<g;f++)e=Math.max(e,d.distanceToSquared(b[f]));this.radius=Math.sqrt(e);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},\r\nempty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},intersectsBox:function(a){return a.intersectsSphere(this)},intersectsPlane:function(a){return Math.abs(this.center.dot(a.normal)-a.constant)<=this.radius},clampPoint:function(a,b){var c=\r\nthis.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&\r\na.radius===this.radius}};THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};\r\nTHREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],l=c[7],n=c[8],p=c[9],m=c[10],q=c[11],r=c[12],s=c[13],u=c[14],\r\nc=c[15];b[0].setComponents(f-a,l-g,q-n,c-r).normalize();b[1].setComponents(f+a,l+g,q+n,c+r).normalize();b[2].setComponents(f+d,l+h,q+p,c+s).normalize();b[3].setComponents(f-d,l-h,q-p,c-s).normalize();b[4].setComponents(f-e,l-k,q-m,c-u).normalize();b[5].setComponents(f+e,l+k,q+m,c+u).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),\r\nintersectsSprite:function(){var a=new THREE.Sphere;return function(b){a.center.set(0,0,0);a.radius=.7071067811865476;a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?\r\nc.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};\r\nTHREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,\r\nc);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,\r\nb){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0===f){if(0===this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),intersectsLine:function(a){var b=\r\nthis.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Matrix3;return function(c,d){var e=this.coplanarPoint(a).applyMatrix4(c),f=d||b.getNormalMatrix(c),f=this.normal.applyMatrix3(f).normalize();\r\nthis.constant=-e.dot(f);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}};THREE.Spherical=function(a,b,c){this.radius=void 0!==a?a:1;this.phi=void 0!==b?b:0;this.theta=void 0!==c?c:0;return this};\r\nTHREE.Spherical.prototype={constructor:THREE.Spherical,set:function(a,b,c){this.radius=a;this.phi=b;this.theta=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius.copy(a.radius);this.phi.copy(a.phi);this.theta.copy(a.theta);return this},makeSafe:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this},setFromVector3:function(a){this.radius=a.length();0===this.radius?this.phi=this.theta=0:(this.theta=Math.atan2(a.x,a.z),this.phi=\r\nMath.acos(THREE.Math.clamp(a.y/this.radius,-1,1)));return this}};\r\nTHREE.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var a=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\"),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8===e||13===e||18===e||23===e?b[e]=\"-\":14===e?b[e]=\"4\":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19===e?d&3|8:d]);return b.join(\"\")}}(),clamp:function(a,b,c){return Math.max(b,Math.min(c,a))},euclideanModulo:function(a,b){return(a%b+b)%b},mapLinear:function(a,b,c,\r\nd,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){console.warn(\"THREE.Math.random16() has been deprecated. Use Math.random() instead.\");return Math.random()},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*\r\n(.5-Math.random())},degToRad:function(a){return a*THREE.Math.DEG2RAD},radToDeg:function(a){return a*THREE.Math.RAD2DEG},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},nearestPowerOfTwo:function(a){return Math.pow(2,Math.round(Math.log(a)/Math.LN2))},nextPowerOfTwo:function(a){a--;a|=a>>1;a|=a>>2;a|=a>>4;a|=a>>8;a|=a>>16;a++;return a}};\r\nTHREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,k,l,n,p,m;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:f+\r\n2;l=this.points[c[0]];n=this.points[c[1]];p=this.points[c[2]];m=this.points[c[3]];h=g*g;k=g*h;d.x=b(l.x,n.x,p.x,m.x,g,h,k);d.y=b(l.y,n.y,p.y,m.y,g,h,k);d.z=b(l.z,n.z,p.z,m.z,g,h,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],k=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=\r\na/c,d=this.getPoint(b),g.copy(d),k+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!==e&&(h[b]=k,e=b);h[h.length]=k;return{chunks:h,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],k=new THREE.Vector3,m=this.getLength();h.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=m.chunks[b]-m.chunks[b-1];g=Math.ceil(a*c/m.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),\r\nh.push(k.copy(d).clone());h.push(k.copy(this.points[b]).clone())}this.points=h}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();\r\nTHREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var l=d*k-e*e;h=h||new THREE.Vector3;if(0===l)return h.set(-2,-1,-1);l=1/l;k=(k*f-e*g)*l;d=(d*g-e*f)*l;return h.set(1-k-d,d,k)}}();\r\nTHREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();\r\nTHREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,\r\nthis.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},\r\nclosestPointToPoint:function(){var a,b,c,d;return function(e,f){void 0===a&&(a=new THREE.Plane,b=[new THREE.Line3,new THREE.Line3,new THREE.Line3],c=new THREE.Vector3,d=new THREE.Vector3);var g=f||new THREE.Vector3,h=Infinity;a.setFromCoplanarPoints(this.a,this.b,this.c);a.projectPoint(e,c);if(!0===this.containsPoint(c))g.copy(c);else{b[0].set(this.a,this.b);b[1].set(this.b,this.c);b[2].set(this.c,this.a);for(var k=0;k<b.length;k++){b[k].closestPointToPoint(c,!0,d);var l=c.distanceToSquared(d);l<\r\nh&&(h=l,g.copy(d))}}return g}}(),equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}};THREE.Interpolant=function(a,b,c,d){this.parameterPositions=a;this._cachedIndex=0;this.resultBuffer=void 0!==d?d:new b.constructor(c);this.sampleValues=b;this.valueSize=c};\r\nTHREE.Interpolant.prototype={constructor:THREE.Interpolant,evaluate:function(a){var b=this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];a:{b:{c:{d:if(!(a<d)){for(var f=c+2;;){if(void 0===d){if(a<e)break d;this._cachedIndex=c=b.length;return this.afterEnd_(c-1,a,e)}if(c===f)break;e=d;d=b[++c];if(a<d)break b}d=b.length;break c}if(a>=e)break a;else{f=b[1];a<f&&(c=2,e=f);for(f=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===f)break;d=e;e=b[--c-1];if(a>=e)break b}d=\r\nc;c=0}}for(;c<d;)e=c+d>>>1,a<b[e]?d=e:c=e+1;d=b[c];e=b[c-1];if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return this._cachedIndex=c=b.length,this.afterEnd_(c-1,e,a)}this._cachedIndex=c;this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(a){var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize;a*=d;for(var e=0;e!==d;++e)b[e]=\r\nc[a+e];return b},interpolate_:function(a,b,c,d){throw Error(\"call to abstract method\");},intervalChanged_:function(a,b,c){}};Object.assign(THREE.Interpolant.prototype,{beforeStart_:THREE.Interpolant.prototype.copySampleValue_,afterEnd_:THREE.Interpolant.prototype.copySampleValue_});THREE.CubicInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d);this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0};\r\nTHREE.CubicInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.CubicInterpolant,DefaultSettings_:{endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},intervalChanged_:function(a,b,c){var d=this.parameterPositions,e=a-2,f=a+1,g=d[e],h=d[f];if(void 0===g)switch(this.getSettings_().endingStart){case THREE.ZeroSlopeEnding:e=a;g=2*b-c;break;case THREE.WrapAroundEnding:e=d.length-2;g=b+d[e]-d[e+1];break;default:e=a,g=c}if(void 0===h)switch(this.getSettings_().endingEnd){case THREE.ZeroSlopeEnding:f=\r\na;h=2*c-b;break;case THREE.WrapAroundEnding:f=1;h=c+d[1]-d[0];break;default:f=a-1,h=b}a=.5*(c-b);d=this.valueSize;this._weightPrev=a/(b-g);this._weightNext=a/(h-c);this._offsetPrev=e*d;this._offsetNext=f*d},interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g,k=this._offsetPrev,l=this._offsetNext,n=this._weightPrev,p=this._weightNext,m=(c-b)/(d-b);c=m*m;d=c*m;b=-n*d+2*n*c-n*m;n=(1+n)*d+(-1.5-2*n)*c+(-.5+n)*m+1;m=(-1-p)*d+(1.5+p)*c+.5*m;p=p*d-p*\r\nc;for(c=0;c!==g;++c)e[c]=b*f[k+c]+n*f[h+c]+m*f[a+c]+p*f[l+c];return e}});THREE.DiscreteInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d)};THREE.DiscreteInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.DiscreteInterpolant,interpolate_:function(a,b,c,d){return this.copySampleValue_(a-1)}});THREE.LinearInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d)};\r\nTHREE.LinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.LinearInterpolant,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g;b=(c-b)/(d-b);c=1-b;for(d=0;d!==g;++d)e[d]=f[h+d]*c+f[a+d]*b;return e}});THREE.QuaternionLinearInterpolant=function(a,b,c,d){THREE.Interpolant.call(this,a,b,c,d)};\r\nTHREE.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.QuaternionLinearInterpolant,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;b=(c-b)/(d-b);for(c=a+g;a!==c;a+=4)THREE.Quaternion.slerpFlat(e,0,f,a-g,f,a,b);return e}});THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};\r\nTHREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=(performance||Date).now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=(performance||Date).now(),a=(b-this.oldTime)/1E3;this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};\r\nObject.assign(THREE.EventDispatcher.prototype,{addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(b);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(a){if(void 0!==\r\nthis._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=[],d=0,e=b.length,d=0;d<e;d++)c[d]=b[d];for(d=0;d<e;d++)c[d].call(this,a)}}}});THREE.Layers=function(){this.mask=1};THREE.Layers.prototype={constructor:THREE.Layers,set:function(a){this.mask=1<<a},enable:function(a){this.mask|=1<<a},toggle:function(a){this.mask^=1<<a},disable:function(a){this.mask&=~(1<<a)},test:function(a){return 0!==(this.mask&a.mask)}};\r\n(function(a){function b(a,b){return a.distance-b.distance}function c(a,b,f,g){if(!1!==a.visible&&(a.raycast(b,f),!0===g)){a=a.children;g=0;for(var h=a.length;g<h;g++)c(a[g],b,f,!0)}}a.Raycaster=function(b,c,f,g){this.ray=new a.Ray(b,c);this.near=f||0;this.far=g||Infinity;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn(\"THREE.Raycaster: params.PointCloud has been renamed to params.Points.\");return this.Points}}})};\r\na.Raycaster.prototype={constructor:a.Raycaster,linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(b,c){c instanceof a.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(c.matrixWorld),this.ray.direction.set(b.x,b.y,.5).unproject(c).sub(this.ray.origin).normalize()):c instanceof a.OrthographicCamera?(this.ray.origin.set(b.x,b.y,-1).unproject(c),this.ray.direction.set(0,0,-1).transformDirection(c.matrixWorld)):console.error(\"THREE.Raycaster: Unsupported camera type.\")},\r\nintersectObject:function(a,e){var f=[];c(a,this,f,e);f.sort(b);return f},intersectObjects:function(a,e){var f=[];if(!1===Array.isArray(a))return console.warn(\"THREE.Raycaster.intersectObjects: objects is not an Array.\"),f;for(var g=0,h=a.length;g<h;g++)c(a[g],this,f,e);f.sort(b);return f}}})(THREE);\r\nTHREE.Object3D=function(){Object.defineProperty(this,\"id\",{value:THREE.Object3DIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"Object3D\";this.parent=null;this.children=[];this.up=THREE.Object3D.DefaultUp.clone();var a=new THREE.Vector3,b=new THREE.Euler,c=new THREE.Quaternion,d=new THREE.Vector3(1,1,1);b.onChange(function(){c.setFromEuler(b,!1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,\r\nvalue:b},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d},modelViewMatrix:{value:new THREE.Matrix4},normalMatrix:{value:new THREE.Matrix3}});this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixAutoUpdate=THREE.Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new THREE.Layers;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.userData={}};\r\nTHREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0);THREE.Object3D.DefaultMatrixAutoUpdate=!0;\r\nObject.assign(THREE.Object3D.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=\r\nnew THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);\r\nthis.position.add(a.multiplyScalar(c));return this}}(),translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),\r\nlookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",a),this;a instanceof THREE.Object3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:\"added\"}),this.children.push(a)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",\r\na);return this},remove:function(a){if(1<arguments.length)for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);b=this.children.indexOf(a);-1!==b&&(a.parent=null,a.dispatchEvent({type:\"removed\"}),this.children.splice(b,1))},getObjectById:function(a){return this.getObjectByProperty(\"id\",a)},getObjectByName:function(a){return this.getObjectByProperty(\"name\",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,\r\nb);if(void 0!==e)return e}},getWorldPosition:function(a){a=a||new THREE.Vector3;this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){c=c||new THREE.Quaternion;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,c,b);return c}}(),getWorldRotation:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Euler;this.getWorldQuaternion(a);return b.setFromQuaternion(a,\r\nthis.rotation.order,!1)}}(),getWorldScale:function(){var a=new THREE.Vector3,b=new THREE.Quaternion;return function(c){c=c||new THREE.Vector3;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,b,c);return c}}(),getWorldDirection:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverse(a)},traverseVisible:function(a){if(!1!==\r\nthis.visible){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverseVisible(a)}},traverseAncestors:function(a){var b=this.parent;null!==b&&(a(b),b.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,\r\nthis.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var c=void 0===a||\"\"===a,d={};c&&(a={geometries:{},materials:{},textures:{},images:{}},d.metadata={version:4.4,type:\"Object\",generator:\"Object3D.toJSON\"});var e={};e.uuid=this.uuid;e.type=this.type;\"\"!==this.name&&(e.name=this.name);\"{}\"!==JSON.stringify(this.userData)&&\r\n(e.userData=this.userData);!0===this.castShadow&&(e.castShadow=!0);!0===this.receiveShadow&&(e.receiveShadow=!0);!1===this.visible&&(e.visible=!1);e.matrix=this.matrix.toArray();void 0!==this.geometry&&(void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON(a)),e.geometry=this.geometry.uuid);void 0!==this.material&&(void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON(a)),e.material=this.material.uuid);if(0<this.children.length){e.children=\r\n[];for(var f=0;f<this.children.length;f++)e.children.push(this.children[f].toJSON(a).object)}if(c){var c=b(a.geometries),f=b(a.materials),g=b(a.textures);a=b(a.images);0<c.length&&(d.geometries=c);0<f.length&&(d.materials=f);0<g.length&&(d.textures=g);0<a.length&&(d.images=a)}d.object=e;return d},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,b){void 0===b&&(b=!0);this.name=a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);\r\nthis.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;this.visible=a.visible;this.castShadow=a.castShadow;this.receiveShadow=a.receiveShadow;this.frustumCulled=a.frustumCulled;this.renderOrder=a.renderOrder;this.userData=JSON.parse(JSON.stringify(a.userData));if(!0===b)for(var c=0;c<a.children.length;c++)this.add(a.children[c].clone());return this}});THREE.Object3DIdCount=0;\r\nTHREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=Array.isArray(d)?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=Array.isArray(e)?e:[];this.materialIndex=void 0!==f?f:0};\r\nTHREE.Face3.prototype={constructor:THREE.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a;this.b=a.b;this.c=a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex=a.materialIndex;for(var b=0,c=a.vertexNormals.length;b<c;b++)this.vertexNormals[b]=a.vertexNormals[b].clone();b=0;for(c=a.vertexColors.length;b<c;b++)this.vertexColors[b]=a.vertexColors[b].clone();return this}};\r\nTHREE.BufferAttribute=function(a,b,c){this.uuid=THREE.Math.generateUUID();this.array=a;this.itemSize=b;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.version=0;this.normalized=!0===c};\r\nTHREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(a){!0===a&&this.version++},setDynamic:function(a){this.dynamic=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.itemSize=a.itemSize;this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},copyArray:function(a){this.array.set(a);\r\nreturn this},copyColorsArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",d),f=new THREE.Color);b[c++]=f.r;b[c++]=f.g;b[c++]=f.b}return this},copyIndicesArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];b[c++]=f.a;b[c++]=f.b;b[c++]=f.c}return this},copyVector2sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",\r\nd),f=new THREE.Vector2);b[c++]=f.x;b[c++]=f.y}return this},copyVector3sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",d),f=new THREE.Vector3);b[c++]=f.x;b[c++]=f.y;b[c++]=f.z}return this},copyVector4sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",d),f=new THREE.Vector4);\r\nb[c++]=f.x;b[c++]=f.y;b[c++]=f.z;b[c++]=f.w}return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,b){this.array[a*this.itemSize]=b;return this},getY:function(a){return this.array[a*this.itemSize+1]},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},getW:function(a){return this.array[a*\r\nthis.itemSize+3]},setW:function(a,b){this.array[a*this.itemSize+3]=b;return this},setXY:function(a,b,c){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},clone:function(){return(new this.constructor).copy(this)}};\r\nTHREE.Int8Attribute=function(a,b){return new THREE.BufferAttribute(new Int8Array(a),b)};THREE.Uint8Attribute=function(a,b){return new THREE.BufferAttribute(new Uint8Array(a),b)};THREE.Uint8ClampedAttribute=function(a,b){return new THREE.BufferAttribute(new Uint8ClampedArray(a),b)};THREE.Int16Attribute=function(a,b){return new THREE.BufferAttribute(new Int16Array(a),b)};THREE.Uint16Attribute=function(a,b){return new THREE.BufferAttribute(new Uint16Array(a),b)};\r\nTHREE.Int32Attribute=function(a,b){return new THREE.BufferAttribute(new Int32Array(a),b)};THREE.Uint32Attribute=function(a,b){return new THREE.BufferAttribute(new Uint32Array(a),b)};THREE.Float32Attribute=function(a,b){return new THREE.BufferAttribute(new Float32Array(a),b)};THREE.Float64Attribute=function(a,b){return new THREE.BufferAttribute(new Float64Array(a),b)};\r\nTHREE.DynamicBufferAttribute=function(a,b){console.warn(\"THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.\");return(new THREE.BufferAttribute(a,b)).setDynamic(!0)};THREE.InstancedBufferAttribute=function(a,b,c){THREE.BufferAttribute.call(this,a,b);this.meshPerAttribute=c||1};THREE.InstancedBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype);THREE.InstancedBufferAttribute.prototype.constructor=THREE.InstancedBufferAttribute;\r\nTHREE.InstancedBufferAttribute.prototype.copy=function(a){THREE.BufferAttribute.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this};THREE.InterleavedBuffer=function(a,b){this.uuid=THREE.Math.generateUUID();this.array=a;this.stride=b;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.version=0};\r\nTHREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(a){!0===a&&this.version++},setDynamic:function(a){this.dynamic=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.stride=a.stride;this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.stride;c*=b.stride;for(var d=0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,\r\nb){void 0===b&&(b=0);this.array.set(a,b);return this},clone:function(){return(new this.constructor).copy(this)}};THREE.InstancedInterleavedBuffer=function(a,b,c){THREE.InterleavedBuffer.call(this,a,b);this.meshPerAttribute=c||1};THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype);THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer;\r\nTHREE.InstancedInterleavedBuffer.prototype.copy=function(a){THREE.InterleavedBuffer.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this};THREE.InterleavedBufferAttribute=function(a,b,c){this.uuid=THREE.Math.generateUUID();this.data=a;this.itemSize=b;this.offset=c};\r\nTHREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){console.warn(\"THREE.BufferAttribute: .length has been deprecated. Please use .count.\");return this.array.length},get count(){return this.data.count},setX:function(a,b){this.data.array[a*this.data.stride+this.offset]=b;return this},setY:function(a,b){this.data.array[a*this.data.stride+this.offset+1]=b;return this},setZ:function(a,b){this.data.array[a*this.data.stride+this.offset+2]=b;return this},\r\nsetW:function(a,b){this.data.array[a*this.data.stride+this.offset+3]=b;return this},getX:function(a){return this.data.array[a*this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,b,c){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;return this},setXYZ:function(a,\r\nb,c,d){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;this.data.array[a+3]=e;return this}};\r\nTHREE.Geometry=function(){Object.defineProperty(this,\"id\",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"Geometry\";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=\r\nthis.verticesNeedUpdate=!1};\r\nObject.assign(THREE.Geometry.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();\r\nthis.normalsNeedUpdate=this.verticesNeedUpdate=!0;return this},rotateX:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationY(b);this.applyMatrix(a);return this}}(),rotateZ:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a;return function(b,\r\nc,d){void 0===a&&(a=new THREE.Matrix4);a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a;return function(b){void 0===a&&(a=new THREE.Object3D);a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),fromBufferGeometry:function(a){function b(a,b,d,e){var f=void 0!==g?[n[a].clone(),n[b].clone(),n[d].clone()]:[],q=void 0!==h?[c.colors[a].clone(),\r\nc.colors[b].clone(),c.colors[d].clone()]:[];e=new THREE.Face3(a,b,d,f,q,e);c.faces.push(e);void 0!==k&&c.faceVertexUvs[0].push([p[a].clone(),p[b].clone(),p[d].clone()]);void 0!==l&&c.faceVertexUvs[1].push([m[a].clone(),m[b].clone(),m[d].clone()])}var c=this,d=null!==a.index?a.index.array:void 0,e=a.attributes,f=e.position.array,g=void 0!==e.normal?e.normal.array:void 0,h=void 0!==e.color?e.color.array:void 0,k=void 0!==e.uv?e.uv.array:void 0,l=void 0!==e.uv2?e.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=\r\n[]);for(var n=[],p=[],m=[],q=e=0;e<f.length;e+=3,q+=2)c.vertices.push(new THREE.Vector3(f[e],f[e+1],f[e+2])),void 0!==g&&n.push(new THREE.Vector3(g[e],g[e+1],g[e+2])),void 0!==h&&c.colors.push(new THREE.Color(h[e],h[e+1],h[e+2])),void 0!==k&&p.push(new THREE.Vector2(k[q],k[q+1])),void 0!==l&&m.push(new THREE.Vector2(l[q],l[q+1]));if(void 0!==d)if(f=a.groups,0<f.length)for(e=0;e<f.length;e++)for(var r=f[e],s=r.start,u=r.count,q=s,s=s+u;q<s;q+=3)b(d[q],d[q+1],d[q+2],r.materialIndex);else for(e=0;e<\r\nd.length;e+=3)b(d[e],d[e+1],d[e+2]);else for(e=0;e<f.length/3;e+=3)b(e,e+1,e+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.translate(a.x,a.y,a.z);return a},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,b=this.boundingSphere.radius,b=0===b?1:1/\r\nb,c=new THREE.Matrix4;c.set(b,0,0,-b*a.x,0,b,0,-b*a.y,0,0,b,-b*a.z,0,0,0,1);this.applyMatrix(c);return this},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){void 0===a&&(a=!0);var b,c,d;d=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<\r\nc;b++)d[b]=new THREE.Vector3;if(a){var e,f,g,h=new THREE.Vector3,k=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],g=this.vertices[c.c],h.subVectors(g,f),k.subVectors(e,f),h.cross(k),d[c.a].add(h),d[c.b].add(h),d[c.c].add(h)}else for(a=0,b=this.faces.length;a<b;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);b=0;for(c=this.vertices.length;b<c;b++)d[b].normalize();a=0;for(b=this.faces.length;a<b;a++)c=\r\nthis.faces[a],e=c.vertexNormals,3===e.length?(e[0].copy(d[c.a]),e[1].copy(d[c.b]),e[2].copy(d[c.c])):(e[0]=d[c.a].clone(),e[1]=d[c.b].clone(),e[2]=d[c.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<\r\nb;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=this.morphNormals[a].vertexNormals,h,k;c=0;for(d=this.faces.length;c<d;c++)h=new THREE.Vector3,k={a:new THREE.Vector3,\r\nb:new THREE.Vector3,c:new THREE.Vector3},e.push(h),g.push(k)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){console.warn(\"THREE.Geometry: .computeTangents() has been removed.\")},\r\ncomputeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(!1===a instanceof THREE.Geometry)console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\",\r\na);else{var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,l=this.faceVertexUvs[0];a=a.faceVertexUvs[0];void 0===c&&(c=0);void 0!==b&&(d=(new THREE.Matrix3).getNormalMatrix(b));for(var n=0,p=g.length;n<p;n++){var m=g[n].clone();void 0!==b&&m.applyMatrix4(b);f.push(m)}n=0;for(p=k.length;n<p;n++){var g=k[n],q,r=g.vertexNormals,s=g.vertexColors,m=new THREE.Face3(g.a+e,g.b+e,g.c+e);m.normal.copy(g.normal);void 0!==d&&m.normal.applyMatrix3(d).normalize();b=0;for(f=r.length;b<\r\nf;b++)q=r[b].clone(),void 0!==d&&q.applyMatrix3(d).normalize(),m.vertexNormals.push(q);m.color.copy(g.color);b=0;for(f=s.length;b<f;b++)q=s[b],m.vertexColors.push(q.clone());m.materialIndex=g.materialIndex+c;h.push(m)}n=0;for(p=a.length;n<p;n++)if(c=a[n],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(c[b].clone());l.push(d)}}},mergeMesh:function(a){!1===a instanceof THREE.Mesh?console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\",a):(a.matrixAutoUpdate&&a.updateMatrix(),\r\nthis.merge(a.geometry,a.matrix))},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+\"_\"+Math.round(d.y*e)+\"_\"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]===e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(e=a[f],this.faces.splice(e,\r\n1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(e,1);f=this.vertices.length-b.length;this.vertices=b;return f},sortFacesByMaterialIndex:function(){for(var a=this.faces,b=a.length,c=0;c<b;c++)a[c]._id=c;a.sort(function(a,b){return a.materialIndex-b.materialIndex});var d=this.faceVertexUvs[0],e=this.faceVertexUvs[1],f,g;d&&d.length===b&&(f=[]);e&&e.length===b&&(g=[]);for(c=0;c<b;c++){var h=a[c]._id;f&&f.push(d[h]);g&&g.push(e[h])}f&&(this.faceVertexUvs[0]=f);g&&(this.faceVertexUvs[1]=\r\ng)},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==l[b])return l[b];l[b]=k.length/3;k.push(a.x,a.y,a.z);return l[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==p[b])return p[b];p[b]=n.length;n.push(a.getHex());return p[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==q[b])return q[b];q[b]=m.length/2;m.push(a.x,a.y);return q[b]}var e={metadata:{version:4.4,type:\"Geometry\",\r\ngenerator:\"Geometry.toJSON\"}};e.uuid=this.uuid;e.type=this.type;\"\"!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==f[g]&&(e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}var h=[],k=[],l={},n=[],p={},m=[],q={};for(g=0;g<this.faces.length;g++){var r=this.faces[g],s=void 0!==this.faceVertexUvs[0][g],u=0<r.normal.length(),x=0<r.vertexNormals.length,v=1!==r.color.r||1!==r.color.g||1!==r.color.b,\r\nC=0<r.vertexColors.length,w=0,w=a(w,0,0),w=a(w,1,!0),w=a(w,2,!1),w=a(w,3,s),w=a(w,4,u),w=a(w,5,x),w=a(w,6,v),w=a(w,7,C);h.push(w);h.push(r.a,r.b,r.c);h.push(r.materialIndex);s&&(s=this.faceVertexUvs[0][g],h.push(d(s[0]),d(s[1]),d(s[2])));u&&h.push(b(r.normal));x&&(u=r.vertexNormals,h.push(b(u[0]),b(u[1]),b(u[2])));v&&h.push(c(r.color));C&&(r=r.vertexColors,h.push(c(r[0]),c(r[1]),c(r[2])))}e.data={};e.data.vertices=f;e.data.normals=k;0<n.length&&(e.data.colors=n);0<m.length&&(e.data.uvs=[m]);e.data.faces=\r\nh;return e},clone:function(){return(new THREE.Geometry).copy(this)},copy:function(a){this.vertices=[];this.faces=[];this.faceVertexUvs=[[]];for(var b=a.vertices,c=0,d=b.length;c<d;c++)this.vertices.push(b[c].clone());b=a.faces;c=0;for(d=b.length;c<d;c++)this.faces.push(b[c].clone());c=0;for(d=a.faceVertexUvs.length;c<d;c++){b=a.faceVertexUvs[c];void 0===this.faceVertexUvs[c]&&(this.faceVertexUvs[c]=[]);for(var e=0,f=b.length;e<f;e++){for(var g=b[e],h=[],k=0,l=g.length;k<l;k++)h.push(g[k].clone());\r\nthis.faceVertexUvs[c].push(h)}}return this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});THREE.GeometryIdCount=0;\r\nTHREE.DirectGeometry=function(){Object.defineProperty(this,\"id\",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"DirectGeometry\";this.indices=[];this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1};\r\nObject.assign(THREE.DirectGeometry.prototype,THREE.EventDispatcher.prototype,{computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn(\"THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.\")},computeVertexNormals:function(){console.warn(\"THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.\")},computeGroups:function(a){var b,\r\nc=[],d;a=a.faces;for(var e=0;e<a.length;e++){var f=a[e];f.materialIndex!==d&&(d=f.materialIndex,void 0!==b&&(b.count=3*e-b.start,c.push(b)),b={start:3*e,materialIndex:d})}void 0!==b&&(b.count=3*e-b.start,c.push(b));this.groups=c},fromGeometry:function(a){var b=a.faces,c=a.vertices,d=a.faceVertexUvs,e=d[0]&&0<d[0].length,f=d[1]&&0<d[1].length,g=a.morphTargets,h=g.length,k;if(0<h){k=[];for(var l=0;l<h;l++)k[l]=[];this.morphTargets.position=k}var n=a.morphNormals,p=n.length,m;if(0<p){m=[];for(l=0;l<\r\np;l++)m[l]=[];this.morphTargets.normal=m}for(var q=a.skinIndices,r=a.skinWeights,s=q.length===c.length,u=r.length===c.length,l=0;l<b.length;l++){var x=b[l];this.vertices.push(c[x.a],c[x.b],c[x.c]);var v=x.vertexNormals;3===v.length?this.normals.push(v[0],v[1],v[2]):(v=x.normal,this.normals.push(v,v,v));v=x.vertexColors;3===v.length?this.colors.push(v[0],v[1],v[2]):(v=x.color,this.colors.push(v,v,v));!0===e&&(v=d[0][l],void 0!==v?this.uvs.push(v[0],v[1],v[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \",\r\nl),this.uvs.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)));!0===f&&(v=d[1][l],void 0!==v?this.uvs2.push(v[0],v[1],v[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \",l),this.uvs2.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)));for(v=0;v<h;v++){var C=g[v].vertices;k[v].push(C[x.a],C[x.b],C[x.c])}for(v=0;v<p;v++)C=n[v].vertexNormals[l],m[v].push(C.a,C.b,C.c);s&&this.skinIndices.push(q[x.a],q[x.b],q[x.c]);u&&this.skinWeights.push(r[x.a],r[x.b],\r\nr[x.c])}this.computeGroups(a);this.verticesNeedUpdate=a.verticesNeedUpdate;this.normalsNeedUpdate=a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});\r\nTHREE.BufferGeometry=function(){Object.defineProperty(this,\"id\",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"BufferGeometry\";this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange={start:0,count:Infinity}};\r\nObject.assign(THREE.BufferGeometry.prototype,THREE.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(a){this.index=a},addAttribute:function(a,b,c){if(!1===b instanceof THREE.BufferAttribute&&!1===b instanceof THREE.InterleavedBufferAttribute)console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),this.addAttribute(a,new THREE.BufferAttribute(b,c));else if(\"index\"===a)console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),\r\nthis.setIndex(b);else return this.attributes[a]=b,this},getAttribute:function(a){return this.attributes[a]},removeAttribute:function(a){delete this.attributes[a];return this},addGroup:function(a,b,c){this.groups.push({start:a,count:b,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,b){this.drawRange.start=a;this.drawRange.count=b},applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToVector3Array(b.array),b.needsUpdate=!0);b=this.attributes.normal;\r\nvoid 0!==b&&((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(b.array),b.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();return this},rotateX:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationY(b);this.applyMatrix(a);return this}}(),rotateZ:function(){var a;\r\nreturn function(b){void 0===a&&(a=new THREE.Matrix4);a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a;return function(b){void 0===a&&(a=new THREE.Object3D);a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),\r\ncenter:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.translate(a.x,a.y,a.z);return a},setFromObject:function(a){var b=a.geometry;if(a instanceof THREE.Points||a instanceof THREE.Line){a=new THREE.Float32Attribute(3*b.vertices.length,3);var c=new THREE.Float32Attribute(3*b.colors.length,3);this.addAttribute(\"position\",a.copyVector3sArray(b.vertices));this.addAttribute(\"color\",c.copyColorsArray(b.colors));b.lineDistances&&b.lineDistances.length===b.vertices.length&&\r\n(a=new THREE.Float32Attribute(b.lineDistances.length,1),this.addAttribute(\"lineDistance\",a.copyArray(b.lineDistances)));null!==b.boundingSphere&&(this.boundingSphere=b.boundingSphere.clone());null!==b.boundingBox&&(this.boundingBox=b.boundingBox.clone())}else a instanceof THREE.Mesh&&b instanceof THREE.Geometry&&this.fromGeometry(b);return this},updateFromObject:function(a){var b=a.geometry;if(a instanceof THREE.Mesh){var c=b.__directGeometry;if(void 0===c)return this.fromGeometry(b);c.verticesNeedUpdate=\r\nb.verticesNeedUpdate;c.normalsNeedUpdate=b.normalsNeedUpdate;c.colorsNeedUpdate=b.colorsNeedUpdate;c.uvsNeedUpdate=b.uvsNeedUpdate;c.groupsNeedUpdate=b.groupsNeedUpdate;b.verticesNeedUpdate=!1;b.normalsNeedUpdate=!1;b.colorsNeedUpdate=!1;b.uvsNeedUpdate=!1;b.groupsNeedUpdate=!1;b=c}!0===b.verticesNeedUpdate&&(c=this.attributes.position,void 0!==c&&(c.copyVector3sArray(b.vertices),c.needsUpdate=!0),b.verticesNeedUpdate=!1);!0===b.normalsNeedUpdate&&(c=this.attributes.normal,void 0!==c&&(c.copyVector3sArray(b.normals),\r\nc.needsUpdate=!0),b.normalsNeedUpdate=!1);!0===b.colorsNeedUpdate&&(c=this.attributes.color,void 0!==c&&(c.copyColorsArray(b.colors),c.needsUpdate=!0),b.colorsNeedUpdate=!1);b.uvsNeedUpdate&&(c=this.attributes.uv,void 0!==c&&(c.copyVector2sArray(b.uvs),c.needsUpdate=!0),b.uvsNeedUpdate=!1);b.lineDistancesNeedUpdate&&(c=this.attributes.lineDistance,void 0!==c&&(c.copyArray(b.lineDistances),c.needsUpdate=!0),b.lineDistancesNeedUpdate=!1);b.groupsNeedUpdate&&(b.computeGroups(a.geometry),this.groups=\r\nb.groups,b.groupsNeedUpdate=!1);return this},fromGeometry:function(a){a.__directGeometry=(new THREE.DirectGeometry).fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var b=new Float32Array(3*a.vertices.length);this.addAttribute(\"position\",(new THREE.BufferAttribute(b,3)).copyVector3sArray(a.vertices));0<a.normals.length&&(b=new Float32Array(3*a.normals.length),this.addAttribute(\"normal\",(new THREE.BufferAttribute(b,3)).copyVector3sArray(a.normals)));\r\n0<a.colors.length&&(b=new Float32Array(3*a.colors.length),this.addAttribute(\"color\",(new THREE.BufferAttribute(b,3)).copyColorsArray(a.colors)));0<a.uvs.length&&(b=new Float32Array(2*a.uvs.length),this.addAttribute(\"uv\",(new THREE.BufferAttribute(b,2)).copyVector2sArray(a.uvs)));0<a.uvs2.length&&(b=new Float32Array(2*a.uvs2.length),this.addAttribute(\"uv2\",(new THREE.BufferAttribute(b,2)).copyVector2sArray(a.uvs2)));0<a.indices.length&&(b=new (65535<a.vertices.length?Uint32Array:Uint16Array)(3*a.indices.length),\r\nthis.setIndex((new THREE.BufferAttribute(b,1)).copyIndicesArray(a.indices)));this.groups=a.groups;for(var c in a.morphTargets){for(var b=[],d=a.morphTargets[c],e=0,f=d.length;e<f;e++){var g=d[e],h=new THREE.Float32Attribute(3*g.length,3);b.push(h.copyVector3sArray(g))}this.morphAttributes[c]=b}0<a.skinIndices.length&&(c=new THREE.Float32Attribute(4*a.skinIndices.length,4),this.addAttribute(\"skinIndex\",c.copyVector4sArray(a.skinIndices)));0<a.skinWeights.length&&(c=new THREE.Float32Attribute(4*a.skinWeights.length,\r\n4),this.addAttribute(\"skinWeight\",c.copyVector4sArray(a.skinWeights)));null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var a=this.attributes.position.array;void 0!==a?this.boundingBox.setFromArray(a):this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&\r\nconsole.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){var d=this.boundingSphere.center;a.setFromArray(c);a.center(d);for(var e=0,f=0,g=c.length;f<g;f+=3)b.fromArray(c,f),e=Math.max(e,d.distanceToSquared(b));\r\nthis.boundingSphere.radius=Math.sqrt(e);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,b=this.attributes,c=this.groups;if(b.position){var d=b.position.array;if(void 0===b.normal)this.addAttribute(\"normal\",new THREE.BufferAttribute(new Float32Array(d.length),3));else for(var e=b.normal.array,\r\nf=0,g=e.length;f<g;f++)e[f]=0;var e=b.normal.array,h,k,l,n=new THREE.Vector3,p=new THREE.Vector3,m=new THREE.Vector3,q=new THREE.Vector3,r=new THREE.Vector3;if(a){a=a.array;0===c.length&&this.addGroup(0,a.length);for(var s=0,u=c.length;s<u;++s)for(f=c[s],g=f.start,h=f.count,f=g,g+=h;f<g;f+=3)h=3*a[f+0],k=3*a[f+1],l=3*a[f+2],n.fromArray(d,h),p.fromArray(d,k),m.fromArray(d,l),q.subVectors(m,p),r.subVectors(n,p),q.cross(r),e[h]+=q.x,e[h+1]+=q.y,e[h+2]+=q.z,e[k]+=q.x,e[k+1]+=q.y,e[k+2]+=q.z,e[l]+=q.x,\r\ne[l+1]+=q.y,e[l+2]+=q.z}else for(f=0,g=d.length;f<g;f+=9)n.fromArray(d,f),p.fromArray(d,f+3),m.fromArray(d,f+6),q.subVectors(m,p),r.subVectors(n,p),q.cross(r),e[f]=q.x,e[f+1]=q.y,e[f+2]=q.z,e[f+3]=q.x,e[f+4]=q.y,e[f+5]=q.z,e[f+6]=q.x,e[f+7]=q.y,e[f+8]=q.z;this.normalizeNormals();b.normal.needsUpdate=!0}},merge:function(a,b){if(!1===a instanceof THREE.BufferGeometry)console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",a);else{void 0===b&&(b=0);var c=this.attributes,\r\nd;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],g=f.array,h=0,f=f.itemSize*b;h<g.length;h++,f++)e[f]=g[h];return this}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},toNonIndexed:function(){if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.\"),this;var a=new THREE.BufferGeometry,\r\nb=this.index.array,c=this.attributes,d;for(d in c){for(var e=c[d],f=e.array,e=e.itemSize,g=new f.constructor(b.length*e),h=0,k=0,l=0,n=b.length;l<n;l++)for(var h=b[l]*e,p=0;p<e;p++)g[k++]=f[h++];a.addAttribute(d,new THREE.BufferAttribute(g,e))}return a},toJSON:function(){var a={metadata:{version:4.4,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};a.uuid=this.uuid;a.type=this.type;\"\"!==this.name&&(a.name=this.name);if(void 0!==this.parameters){var b=this.parameters,c;for(c in b)void 0!==\r\nb[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};var d=this.index;null!==d&&(b=Array.prototype.slice.call(d.array),a.data.index={type:d.array.constructor.name,array:b});d=this.attributes;for(c in d){var e=d[c],b=Array.prototype.slice.call(e.array);a.data.attributes[c]={itemSize:e.itemSize,type:e.array.constructor.name,array:b,normalized:e.normalized}}c=this.groups;0<c.length&&(a.data.groups=JSON.parse(JSON.stringify(c)));c=this.boundingSphere;null!==c&&(a.data.boundingSphere={center:c.center.toArray(),\r\nradius:c.radius});return a},clone:function(){return(new THREE.BufferGeometry).copy(this)},copy:function(a){var b=a.index;null!==b&&this.setIndex(b.clone());var b=a.attributes,c;for(c in b)this.addAttribute(c,b[c].clone());a=a.groups;c=0;for(b=a.length;c<b;c++){var d=a[c];this.addGroup(d.start,d.count,d.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});THREE.BufferGeometry.MaxIndex=65535;\r\nTHREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this);this.type=\"InstancedBufferGeometry\";this.maxInstancedCount=void 0};THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry;THREE.InstancedBufferGeometry.prototype.addGroup=function(a,b,c){this.groups.push({start:a,count:b,instances:c})};\r\nTHREE.InstancedBufferGeometry.prototype.copy=function(a){var b=a.index;null!==b&&this.setIndex(b.clone());var b=a.attributes,c;for(c in b)this.addAttribute(c,b[c].clone());a=a.groups;c=0;for(b=a.length;c<b;c++){var d=a[c];this.addGroup(d.start,d.count,d.instances)}return this};THREE.Uniform=function(a,b){\"string\"===typeof a&&(console.warn(\"THREE.Uniform: Type parameter is no longer needed.\"),a=b);this.value=a;this.dynamic=!1};\r\nTHREE.Uniform.prototype={constructor:THREE.Uniform,onUpdate:function(a){this.dynamic=!0;this.onUpdateCallback=a;return this}};THREE.AnimationAction=function(){throw Error(\"THREE.AnimationAction: Use mixer.clipAction for construction.\");};\r\nTHREE.AnimationAction._new=function(a,b,c){this._mixer=a;this._clip=b;this._localRoot=c||null;a=b.tracks;b=a.length;c=Array(b);for(var d={endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},e=0;e!==b;++e){var f=a[e].createInterpolant(null);c[e]=f;f.settings=d}this._interpolantSettings=d;this._interpolants=c;this._propertyBindings=Array(b);this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null;this.loop=THREE.LoopRepeat;this._loopCount=\r\n-1;this._startTime=null;this.time=0;this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1;this.repetitions=Infinity;this.paused=!1;this.enabled=!0;this.clampWhenFinished=!1;this.zeroSlopeAtEnd=this.zeroSlopeAtStart=!0};\r\nTHREE.AnimationAction._new.prototype={constructor:THREE.AnimationAction._new,play:function(){this._mixer._activateAction(this);return this},stop:function(){this._mixer._deactivateAction(this);return this.reset()},reset:function(){this.paused=!1;this.enabled=!0;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},\r\nstartAt:function(a){this._startTime=a;return this},setLoop:function(a,b){this.loop=a;this.repetitions=b;return this},setEffectiveWeight:function(a){this.weight=a;this._effectiveWeight=this.enabled?a:0;return this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,b,c){a.fadeOut(b);this.fadeIn(b);if(c){c=this._clip.duration;var d=a._clip.duration,\r\ne=c/d;a.warp(1,d/c,b);this.warp(e,1,b)}return this},crossFadeTo:function(a,b,c){return a.crossFadeFrom(this,b,c)},stopFading:function(){var a=this._weightInterpolant;null!==a&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},setEffectiveTimeScale:function(a){this.timeScale=a;this._effectiveTimeScale=this.paused?0:a;return this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){this.timeScale=this._clip.duration/\r\na;return this.stopWarping()},syncWith:function(a){this.time=a.time;this.timeScale=a.timeScale;return this.stopWarping()},halt:function(a){return this.warp(this._effectiveTimeScale,0,a)},warp:function(a,b,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,g=this.timeScale;null===f&&(this._timeScaleInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;d[1]=e+c;f[0]=a/g;f[1]=b/g;return this},stopWarping:function(){var a=this._timeScaleInterpolant;null!==a&&\r\n(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(a,b,c,d){var e=this._startTime;if(null!==e){b=(a-e)*c;if(0>b||0===c)return;this._startTime=null;b*=c}b*=this._updateTimeScale(a);c=this._updateTime(b);a=this._updateWeight(a);if(0<a){b=this._interpolants;for(var e=this._propertyBindings,f=0,g=b.length;f!==\r\ng;++f)b[f].evaluate(c),e[f].accumulate(d,a)}},_updateWeight:function(a){var b=0;if(this.enabled){var b=this.weight,c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0],b=b*d;a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=b},_updateTimeScale:function(a){var b=0;if(!this.paused){var b=this.timeScale,c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0],b=b*d;a>c.parameterPositions[1]&&(this.stopWarping(),0===b?this.paused=!0:\r\nthis.timeScale=b)}}return this._effectiveTimeScale=b},_updateTime:function(a){var b=this.time+a;if(0===a)return b;var c=this._clip.duration,d=this.loop,e=this._loopCount;if(d===THREE.LoopOnce)a:{if(-1===e&&(this.loopCount=0,this._setEndings(!0,!0,!1)),b>=c)b=c;else if(0>b)b=0;else break a;this.clampWhenFinished?this.paused=!0:this.enabled=!1;this._mixer.dispatchEvent({type:\"finished\",action:this,direction:0>a?-1:1})}else{d=d===THREE.LoopPingPong;-1===e&&(0<=a?(e=0,this._setEndings(!0,0===this.repetitions,\r\nd)):this._setEndings(0===this.repetitions,!0,d));if(b>=c||0>b){var f=Math.floor(b/c),b=b-c*f,e=e+Math.abs(f),g=this.repetitions-e;0>g?(this.clampWhenFinished?this.paused=!0:this.enabled=!1,b=0<a?c:0,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:0<a?1:-1})):(0===g?(a=0>a,this._setEndings(a,!a,d)):this._setEndings(!1,!1,d),this._loopCount=e,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:f}))}if(d&&1===(e&1))return this.time=b,c-b}return this.time=b},_setEndings:function(a,\r\nb,c){var d=this._interpolantSettings;c?(d.endingStart=THREE.ZeroSlopeEnding,d.endingEnd=THREE.ZeroSlopeEnding):(d.endingStart=a?this.zeroSlopeAtStart?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding,d.endingEnd=b?this.zeroSlopeAtEnd?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding)},_scheduleFading:function(a,b,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;null===f&&(this._weightInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;\r\nf=f.sampleValues;d[0]=e;f[0]=b;d[1]=e+a;f[1]=c;return this}};THREE.AnimationClip=function(a,b,c){this.name=a;this.tracks=c;this.duration=void 0!==b?b:-1;this.uuid=THREE.Math.generateUUID();0>this.duration&&this.resetDuration();this.trim();this.optimize()};\r\nTHREE.AnimationClip.prototype={constructor:THREE.AnimationClip,resetDuration:function(){for(var a=0,b=0,c=this.tracks.length;b!==c;++b)var d=this.tracks[b],a=Math.max(a,d.times[d.times.length-1]);this.duration=a},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}};\r\nObject.assign(THREE.AnimationClip,{parse:function(a){for(var b=[],c=a.tracks,d=1/(a.fps||1),e=0,f=c.length;e!==f;++e)b.push(THREE.KeyframeTrack.parse(c[e]).scale(d));return new THREE.AnimationClip(a.name,a.duration,b)},toJSON:function(a){var b=[],c=a.tracks;a={name:a.name,duration:a.duration,tracks:b};for(var d=0,e=c.length;d!==e;++d)b.push(THREE.KeyframeTrack.toJSON(c[d]));return a},CreateFromMorphTargetSequence:function(a,b,c,d){for(var e=b.length,f=[],g=0;g<e;g++){var h=[],k=[];h.push((g+e-1)%\r\ne,g,(g+1)%e);k.push(0,1,0);var l=THREE.AnimationUtils.getKeyframeOrder(h),h=THREE.AnimationUtils.sortedArray(h,1,l),k=THREE.AnimationUtils.sortedArray(k,1,l);d||0!==h[0]||(h.push(e),k.push(k[0]));f.push((new THREE.NumberKeyframeTrack(\".morphTargetInfluences[\"+b[g].name+\"]\",h,k)).scale(1/c))}return new THREE.AnimationClip(a,-1,f)},findByName:function(a,b){var c=a;Array.isArray(a)||(c=a.geometry&&a.geometry.animations||a.animations);for(var d=0;d<c.length;d++)if(c[d].name===b)return c[d];return null},\r\nCreateClipsFromMorphTargetSequences:function(a,b,c){for(var d={},e=/^([\\w-]*?)([\\d]+)$/,f=0,g=a.length;f<g;f++){var h=a[f],k=h.name.match(e);if(k&&1<k.length){var l=k[1];(k=d[l])||(d[l]=k=[]);k.push(h)}}a=[];for(l in d)a.push(THREE.AnimationClip.CreateFromMorphTargetSequence(l,d[l],b,c));return a},parseAnimation:function(a,b,c){if(!a)return console.error(\"  no animation in JSONLoader data\"),null;c=function(a,b,c,d,e){if(0!==c.length){var f=[],g=[];THREE.AnimationUtils.flattenJSON(c,f,g,d);0!==f.length&&\r\ne.push(new a(b,f,g))}};var d=[],e=a.name||\"default\",f=a.length||-1,g=a.fps||30;a=a.hierarchy||[];for(var h=0;h<a.length;h++){var k=a[h].keys;if(k&&0!==k.length)if(k[0].morphTargets){for(var f={},l=0;l<k.length;l++)if(k[l].morphTargets)for(var n=0;n<k[l].morphTargets.length;n++)f[k[l].morphTargets[n]]=-1;for(var p in f){for(var m=[],q=[],n=0;n!==k[l].morphTargets.length;++n){var r=k[l];m.push(r.time);q.push(r.morphTarget===p?1:0)}d.push(new THREE.NumberKeyframeTrack(\".morphTargetInfluence[\"+p+\"]\",\r\nm,q))}f=f.length*(g||1)}else l=\".bones[\"+b[h].name+\"]\",c(THREE.VectorKeyframeTrack,l+\".position\",k,\"pos\",d),c(THREE.QuaternionKeyframeTrack,l+\".quaternion\",k,\"rot\",d),c(THREE.VectorKeyframeTrack,l+\".scale\",k,\"scl\",d)}return 0===d.length?null:new THREE.AnimationClip(e,f,d)}});THREE.AnimationMixer=function(a){this._root=a;this._initMemoryManager();this.time=this._accuIndex=0;this.timeScale=1};\r\nObject.assign(THREE.AnimationMixer.prototype,THREE.EventDispatcher.prototype,{clipAction:function(a,b){var c=b||this._root,d=c.uuid,e=\"string\"===typeof a?THREE.AnimationClip.findByName(c,a):a,c=null!==e?e.uuid:a,f=this._actionsByClip[c],g=null;if(void 0!==f){g=f.actionByRoot[d];if(void 0!==g)return g;g=f.knownActions[0];null===e&&(e=g._clip)}if(null===e)return null;e=new THREE.AnimationMixer._Action(this,e,b);this._bindAction(e,g);this._addInactiveAction(e,c,d);return e},existingAction:function(a,\r\nb){var c=b||this._root,d=c.uuid,c=\"string\"===typeof a?THREE.AnimationClip.findByName(c,a):a,c=this._actionsByClip[c?c.uuid:a];return void 0!==c?c.actionByRoot[d]||null:null},stopAllAction:function(){for(var a=this._actions,b=this._nActiveActions,c=this._bindings,d=this._nActiveBindings,e=this._nActiveBindings=this._nActiveActions=0;e!==b;++e)a[e].reset();for(e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var b=this._actions,c=this._nActiveActions,d=this.time+=\r\na,e=Math.sign(a),f=this._accuIndex^=1,g=0;g!==c;++g){var h=b[g];h.enabled&&h._update(d,a,e,f)}a=this._bindings;b=this._nActiveBindings;for(g=0;g!==b;++g)a[g].apply(f);return this},getRoot:function(){return this._root},uncacheClip:function(a){var b=this._actions;a=a.uuid;var c=this._actionsByClip,d=c[a];if(void 0!==d){for(var d=d.knownActions,e=0,f=d.length;e!==f;++e){var g=d[e];this._deactivateAction(g);var h=g._cacheIndex,k=b[b.length-1];g._cacheIndex=null;g._byClipCacheIndex=null;k._cacheIndex=\r\nh;b[h]=k;b.pop();this._removeInactiveBindingsForAction(g)}delete c[a]}},uncacheRoot:function(a){a=a.uuid;var b=this._actionsByClip,c;for(c in b){var d=b[c].actionByRoot[a];void 0!==d&&(this._deactivateAction(d),this._removeInactiveAction(d))}c=this._bindingsByRootAndName[a];if(void 0!==c)for(var e in c)a=c[e],a.restoreOriginalState(),this._removeInactiveBinding(a)},uncacheAction:function(a,b){var c=this.existingAction(a,b);null!==c&&(this._deactivateAction(c),this._removeInactiveAction(c))}});\r\nTHREE.AnimationMixer._Action=THREE.AnimationAction._new;\r\nObject.assign(THREE.AnimationMixer.prototype,{_bindAction:function(a,b){var c=a._localRoot||this._root,d=a._clip.tracks,e=d.length,f=a._propertyBindings,g=a._interpolants,h=c.uuid,k=this._bindingsByRootAndName,l=k[h];void 0===l&&(l={},k[h]=l);for(k=0;k!==e;++k){var n=d[k],p=n.name,m=l[p];if(void 0===m){m=f[k];if(void 0!==m){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,h,p));continue}m=new THREE.PropertyMixer(THREE.PropertyBinding.create(c,p,b&&b._propertyBindings[k].binding.parsedPath),\r\nn.ValueTypeName,n.getValueSize());++m.referenceCount;this._addInactiveBinding(m,h,p)}f[k]=m;g[k].resultBuffer=m.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var b=(a._localRoot||this._root).uuid,c=a._clip.uuid,d=this._actionsByClip[c];this._bindAction(a,d&&d.knownActions[0]);this._addInactiveAction(a,c,b)}b=a._propertyBindings;c=0;for(d=b.length;c!==d;++c){var e=b[c];0===e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(a)}},\r\n_deactivateAction:function(a){if(this._isActiveAction(a)){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},\r\nget inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},_isActiveAction:function(a){a=a._cacheIndex;return null!==a&&a<this._nActiveActions},_addInactiveAction:function(a,b,c){var d=this._actions,e=this._actionsByClip,f=e[b];void 0===f?(f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[b]=f):(b=\r\nf.knownActions,a._byClipCacheIndex=b.length,b.push(a));a._cacheIndex=d.length;d.push(a);f.actionByRoot[c]=a},_removeInactiveAction:function(a){var b=this._actions,c=b[b.length-1],d=a._cacheIndex;c._cacheIndex=d;b[d]=c;b.pop();a._cacheIndex=null;var c=a._clip.uuid,d=this._actionsByClip,e=d[c],f=e.knownActions,g=f[f.length-1],h=a._byClipCacheIndex;g._byClipCacheIndex=h;f[h]=g;f.pop();a._byClipCacheIndex=null;delete e.actionByRoot[(b._localRoot||this._root).uuid];0===f.length&&delete d[c];this._removeInactiveBindingsForAction(a)},\r\n_removeInactiveBindingsForAction:function(a){a=a._propertyBindings;for(var b=0,c=a.length;b!==c;++b){var d=a[b];0===--d.referenceCount&&this._removeInactiveBinding(d)}},_lendAction:function(a){var b=this._actions,c=a._cacheIndex,d=this._nActiveActions++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackAction:function(a){var b=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_addInactiveBinding:function(a,b,c){var d=this._bindingsByRootAndName,\r\ne=d[b],f=this._bindings;void 0===e&&(e={},d[b]=e);e[c]=a;a._cacheIndex=f.length;f.push(a)},_removeInactiveBinding:function(a){var b=this._bindings,c=a.binding,d=c.rootNode.uuid,c=c.path,e=this._bindingsByRootAndName,f=e[d],g=b[b.length-1];a=a._cacheIndex;g._cacheIndex=a;b[a]=g;b.pop();delete f[c];a:{for(var h in f)break a;delete e[d]}},_lendBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackBinding:function(a){var b=\r\nthis._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,b=this._nActiveControlInterpolants++,c=a[b];void 0===c&&(c=new THREE.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),c.__cacheIndex=b,a[b]=c);return c},_takeBackControlInterpolant:function(a){var b=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,\r\ne=b[d];a.__cacheIndex=d;b[d]=a;e.__cacheIndex=c;b[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1)});\r\nTHREE.AnimationObjectGroup=function(a){this.uuid=THREE.Math.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;var b={};this._indicesByUUID=b;for(var c=0,d=arguments.length;c!==d;++c)b[arguments[c].uuid]=c;this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};var e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}};\r\nTHREE.AnimationObjectGroup.prototype={constructor:THREE.AnimationObjectGroup,add:function(a){for(var b=this._objects,c=b.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._paths,g=this._parsedPaths,h=this._bindings,k=h.length,l=0,n=arguments.length;l!==n;++l){var p=arguments[l],m=p.uuid,q=e[m];if(void 0===q){q=c++;e[m]=q;b.push(p);for(var m=0,r=k;m!==r;++m)h[m].push(new THREE.PropertyBinding(p,f[m],g[m]))}else if(q<d){var s=b[q],u=--d,r=b[u];e[r.uuid]=q;b[q]=r;e[m]=u;b[u]=p;m=0;for(r=k;m!==\r\nr;++m){var x=h[m],v=x[q];x[q]=x[u];void 0===v&&(v=new THREE.PropertyBinding(p,f[m],g[m]));x[u]=v}}else b[q]!==s&&console.error(\"Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...\")}this.nCachedObjects_=d},remove:function(a){for(var b=this._objects,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._bindings,f=e.length,g=0,h=arguments.length;g!==h;++g){var k=arguments[g],l=k.uuid,n=d[l];if(void 0!==n&&n>=c){var p=c++,m=b[p];d[m.uuid]=\r\nn;b[n]=m;d[l]=p;b[p]=k;k=0;for(l=f;k!==l;++k){var m=e[k],q=m[n];m[n]=m[p];m[p]=q}}}this.nCachedObjects_=c},uncache:function(a){for(var b=this._objects,c=b.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._bindings,g=f.length,h=0,k=arguments.length;h!==k;++h){var l=arguments[h].uuid,n=e[l];if(void 0!==n)if(delete e[l],n<d){var l=--d,p=b[l],m=--c,q=b[m];e[p.uuid]=n;b[n]=p;e[q.uuid]=l;b[l]=q;b.pop();p=0;for(q=g;p!==q;++p){var r=f[p],s=r[m];r[n]=r[l];r[l]=s;r.pop()}}else for(m=--c,q=b[m],e[q.uuid]=\r\nn,b[n]=q,b.pop(),p=0,q=g;p!==q;++p)r=f[p],r[n]=r[m],r.pop()}this.nCachedObjects_=d},subscribe_:function(a,b){var c=this._bindingsIndicesByPath,d=c[a],e=this._bindings;if(void 0!==d)return e[d];var f=this._paths,g=this._parsedPaths,h=this._objects,k=this.nCachedObjects_,l=Array(h.length),d=e.length;c[a]=d;f.push(a);g.push(b);e.push(l);c=k;for(d=h.length;c!==d;++c)l[c]=new THREE.PropertyBinding(h[c],a,b);return l},unsubscribe_:function(a){var b=this._bindingsIndicesByPath,c=b[a];if(void 0!==c){var d=\r\nthis._paths,e=this._parsedPaths,f=this._bindings,g=f.length-1,h=f[g];b[a[g]]=c;f[c]=h;f.pop();e[c]=e[g];e.pop();d[c]=d[g];d.pop()}}};\r\nTHREE.AnimationUtils={arraySlice:function(a,b,c){return THREE.AnimationUtils.isTypedArray(a)?new a.constructor(a.subarray(b,c)):a.slice(b,c)},convertArray:function(a,b,c){return!a||!c&&a.constructor===b?a:\"number\"===typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){for(var b=a.length,c=Array(b),d=0;d!==b;++d)c[d]=d;c.sort(function(b,c){return a[b]-a[c]});return c},sortedArray:function(a,\r\nb,c){for(var d=a.length,e=new a.constructor(d),f=0,g=0;g!==d;++f)for(var h=c[f]*b,k=0;k!==b;++k)e[g++]=a[h+k];return e},flattenJSON:function(a,b,c,d){for(var e=1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var g=f[d];if(void 0!==g)if(Array.isArray(g)){do g=f[d],void 0!==g&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)}else if(void 0!==g.toArray){do g=f[d],void 0!==g&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else{do g=f[d],void 0!==g&&(b.push(f.time),\r\nc.push(g)),f=a[e++];while(void 0!==f)}}}};THREE.KeyframeTrack=function(a,b,c,d){if(void 0===a)throw Error(\"track name is undefined\");if(void 0===b||0===b.length)throw Error(\"no keyframes in track named \"+a);this.name=a;this.times=THREE.AnimationUtils.convertArray(b,this.TimeBufferType);this.values=THREE.AnimationUtils.convertArray(c,this.ValueBufferType);this.setInterpolation(d||this.DefaultInterpolation);this.validate();this.optimize()};\r\nTHREE.KeyframeTrack.prototype={constructor:THREE.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(a){return new THREE.DiscreteInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new THREE.LinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new THREE.CubicInterpolant(this.times,\r\nthis.values,this.getValueSize(),a)},setInterpolation:function(a){var b;switch(a){case THREE.InterpolateDiscrete:b=this.InterpolantFactoryMethodDiscrete;break;case THREE.InterpolateLinear:b=this.InterpolantFactoryMethodLinear;break;case THREE.InterpolateSmooth:b=this.InterpolantFactoryMethodSmooth}if(void 0===b){b=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant)if(a!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);\r\nelse throw Error(b);console.warn(b)}else this.createInterpolant=b},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return THREE.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return THREE.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return THREE.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]+=a;return this},\r\nscale:function(a){if(1!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]*=a;return this},trim:function(a,b){for(var c=this.times,d=c.length,e=0,f=d-1;e!==d&&c[e]<a;)++e;for(;-1!==f&&c[f]>b;)--f;++f;if(0!==e||f!==d)e>=f&&(f=Math.max(f,1),e=f-1),d=this.getValueSize(),this.times=THREE.AnimationUtils.arraySlice(c,e,f),this.values=THREE.AnimationUtils.arraySlice(this.values,e*d,f*d);return this},validate:function(){var a=!0,b=this.getValueSize();0!==b-Math.floor(b)&&(console.error(\"invalid value size in track\",\r\nthis),a=!1);var c=this.times,b=this.values,d=c.length;0===d&&(console.error(\"track is empty\",this),a=!1);for(var e=null,f=0;f!==d;f++){var g=c[f];if(\"number\"===typeof g&&isNaN(g)){console.error(\"time is not a valid number\",this,f,g);a=!1;break}if(null!==e&&e>g){console.error(\"out of order keys\",this,f,g,e);a=!1;break}e=g}if(void 0!==b&&THREE.AnimationUtils.isTypedArray(b))for(f=0,c=b.length;f!==c;++f)if(d=b[f],isNaN(d)){console.error(\"value is not a valid number\",this,f,d);a=!1;break}return a},optimize:function(){for(var a=\r\nthis.times,b=this.values,c=this.getValueSize(),d=1,e=1,f=a.length-1;e<=f;++e){var g=!1,h=a[e];if(h!==a[e+1]&&(1!==e||h!==h[0]))for(var k=e*c,l=k-c,n=k+c,h=0;h!==c;++h){var p=b[k+h];if(p!==b[l+h]||p!==b[n+h]){g=!0;break}}if(g){if(e!==d)for(a[d]=a[e],g=e*c,k=d*c,h=0;h!==c;++h)b[k+h]=b[g+h];++d}}d!==a.length&&(this.times=THREE.AnimationUtils.arraySlice(a,0,d),this.values=THREE.AnimationUtils.arraySlice(b,0,d*c));return this}};\r\nObject.assign(THREE.KeyframeTrack,{parse:function(a){if(void 0===a.type)throw Error(\"track type undefined, can not parse\");var b=THREE.KeyframeTrack._getTrackTypeForValueTypeName(a.type);if(void 0===a.times){var c=[],d=[];THREE.AnimationUtils.flattenJSON(a.keys,c,d,\"value\");a.times=c;a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)},toJSON:function(a){var b=a.constructor;if(void 0!==b.toJSON)b=b.toJSON(a);else{var b={name:a.name,times:THREE.AnimationUtils.convertArray(a.times,\r\nArray),values:THREE.AnimationUtils.convertArray(a.values,Array)},c=a.getInterpolation();c!==a.DefaultInterpolation&&(b.interpolation=c)}b.type=a.ValueTypeName;return b},_getTrackTypeForValueTypeName:function(a){switch(a.toLowerCase()){case \"scalar\":case \"double\":case \"float\":case \"number\":case \"integer\":return THREE.NumberKeyframeTrack;case \"vector\":case \"vector2\":case \"vector3\":case \"vector4\":return THREE.VectorKeyframeTrack;case \"color\":return THREE.ColorKeyframeTrack;case \"quaternion\":return THREE.QuaternionKeyframeTrack;\r\ncase \"bool\":case \"boolean\":return THREE.BooleanKeyframeTrack;case \"string\":return THREE.StringKeyframeTrack}throw Error(\"Unsupported typeName: \"+a);}});THREE.PropertyBinding=function(a,b,c){this.path=b;this.parsedPath=c||THREE.PropertyBinding.parseTrackName(b);this.node=THREE.PropertyBinding.findNode(a,this.parsedPath.nodeName)||a;this.rootNode=a};\r\nTHREE.PropertyBinding.prototype={constructor:THREE.PropertyBinding,getValue:function(a,b){this.bind();this.getValue(a,b)},setValue:function(a,b){this.bind();this.setValue(a,b)},bind:function(){var a=this.node,b=this.parsedPath,c=b.objectName,d=b.propertyName,e=b.propertyIndex;a||(this.node=a=THREE.PropertyBinding.findNode(this.rootNode,b.nodeName)||this.rootNode);this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(a){if(c){var f=b.objectIndex;switch(c){case \"materials\":if(!a.material){console.error(\"  can not bind to material as node does not have a material\",\r\nthis);return}if(!a.material.materials){console.error(\"  can not bind to material.materials as node.material does not have a materials array\",this);return}a=a.material.materials;break;case \"bones\":if(!a.skeleton){console.error(\"  can not bind to bones as node does not have a skeleton\",this);return}a=a.skeleton.bones;for(c=0;c<a.length;c++)if(a[c].name===f){f=c;break}break;default:if(void 0===a[c]){console.error(\"  can not bind to objectName of node, undefined\",this);return}a=a[c]}if(void 0!==f){if(void 0===\r\na[f]){console.error(\"  trying to bind to objectIndex of objectName, but is undefined:\",this,a);return}a=a[f]}}if(f=a[d]){b=this.Versioning.None;void 0!==a.needsUpdate?(b=this.Versioning.NeedsUpdate,this.targetObject=a):void 0!==a.matrixWorldNeedsUpdate&&(b=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=a);c=this.BindingType.Direct;if(void 0!==e){if(\"morphTargetInfluences\"===d){if(!a.geometry){console.error(\"  can not bind to morphTargetInfluences becasuse node does not have a geometry\",\r\nthis);return}if(!a.geometry.morphTargets){console.error(\"  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets\",this);return}for(c=0;c<this.node.geometry.morphTargets.length;c++)if(a.geometry.morphTargets[c].name===e){e=c;break}}c=this.BindingType.ArrayElement;this.resolvedProperty=f;this.propertyIndex=e}else void 0!==f.fromArray&&void 0!==f.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=f):void 0!==f.length?(c=this.BindingType.EntireArray,this.resolvedProperty=\r\nf):this.propertyName=d;this.getValue=this.GetterByBindingType[c];this.setValue=this.SetterByBindingTypeAndVersioning[c][b]}else console.error(\"  trying to update property for track: \"+b.nodeName+\".\"+d+\" but it wasn't found.\",a)}else console.error(\"  trying to update node for track: \"+this.path+\" but it wasn't found.\")},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}};\r\nObject.assign(THREE.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:THREE.PropertyBinding.prototype.getValue,_setValue_unbound:THREE.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(a,b){a[b]=this.node[this.propertyName]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[b++]=\r\nc[d]},function(a,b){a[b]=this.resolvedProperty[this.propertyIndex]},function(a,b){this.resolvedProperty.toArray(a,b)}],SetterByBindingTypeAndVersioning:[[function(a,b){this.node[this.propertyName]=a[b]},function(a,b){this.node[this.propertyName]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.node[this.propertyName]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++]},function(a,b){for(var c=this.resolvedProperty,\r\nd=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.needsUpdate=!0},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty[this.propertyIndex]=a[b]},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty.fromArray(a,\r\nb)},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.matrixWorldNeedsUpdate=!0}]]});THREE.PropertyBinding.Composite=function(a,b,c){c=c||THREE.PropertyBinding.parseTrackName(b);this._targetGroup=a;this._bindings=a.subscribe_(b,c)};\r\nTHREE.PropertyBinding.Composite.prototype={constructor:THREE.PropertyBinding.Composite,getValue:function(a,b){this.bind();var c=this._bindings[this._targetGroup.nCachedObjects_];void 0!==c&&c.getValue(a,b)},setValue:function(a,b){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,b)},bind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].bind()},unbind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,\r\nc=a.length;b!==c;++b)a[b].unbind()}};THREE.PropertyBinding.create=function(a,b,c){return a instanceof THREE.AnimationObjectGroup?new THREE.PropertyBinding.Composite(a,b,c):new THREE.PropertyBinding(a,b,c)};\r\nTHREE.PropertyBinding.parseTrackName=function(a){var b=/^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/,c=b.exec(a);if(!c)throw Error(\"cannot parse trackName at all: \"+a);c.index===b.lastIndex&&b.lastIndex++;b={nodeName:c[3],objectName:c[5],objectIndex:c[7],propertyName:c[9],propertyIndex:c[11]};if(null===b.propertyName||0===b.propertyName.length)throw Error(\"can not parse propertyName from trackName: \"+a);return b};\r\nTHREE.PropertyBinding.findNode=function(a,b){if(!b||\"\"===b||\"root\"===b||\".\"===b||-1===b||b===a.name||b===a.uuid)return a;if(a.skeleton){var c=function(a){for(var c=0;c<a.bones.length;c++){var d=a.bones[c];if(d.name===b)return d}return null}(a.skeleton);if(c)return c}if(a.children){var d=function(a){for(var c=0;c<a.length;c++){var g=a[c];if(g.name===b||g.uuid===b||(g=d(g.children)))return g}return null};if(c=d(a.children))return c}return null};\r\nTHREE.PropertyMixer=function(a,b,c){this.binding=a;this.valueSize=c;a=Float64Array;switch(b){case \"quaternion\":b=this._slerp;break;case \"string\":case \"bool\":a=Array;b=this._select;break;default:b=this._lerp}this.buffer=new a(4*c);this._mixBufferRegion=b;this.referenceCount=this.useCount=this.cumulativeWeight=0};\r\nTHREE.PropertyMixer.prototype={constructor:THREE.PropertyMixer,accumulate:function(a,b){var c=this.buffer,d=this.valueSize,e=a*d+d,f=this.cumulativeWeight;if(0===f){for(f=0;f!==d;++f)c[e+f]=c[f];f=b}else f+=b,this._mixBufferRegion(c,e,0,b/f,d);this.cumulativeWeight=f},apply:function(a){var b=this.valueSize,c=this.buffer;a=a*b+b;var d=this.cumulativeWeight,e=this.binding;this.cumulativeWeight=0;1>d&&this._mixBufferRegion(c,a,3*b,1-d,b);for(var d=b,f=b+b;d!==f;++d)if(c[d]!==c[d+b]){e.setValue(c,a);\r\nbreak}},saveOriginalState:function(){var a=this.buffer,b=this.valueSize,c=3*b;this.binding.getValue(a,c);for(var d=b;d!==c;++d)a[d]=a[c+d%b];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(a,b,c,d,e){if(.5<=d)for(d=0;d!==e;++d)a[b+d]=a[c+d]},_slerp:function(a,b,c,d,e){THREE.Quaternion.slerpFlat(a,b,a,b,a,c,d)},_lerp:function(a,b,c,d,e){for(var f=1-d,g=0;g!==e;++g){var h=b+g;a[h]=a[h]*f+a[c+g]*d}}};\r\nTHREE.BooleanKeyframeTrack=function(a,b,c){THREE.KeyframeTrack.call(this,a,b,c)};THREE.BooleanKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.BooleanKeyframeTrack,ValueTypeName:\"bool\",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});THREE.ColorKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\nTHREE.ColorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.ColorKeyframeTrack,ValueTypeName:\"color\"});THREE.NumberKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};THREE.NumberKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.NumberKeyframeTrack,ValueTypeName:\"number\"});THREE.QuaternionKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\nTHREE.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.QuaternionKeyframeTrack,ValueTypeName:\"quaternion\",DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodLinear:function(a){return new THREE.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0});THREE.StringKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\nTHREE.StringKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.StringKeyframeTrack,ValueTypeName:\"string\",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});THREE.VectorKeyframeTrack=function(a,b,c,d){THREE.KeyframeTrack.call(this,a,b,c,d)};\r\nTHREE.VectorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.VectorKeyframeTrack,ValueTypeName:\"vector\"});\r\nTHREE.Audio=function(a){THREE.Object3D.call(this);this.type=\"Audio\";this.context=a.context;this.source=this.context.createBufferSource();this.source.onended=this.onEnded.bind(this);this.gain=this.context.createGain();this.gain.connect(a.getInput());this.autoplay=!1;this.startTime=0;this.playbackRate=1;this.isPlaying=!1;this.hasPlaybackControl=!0;this.sourceType=\"empty\";this.filters=[]};\r\nTHREE.Audio.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Audio,getOutput:function(){return this.gain},setNodeSource:function(a){this.hasPlaybackControl=!1;this.sourceType=\"audioNode\";this.source=a;this.connect();return this},setBuffer:function(a){this.source.buffer=a;this.sourceType=\"buffer\";this.autoplay&&this.play();return this},play:function(){if(!0===this.isPlaying)console.warn(\"THREE.Audio: Audio is already playing.\");else if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");\r\nelse{var a=this.context.createBufferSource();a.buffer=this.source.buffer;a.loop=this.source.loop;a.onended=this.source.onended;a.start(0,this.startTime);a.playbackRate.value=this.playbackRate;this.isPlaying=!0;this.source=a;return this.connect()}},pause:function(){if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");else return this.source.stop(),this.startTime=this.context.currentTime,this},stop:function(){if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");\r\nelse return this.source.stop(),this.startTime=0,this},connect:function(){if(0<this.filters.length){this.source.connect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(0<this.filters.length){this.source.disconnect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);\r\nthis.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(a){a||(a=[]);!0===this.isPlaying?(this.disconnect(),this.filters=a,this.connect()):this.filters=a;return this},getFilter:function(){return this.getFilters()[0]},setFilter:function(a){return this.setFilters(a?[a]:[])},setPlaybackRate:function(a){if(!1===this.hasPlaybackControl)console.warn(\"THREE.Audio: this Audio has no playback control.\");\r\nelse return this.playbackRate=a,!0===this.isPlaying&&(this.source.playbackRate.value=this.playbackRate),this},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.source.loop},setLoop:function(a){!1===this.hasPlaybackControl?console.warn(\"THREE.Audio: this Audio has no playback control.\"):this.source.loop=a},getVolume:function(){return this.gain.gain.value},\r\nsetVolume:function(a){this.gain.gain.value=a;return this}});THREE.AudioAnalyser=function(a,b){this.analyser=a.context.createAnalyser();this.analyser.fftSize=void 0!==b?b:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);a.getOutput().connect(this.analyser)};\r\nObject.assign(THREE.AudioAnalyser.prototype,{getFrequencyData:function(){this.analyser.getByteFrequencyData(this.data);return this.data},getAverageFrequency:function(){for(var a=0,b=this.getFrequencyData(),c=0;c<b.length;c++)a+=b[c];return a/b.length}});Object.defineProperty(THREE,\"AudioContext\",{get:function(){var a;return function(){void 0===a&&(a=new (window.AudioContext||window.webkitAudioContext));return a}}()});\r\nTHREE.PositionalAudio=function(a){THREE.Audio.call(this,a);this.panner=this.context.createPanner();this.panner.connect(this.gain)};\r\nTHREE.PositionalAudio.prototype=Object.assign(Object.create(THREE.Audio.prototype),{constructor:THREE.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(a){this.panner.refDistance=a},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(a){this.panner.rolloffFactor=a},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(a){this.panner.distanceModel=\r\na},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(a){this.panner.maxDistance=a},updateMatrixWorld:function(){var a=new THREE.Vector3;return function(b){THREE.Object3D.prototype.updateMatrixWorld.call(this,b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x,a.y,a.z)}}()});\r\nTHREE.AudioListener=function(){THREE.Object3D.call(this);this.type=\"AudioListener\";this.context=THREE.AudioContext;this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null};\r\nTHREE.AudioListener.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(a){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):\r\nthis.gain.disconnect(this.context.destination);this.filter=a;this.gain.connect(this.filter);this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(a){this.gain.gain.value=a},updateMatrixWorld:function(){var a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3;return function(e){THREE.Object3D.prototype.updateMatrixWorld.call(this,e);e=this.context.listener;var f=this.up;this.matrixWorld.decompose(a,\r\nb,c);d.set(0,0,-1).applyQuaternion(b);e.setPosition(a.x,a.y,a.z);e.setOrientation(d.x,d.y,d.z,f.x,f.y,f.z)}}()});THREE.Camera=function(){THREE.Object3D.call(this);this.type=\"Camera\";this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.constructor=THREE.Camera;\r\nTHREE.Camera.prototype.getWorldDirection=function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,-1).applyQuaternion(a)}}();THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.Camera.prototype.clone=function(){return(new this.constructor).copy(this)};\r\nTHREE.Camera.prototype.copy=function(a){THREE.Object3D.prototype.copy.call(this,a);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this};\r\nTHREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);this.type=\"CubeCamera\";var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));\r\nthis.add(g);var h=new THREE.PerspectiveCamera(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,-1));this.add(k);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){null===this.parent&&this.updateMatrixWorld();var c=this.renderTarget,m=c.texture.generateMipmaps;c.texture.generateMipmaps=\r\n!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.texture.generateMipmaps=m;c.activeCubeFace=5;a.render(b,k,c);a.setRenderTarget(null)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor=THREE.CubeCamera;\r\nTHREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.type=\"OrthographicCamera\";this.zoom=1;this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};\r\nTHREE.OrthographicCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.OrthographicCamera,copy:function(a){THREE.Camera.prototype.copy.call(this,a);this.left=a.left;this.right=a.right;this.top=a.top;this.bottom=a.bottom;this.near=a.near;this.far=a.far;this.zoom=a.zoom;return this},updateProjectionMatrix:function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(c-\r\na,c+a,d+b,d-b,this.near,this.far)},toJSON:function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.zoom=this.zoom;a.object.left=this.left;a.object.right=this.right;a.object.top=this.top;a.object.bottom=this.bottom;a.object.near=this.near;a.object.far=this.far;return a}});\r\nTHREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.type=\"PerspectiveCamera\";this.fov=void 0!==a?a:50;this.zoom=1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.focus=10;this.aspect=void 0!==b?b:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()};\r\nTHREE.PerspectiveCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.PerspectiveCamera,copy:function(a){THREE.Camera.prototype.copy.call(this,a);this.fov=a.fov;this.zoom=a.zoom;this.near=a.near;this.far=a.far;this.focus=a.focus;this.aspect=a.aspect;this.view=null===a.view?null:Object.assign({},a.view);this.filmGauge=a.filmGauge;this.filmOffset=a.filmOffset;return this},setFocalLength:function(a){a=.5*this.getFilmHeight()/a;this.fov=2*THREE.Math.RAD2DEG*Math.atan(a);\r\nthis.updateProjectionMatrix()},getFocalLength:function(){var a=Math.tan(.5*THREE.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/a},getEffectiveFOV:function(){return 2*THREE.Math.RAD2DEG*Math.atan(Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(a,b,c,d,e,f){this.aspect=a/b;this.view={fullWidth:a,fullHeight:b,offsetX:c,offsetY:d,\r\nwidth:e,height:f};this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null;this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=this.near,b=a*Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom,c=2*b,d=this.aspect*c,e=-.5*d,f=this.view;if(null!==f)var g=f.fullWidth,h=f.fullHeight,e=e+f.offsetX*d/g,b=b-f.offsetY*c/h,d=f.width/g*d,c=f.height/h*c;f=this.filmOffset;0!==f&&(e+=a*f/this.getFilmWidth());this.projectionMatrix.makeFrustum(e,e+d,b-c,b,a,this.far)},toJSON:function(a){a=\r\nTHREE.Object3D.prototype.toJSON.call(this,a);a.object.fov=this.fov;a.object.zoom=this.zoom;a.object.near=this.near;a.object.far=this.far;a.object.focus=this.focus;a.object.aspect=this.aspect;null!==this.view&&(a.object.view=Object.assign({},this.view));a.object.filmGauge=this.filmGauge;a.object.filmOffset=this.filmOffset;return a}});\r\nTHREE.StereoCamera=function(){this.type=\"StereoCamera\";this.aspect=1;this.cameraL=new THREE.PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=!1;this.cameraR=new THREE.PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=!1};\r\nObject.assign(THREE.StereoCamera.prototype,{update:function(){var a,b,c,d,e,f=new THREE.Matrix4,g=new THREE.Matrix4;return function(h){if(a!==h.focus||b!==h.fov||c!==h.aspect*this.aspect||d!==h.near||e!==h.far){a=h.focus;b=h.fov;c=h.aspect*this.aspect;d=h.near;e=h.far;var k=h.projectionMatrix.clone(),l=.032*d/a,n=d*Math.tan(THREE.Math.DEG2RAD*b*.5),p,m;g.elements[12]=-.032;f.elements[12]=.032;p=-n*c+l;m=n*c+l;k.elements[0]=2*d/(m-p);k.elements[8]=(m+p)/(m-p);this.cameraL.projectionMatrix.copy(k);\r\np=-n*c-l;m=n*c-l;k.elements[0]=2*d/(m-p);k.elements[8]=(m+p)/(m-p);this.cameraR.projectionMatrix.copy(k)}this.cameraL.matrixWorld.copy(h.matrixWorld).multiply(g);this.cameraR.matrixWorld.copy(h.matrixWorld).multiply(f)}}()});THREE.Light=function(a,b){THREE.Object3D.call(this);this.type=\"Light\";this.color=new THREE.Color(a);this.intensity=void 0!==b?b:1;this.receiveShadow=void 0};\r\nTHREE.Light.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Light,copy:function(a){THREE.Object3D.prototype.copy.call(this,a);this.color.copy(a.color);this.intensity=a.intensity;return this},toJSON:function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(a.object.distance=this.distance);void 0!==\r\nthis.angle&&(a.object.angle=this.angle);void 0!==this.decay&&(a.object.decay=this.decay);void 0!==this.penumbra&&(a.object.penumbra=this.penumbra);return a}});THREE.LightShadow=function(a){this.camera=a;this.bias=0;this.radius=1;this.mapSize=new THREE.Vector2(512,512);this.map=null;this.matrix=new THREE.Matrix4};Object.assign(THREE.LightShadow.prototype,{copy:function(a){this.camera=a.camera.clone();this.bias=a.bias;this.radius=a.radius;this.mapSize.copy(a.mapSize);return this},clone:function(){return(new this.constructor).copy(this)}});\r\nTHREE.AmbientLight=function(a,b){THREE.Light.call(this,a,b);this.type=\"AmbientLight\";this.castShadow=void 0};THREE.AmbientLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.AmbientLight});THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a,b);this.type=\"DirectionalLight\";this.position.set(0,1,0);this.updateMatrix();this.target=new THREE.Object3D;this.shadow=new THREE.DirectionalLightShadow};\r\nTHREE.DirectionalLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.DirectionalLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});THREE.DirectionalLightShadow=function(a){THREE.LightShadow.call(this,new THREE.OrthographicCamera(-5,5,5,-5,.5,500))};THREE.DirectionalLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.DirectionalLightShadow});\r\nTHREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a,c);this.type=\"HemisphereLight\";this.castShadow=void 0;this.position.set(0,1,0);this.updateMatrix();this.groundColor=new THREE.Color(b)};THREE.HemisphereLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.HemisphereLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.groundColor.copy(a.groundColor);return this}});\r\nTHREE.PointLight=function(a,b,c,d){THREE.Light.call(this,a,b);this.type=\"PointLight\";Object.defineProperty(this,\"power\",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=a/(4*Math.PI)}});this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1;this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(90,1,.5,500))};\r\nTHREE.PointLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.PointLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.distance=a.distance;this.decay=a.decay;this.shadow=a.shadow.clone();return this}});\r\nTHREE.SpotLight=function(a,b,c,d,e,f){THREE.Light.call(this,a,b);this.type=\"SpotLight\";this.position.set(0,1,0);this.updateMatrix();this.target=new THREE.Object3D;Object.defineProperty(this,\"power\",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}});this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.penumbra=void 0!==e?e:0;this.decay=void 0!==f?f:1;this.shadow=new THREE.SpotLightShadow};\r\nTHREE.SpotLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.SpotLight,copy:function(a){THREE.Light.prototype.copy.call(this,a);this.distance=a.distance;this.angle=a.angle;this.penumbra=a.penumbra;this.decay=a.decay;this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});THREE.SpotLightShadow=function(){THREE.LightShadow.call(this,new THREE.PerspectiveCamera(50,1,.5,500))};\r\nTHREE.SpotLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.SpotLightShadow,update:function(a){var b=2*THREE.Math.RAD2DEG*a.angle,c=this.mapSize.width/this.mapSize.height;a=a.distance||500;var d=this.camera;if(b!==d.fov||c!==d.aspect||a!==d.far)d.fov=b,d.aspect=c,d.far=a,d.updateProjectionMatrix()}});THREE.AudioLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\nTHREE.AudioLoader.prototype={constructor:THREE.AudioLoader,load:function(a,b,c,d){var e=new THREE.XHRLoader(this.manager);e.setResponseType(\"arraybuffer\");e.load(a,function(a){THREE.AudioContext.decodeAudioData(a,function(a){b(a)})},c,d)}};THREE.Cache={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};\r\nTHREE.Loader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};\r\nTHREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,extractUrlBase:function(a){a=a.split(\"/\");if(1===a.length)return\"./\";a.pop();return a.join(\"/\")+\"/\"},initMaterials:function(a,b,c){for(var d=[],e=0;e<a.length;++e)d[e]=this.createMaterial(a[e],b,c);return d},createMaterial:function(){var a,b,c;return function(d,e,f){function g(a,c,d,g,k){a=e+a;var l=THREE.Loader.Handlers.get(a);null!==l?a=l.load(a):(b.setCrossOrigin(f),a=b.load(a));void 0!==c&&(a.repeat.fromArray(c),1!==c[0]&&(a.wrapS=\r\nTHREE.RepeatWrapping),1!==c[1]&&(a.wrapT=THREE.RepeatWrapping));void 0!==d&&a.offset.fromArray(d);void 0!==g&&(\"repeat\"===g[0]&&(a.wrapS=THREE.RepeatWrapping),\"mirror\"===g[0]&&(a.wrapS=THREE.MirroredRepeatWrapping),\"repeat\"===g[1]&&(a.wrapT=THREE.RepeatWrapping),\"mirror\"===g[1]&&(a.wrapT=THREE.MirroredRepeatWrapping));void 0!==k&&(a.anisotropy=k);c=THREE.Math.generateUUID();h[c]=a;return c}void 0===a&&(a=new THREE.Color);void 0===b&&(b=new THREE.TextureLoader);void 0===c&&(c=new THREE.MaterialLoader);\r\nvar h={},k={uuid:THREE.Math.generateUUID(),type:\"MeshLambertMaterial\"},l;for(l in d){var n=d[l];switch(l){case \"DbgColor\":case \"DbgIndex\":case \"opticalDensity\":case \"illumination\":break;case \"DbgName\":k.name=n;break;case \"blending\":k.blending=THREE[n];break;case \"colorAmbient\":case \"mapAmbient\":console.warn(\"THREE.Loader.createMaterial:\",l,\"is no longer supported.\");break;case \"colorDiffuse\":k.color=a.fromArray(n).getHex();break;case \"colorSpecular\":k.specular=a.fromArray(n).getHex();break;case \"colorEmissive\":k.emissive=\r\na.fromArray(n).getHex();break;case \"specularCoef\":k.shininess=n;break;case \"shading\":\"basic\"===n.toLowerCase()&&(k.type=\"MeshBasicMaterial\");\"phong\"===n.toLowerCase()&&(k.type=\"MeshPhongMaterial\");break;case \"mapDiffuse\":k.map=g(n,d.mapDiffuseRepeat,d.mapDiffuseOffset,d.mapDiffuseWrap,d.mapDiffuseAnisotropy);break;case \"mapDiffuseRepeat\":case \"mapDiffuseOffset\":case \"mapDiffuseWrap\":case \"mapDiffuseAnisotropy\":break;case \"mapLight\":k.lightMap=g(n,d.mapLightRepeat,d.mapLightOffset,d.mapLightWrap,d.mapLightAnisotropy);\r\nbreak;case \"mapLightRepeat\":case \"mapLightOffset\":case \"mapLightWrap\":case \"mapLightAnisotropy\":break;case \"mapAO\":k.aoMap=g(n,d.mapAORepeat,d.mapAOOffset,d.mapAOWrap,d.mapAOAnisotropy);break;case \"mapAORepeat\":case \"mapAOOffset\":case \"mapAOWrap\":case \"mapAOAnisotropy\":break;case \"mapBump\":k.bumpMap=g(n,d.mapBumpRepeat,d.mapBumpOffset,d.mapBumpWrap,d.mapBumpAnisotropy);break;case \"mapBumpScale\":k.bumpScale=n;break;case \"mapBumpRepeat\":case \"mapBumpOffset\":case \"mapBumpWrap\":case \"mapBumpAnisotropy\":break;\r\ncase \"mapNormal\":k.normalMap=g(n,d.mapNormalRepeat,d.mapNormalOffset,d.mapNormalWrap,d.mapNormalAnisotropy);break;case \"mapNormalFactor\":k.normalScale=[n,n];break;case \"mapNormalRepeat\":case \"mapNormalOffset\":case \"mapNormalWrap\":case \"mapNormalAnisotropy\":break;case \"mapSpecular\":k.specularMap=g(n,d.mapSpecularRepeat,d.mapSpecularOffset,d.mapSpecularWrap,d.mapSpecularAnisotropy);break;case \"mapSpecularRepeat\":case \"mapSpecularOffset\":case \"mapSpecularWrap\":case \"mapSpecularAnisotropy\":break;case \"mapAlpha\":k.alphaMap=\r\ng(n,d.mapAlphaRepeat,d.mapAlphaOffset,d.mapAlphaWrap,d.mapAlphaAnisotropy);break;case \"mapAlphaRepeat\":case \"mapAlphaOffset\":case \"mapAlphaWrap\":case \"mapAlphaAnisotropy\":break;case \"flipSided\":k.side=THREE.BackSide;break;case \"doubleSided\":k.side=THREE.DoubleSide;break;case \"transparency\":console.warn(\"THREE.Loader.createMaterial: transparency has been renamed to opacity\");k.opacity=n;break;case \"depthTest\":case \"depthWrite\":case \"colorWrite\":case \"opacity\":case \"reflectivity\":case \"transparent\":case \"visible\":case \"wireframe\":k[l]=\r\nn;break;case \"vertexColors\":!0===n&&(k.vertexColors=THREE.VertexColors);\"face\"===n&&(k.vertexColors=THREE.FaceColors);break;default:console.error(\"THREE.Loader.createMaterial: Unsupported\",l,n)}}\"MeshBasicMaterial\"===k.type&&delete k.emissive;\"MeshPhongMaterial\"!==k.type&&delete k.specular;1>k.opacity&&(k.transparent=!0);c.setTextures(h);return c.parse(k)}}()};\r\nTHREE.Loader.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,b)},get:function(a){for(var b=this.handlers,c=0,d=b.length;c<d;c+=2){var e=b[c+1];if(b[c].test(a))return e}return null}};THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\nTHREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){void 0!==this.path&&(a=this.path+a);var e=this,f=THREE.Cache.get(a);if(void 0!==f)return b&&setTimeout(function(){b(f)},0),f;var g=new XMLHttpRequest;g.overrideMimeType(\"text/plain\");g.open(\"GET\",a,!0);g.addEventListener(\"load\",function(c){var f=c.target.response;THREE.Cache.add(a,f);200===this.status?(b&&b(f),e.manager.itemEnd(a)):0===this.status?(console.warn(\"THREE.XHRLoader: HTTP Status 0 received.\"),b&&b(f),e.manager.itemEnd(a)):\r\n(d&&d(c),e.manager.itemError(a))},!1);void 0!==c&&g.addEventListener(\"progress\",function(a){c(a)},!1);g.addEventListener(\"error\",function(b){d&&d(b);e.manager.itemError(a)},!1);void 0!==this.responseType&&(g.responseType=this.responseType);void 0!==this.withCredentials&&(g.withCredentials=this.withCredentials);g.send(null);e.manager.itemStart(a);return g},setPath:function(a){this.path=a},setResponseType:function(a){this.responseType=a},setWithCredentials:function(a){this.withCredentials=a}};\r\nTHREE.FontLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.FontLoader.prototype={constructor:THREE.FontLoader,load:function(a,b,c,d){var e=this;(new THREE.XHRLoader(this.manager)).load(a,function(a){var c;try{c=JSON.parse(a)}catch(d){console.warn(\"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"),c=JSON.parse(a.substring(65,a.length-2))}a=e.parse(c);b&&b(a)},c,d)},parse:function(a){return new THREE.Font(a)}};\r\nTHREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\nTHREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){void 0!==this.path&&(a=this.path+a);var e=this,f=THREE.Cache.get(a);if(void 0!==f)return e.manager.itemStart(a),b?setTimeout(function(){b(f);e.manager.itemEnd(a)},0):e.manager.itemEnd(a),f;var g=document.createElement(\"img\");g.addEventListener(\"load\",function(c){THREE.Cache.add(a,this);b&&b(this);e.manager.itemEnd(a)},!1);void 0!==c&&g.addEventListener(\"progress\",function(a){c(a)},!1);g.addEventListener(\"error\",function(b){d&&\r\nd(b);e.manager.itemError(a)},!1);void 0!==this.crossOrigin&&(g.crossOrigin=this.crossOrigin);e.manager.itemStart(a);g.src=a;return g},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}};THREE.JSONLoader=function(a){\"boolean\"===typeof a&&(console.warn(\"THREE.JSONLoader: showStatus parameter has been removed from constructor.\"),a=void 0);this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.withCredentials=!1};\r\nTHREE.JSONLoader.prototype={constructor:THREE.JSONLoader,get statusDomElement(){void 0===this._statusDomElement&&(this._statusDomElement=document.createElement(\"div\"));console.warn(\"THREE.JSONLoader: .statusDomElement has been removed.\");return this._statusDomElement},load:function(a,b,c,d){var e=this,f=this.texturePath&&\"string\"===typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(a),g=new THREE.XHRLoader(this.manager);g.setWithCredentials(this.withCredentials);g.load(a,\r\nfunction(c){c=JSON.parse(c);var d=c.metadata;if(void 0!==d&&(d=d.type,void 0!==d)){if(\"object\"===d.toLowerCase()){console.error(\"THREE.JSONLoader: \"+a+\" should be loaded with THREE.ObjectLoader instead.\");return}if(\"scene\"===d.toLowerCase()){console.error(\"THREE.JSONLoader: \"+a+\" should be loaded with THREE.SceneLoader instead.\");return}}c=e.parse(c,f);b(c.geometry,c.materials)},c,d)},setTexturePath:function(a){this.texturePath=a},parse:function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/\r\na.scale:1;(function(b){var d,g,h,k,l,n,p,m,q,r,s,u,x,v=a.faces;n=a.vertices;var C=a.normals,w=a.colors,D=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&D++;for(d=0;d<D;d++)c.faceVertexUvs[d]=[]}k=0;for(l=n.length;k<l;)d=new THREE.Vector3,d.x=n[k++]*b,d.y=n[k++]*b,d.z=n[k++]*b,c.vertices.push(d);k=0;for(l=v.length;k<l;)if(b=v[k++],q=b&1,h=b&2,d=b&8,p=b&16,r=b&32,n=b&64,b&=128,q){q=new THREE.Face3;q.a=v[k];q.b=v[k+1];q.c=v[k+3];s=new THREE.Face3;s.a=v[k+1];s.b=v[k+2];s.c=v[k+3];k+=\r\n4;h&&(h=v[k++],q.materialIndex=h,s.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<D;d++)for(u=a.uvs[d],c.faceVertexUvs[d][h]=[],c.faceVertexUvs[d][h+1]=[],g=0;4>g;g++)m=v[k++],x=u[2*m],m=u[2*m+1],x=new THREE.Vector2(x,m),2!==g&&c.faceVertexUvs[d][h].push(x),0!==g&&c.faceVertexUvs[d][h+1].push(x);p&&(p=3*v[k++],q.normal.set(C[p++],C[p++],C[p]),s.normal.copy(q.normal));if(r)for(d=0;4>d;d++)p=3*v[k++],r=new THREE.Vector3(C[p++],C[p++],C[p]),2!==d&&q.vertexNormals.push(r),0!==d&&s.vertexNormals.push(r);\r\nn&&(n=v[k++],n=w[n],q.color.setHex(n),s.color.setHex(n));if(b)for(d=0;4>d;d++)n=v[k++],n=w[n],2!==d&&q.vertexColors.push(new THREE.Color(n)),0!==d&&s.vertexColors.push(new THREE.Color(n));c.faces.push(q);c.faces.push(s)}else{q=new THREE.Face3;q.a=v[k++];q.b=v[k++];q.c=v[k++];h&&(h=v[k++],q.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<D;d++)for(u=a.uvs[d],c.faceVertexUvs[d][h]=[],g=0;3>g;g++)m=v[k++],x=u[2*m],m=u[2*m+1],x=new THREE.Vector2(x,m),c.faceVertexUvs[d][h].push(x);p&&(p=3*v[k++],q.normal.set(C[p++],\r\nC[p++],C[p]));if(r)for(d=0;3>d;d++)p=3*v[k++],r=new THREE.Vector3(C[p++],C[p++],C[p]),q.vertexNormals.push(r);n&&(n=v[k++],q.color.setHex(w[n]));if(b)for(d=0;3>d;d++)n=v[k++],q.vertexColors.push(new THREE.Color(w[n]));c.faces.push(q)}})(d);(function(){var b=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,g=a.skinWeights.length;d<g;d+=b)c.skinWeights.push(new THREE.Vector4(a.skinWeights[d],1<b?a.skinWeights[d+1]:0,2<b?a.skinWeights[d+2]:0,3<b?a.skinWeights[d+3]:\r\n0));if(a.skinIndices)for(d=0,g=a.skinIndices.length;d<g;d+=b)c.skinIndices.push(new THREE.Vector4(a.skinIndices[d],1<b?a.skinIndices[d+1]:0,2<b?a.skinIndices[d+2]:0,3<b?a.skinIndices[d+3]:0));c.bones=a.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&console.warn(\"When skinning, number of vertices (\"+c.vertices.length+\"), skinIndices (\"+c.skinIndices.length+\"), and skinWeights (\"+c.skinWeights.length+\") should match.\")})();(function(b){if(void 0!==\r\na.morphTargets)for(var d=0,g=a.morphTargets.length;d<g;d++){c.morphTargets[d]={};c.morphTargets[d].name=a.morphTargets[d].name;c.morphTargets[d].vertices=[];for(var h=c.morphTargets[d].vertices,k=a.morphTargets[d].vertices,l=0,n=k.length;l<n;l+=3){var p=new THREE.Vector3;p.x=k[l]*b;p.y=k[l+1]*b;p.z=k[l+2]*b;h.push(p)}}if(void 0!==a.morphColors&&0<a.morphColors.length)for(console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.'),b=c.faces,h=a.morphColors[0].colors,\r\nd=0,g=b.length;d<g;d++)b[d].color.fromArray(h,3*d)})(d);(function(){var b=[],d=[];void 0!==a.animation&&d.push(a.animation);void 0!==a.animations&&(a.animations.length?d=d.concat(a.animations):d.push(a.animations));for(var g=0;g<d.length;g++){var h=THREE.AnimationClip.parseAnimation(d[g],c.bones);h&&b.push(h)}c.morphTargets&&(d=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(c.morphTargets,10),b=b.concat(d));0<b.length&&(c.animations=b)})();c.computeFaceNormals();c.computeBoundingSphere();\r\nif(void 0===a.materials||0===a.materials.length)return{geometry:c};d=THREE.Loader.prototype.initMaterials(a.materials,b,this.crossOrigin);return{geometry:c,materials:d}}};\r\nTHREE.LoadingManager=function(a,b,c){var d=this,e=!1,f=0,g=0;this.onStart=void 0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){g++;if(!1===e&&void 0!==d.onStart)d.onStart(a,f,g);e=!0};this.itemEnd=function(a){f++;if(void 0!==d.onProgress)d.onProgress(a,f,g);if(f===g&&(e=!1,void 0!==d.onLoad))d.onLoad()};this.itemError=function(a){if(void 0!==d.onError)d.onError(a)}};THREE.DefaultLoadingManager=new THREE.LoadingManager;\r\nTHREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\nTHREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this;(new THREE.XHRLoader(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){var b=new THREE.BufferGeometry,c=a.data.index,d={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};void 0!==c&&(c=\r\nnew d[c.type](c.array),b.setIndex(new THREE.BufferAttribute(c,1)));var e=a.data.attributes,f;for(f in e){var g=e[f],c=new d[g.type](g.array);b.addAttribute(f,new THREE.BufferAttribute(c,g.itemSize,g.normalized))}d=a.data.groups||a.data.drawcalls||a.data.offsets;if(void 0!==d)for(f=0,c=d.length;f!==c;++f)e=d[f],b.addGroup(e.start,e.count,e.materialIndex);a=a.data.boundingSphere;void 0!==a&&(d=new THREE.Vector3,void 0!==a.center&&d.fromArray(a.center),b.boundingSphere=new THREE.Sphere(d,a.radius));\r\nreturn b}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.textures={}};\r\nTHREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this;(new THREE.XHRLoader(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setTextures:function(a){this.textures=a},getTexture:function(a){var b=this.textures;void 0===b[a]&&console.warn(\"THREE.MaterialLoader: Undefined texture\",a);return b[a]},parse:function(a){var b=new THREE[a.type];void 0!==a.uuid&&(b.uuid=a.uuid);void 0!==a.name&&(b.name=a.name);void 0!==a.color&&b.color.setHex(a.color);\r\nvoid 0!==a.roughness&&(b.roughness=a.roughness);void 0!==a.metalness&&(b.metalness=a.metalness);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&(b.shininess=a.shininess);void 0!==a.uniforms&&(b.uniforms=a.uniforms);void 0!==a.vertexShader&&(b.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(b.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.shading&&(b.shading=a.shading);\r\nvoid 0!==a.blending&&(b.blending=a.blending);void 0!==a.side&&(b.side=a.side);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.alphaTest&&(b.alphaTest=a.alphaTest);void 0!==a.depthTest&&(b.depthTest=a.depthTest);void 0!==a.depthWrite&&(b.depthWrite=a.depthWrite);void 0!==a.colorWrite&&(b.colorWrite=a.colorWrite);void 0!==a.wireframe&&(b.wireframe=a.wireframe);void 0!==a.wireframeLinewidth&&(b.wireframeLinewidth=a.wireframeLinewidth);void 0!==\r\na.size&&(b.size=a.size);void 0!==a.sizeAttenuation&&(b.sizeAttenuation=a.sizeAttenuation);void 0!==a.map&&(b.map=this.getTexture(a.map));void 0!==a.alphaMap&&(b.alphaMap=this.getTexture(a.alphaMap),b.transparent=!0);void 0!==a.bumpMap&&(b.bumpMap=this.getTexture(a.bumpMap));void 0!==a.bumpScale&&(b.bumpScale=a.bumpScale);void 0!==a.normalMap&&(b.normalMap=this.getTexture(a.normalMap));if(void 0!==a.normalScale){var c=a.normalScale;!1===Array.isArray(c)&&(c=[c,c]);b.normalScale=(new THREE.Vector2).fromArray(c)}void 0!==\r\na.displacementMap&&(b.displacementMap=this.getTexture(a.displacementMap));void 0!==a.displacementScale&&(b.displacementScale=a.displacementScale);void 0!==a.displacementBias&&(b.displacementBias=a.displacementBias);void 0!==a.roughnessMap&&(b.roughnessMap=this.getTexture(a.roughnessMap));void 0!==a.metalnessMap&&(b.metalnessMap=this.getTexture(a.metalnessMap));void 0!==a.emissiveMap&&(b.emissiveMap=this.getTexture(a.emissiveMap));void 0!==a.emissiveIntensity&&(b.emissiveIntensity=a.emissiveIntensity);\r\nvoid 0!==a.specularMap&&(b.specularMap=this.getTexture(a.specularMap));void 0!==a.envMap&&(b.envMap=this.getTexture(a.envMap),b.combine=THREE.MultiplyOperation);a.reflectivity&&(b.reflectivity=a.reflectivity);void 0!==a.lightMap&&(b.lightMap=this.getTexture(a.lightMap));void 0!==a.lightMapIntensity&&(b.lightMapIntensity=a.lightMapIntensity);void 0!==a.aoMap&&(b.aoMap=this.getTexture(a.aoMap));void 0!==a.aoMapIntensity&&(b.aoMapIntensity=a.aoMapIntensity);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<\r\nd;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.texturePath=\"\"};\r\nTHREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){\"\"===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf(\"/\")+1));var e=this;(new THREE.XHRLoader(e.manager)).load(a,function(a){e.parse(JSON.parse(a),b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==b&&b(e)}),d=this.parseTextures(a.textures,\r\nd),d=this.parseMaterials(a.materials,d),e=this.parseObject(a.object,c,d);a.animations&&(e.animations=this.parseAnimations(a.animations));void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case \"PlaneGeometry\":case \"PlaneBufferGeometry\":g=new THREE[h.type](h.width,h.height,h.widthSegments,h.heightSegments);break;case \"BoxGeometry\":case \"BoxBufferGeometry\":case \"CubeGeometry\":g=\r\nnew THREE[h.type](h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case \"CircleGeometry\":case \"CircleBufferGeometry\":g=new THREE[h.type](h.radius,h.segments,h.thetaStart,h.thetaLength);break;case \"CylinderGeometry\":case \"CylinderBufferGeometry\":g=new THREE[h.type](h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case \"ConeGeometry\":case \"ConeBufferGeometry\":g=new THREE[h.type](h.radius,h.height,h.radialSegments,\r\nh.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case \"SphereGeometry\":case \"SphereBufferGeometry\":g=new THREE[h.type](h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case \"DodecahedronGeometry\":case \"IcosahedronGeometry\":case \"OctahedronGeometry\":case \"TetrahedronGeometry\":g=new THREE[h.type](h.radius,h.detail);break;case \"RingGeometry\":case \"RingBufferGeometry\":g=new THREE[h.type](h.innerRadius,h.outerRadius,h.thetaSegments,h.phiSegments,\r\nh.thetaStart,h.thetaLength);break;case \"TorusGeometry\":case \"TorusBufferGeometry\":g=new THREE[h.type](h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case \"TorusKnotGeometry\":case \"TorusKnotBufferGeometry\":g=new THREE[h.type](h.radius,h.tube,h.tubularSegments,h.radialSegments,h.p,h.q);break;case \"LatheGeometry\":case \"LatheBufferGeometry\":g=new THREE[h.type](h.points,h.segments,h.phiStart,h.phiLength);break;case \"BufferGeometry\":g=d.parse(h);break;case \"Geometry\":g=c.parse(h.data,this.texturePath).geometry;\r\nbreak;default:console.warn('THREE.ObjectLoader: Unsupported geometry type \"'+h.type+'\"');continue}g.uuid=h.uuid;void 0!==h.name&&(g.name=h.name);b[h.uuid]=g}return b},parseMaterials:function(a,b){var c={};if(void 0!==a){var d=new THREE.MaterialLoader;d.setTextures(b);for(var e=0,f=a.length;e<f;e++){var g=d.parse(a[e]);c[g.uuid]=g}}return c},parseAnimations:function(a){for(var b=[],c=0;c<a.length;c++){var d=THREE.AnimationClip.parse(a[c]);b.push(d)}return b},parseImages:function(a,b){function c(a){d.manager.itemStart(a);\r\nreturn g.load(a,function(){d.manager.itemEnd(a)})}var d=this,e={};if(void 0!==a&&0<a.length){var f=new THREE.LoadingManager(b),g=new THREE.ImageLoader(f);g.setCrossOrigin(this.crossOrigin);for(var f=0,h=a.length;f<h;f++){var k=a[f],l=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(k.url)?k.url:d.texturePath+k.url;e[k.uuid]=c(l)}}return e},parseTextures:function(a,b){function c(a){if(\"number\"===typeof a)return a;console.warn(\"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",a);return THREE[a]}\r\nvar d={};if(void 0!==a)for(var e=0,f=a.length;e<f;e++){var g=a[e];void 0===g.image&&console.warn('THREE.ObjectLoader: No \"image\" specified for',g.uuid);void 0===b[g.image]&&console.warn(\"THREE.ObjectLoader: Undefined image\",g.image);var h=new THREE.Texture(b[g.image]);h.needsUpdate=!0;h.uuid=g.uuid;void 0!==g.name&&(h.name=g.name);void 0!==g.mapping&&(h.mapping=c(g.mapping));void 0!==g.offset&&(h.offset=new THREE.Vector2(g.offset[0],g.offset[1]));void 0!==g.repeat&&(h.repeat=new THREE.Vector2(g.repeat[0],\r\ng.repeat[1]));void 0!==g.minFilter&&(h.minFilter=c(g.minFilter));void 0!==g.magFilter&&(h.magFilter=c(g.magFilter));void 0!==g.anisotropy&&(h.anisotropy=g.anisotropy);Array.isArray(g.wrap)&&(h.wrapS=c(g.wrap[0]),h.wrapT=c(g.wrap[1]));d[g.uuid]=h}return d},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){function e(a){void 0===c[a]&&console.warn(\"THREE.ObjectLoader: Undefined geometry\",a);return c[a]}function f(a){if(void 0!==a)return void 0===d[a]&&console.warn(\"THREE.ObjectLoader: Undefined material\",\r\na),d[a]}var g;switch(b.type){case \"Scene\":g=new THREE.Scene;break;case \"PerspectiveCamera\":g=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);void 0!==b.focus&&(g.focus=b.focus);void 0!==b.zoom&&(g.zoom=b.zoom);void 0!==b.filmGauge&&(g.filmGauge=b.filmGauge);void 0!==b.filmOffset&&(g.filmOffset=b.filmOffset);void 0!==b.view&&(g.view=Object.assign({},b.view));break;case \"OrthographicCamera\":g=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case \"AmbientLight\":g=\r\nnew THREE.AmbientLight(b.color,b.intensity);break;case \"DirectionalLight\":g=new THREE.DirectionalLight(b.color,b.intensity);break;case \"PointLight\":g=new THREE.PointLight(b.color,b.intensity,b.distance,b.decay);break;case \"SpotLight\":g=new THREE.SpotLight(b.color,b.intensity,b.distance,b.angle,b.penumbra,b.decay);break;case \"HemisphereLight\":g=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case \"Mesh\":g=e(b.geometry);var h=f(b.material);g=g.bones&&0<g.bones.length?new THREE.SkinnedMesh(g,\r\nh):new THREE.Mesh(g,h);break;case \"LOD\":g=new THREE.LOD;break;case \"Line\":g=new THREE.Line(e(b.geometry),f(b.material),b.mode);break;case \"PointCloud\":case \"Points\":g=new THREE.Points(e(b.geometry),f(b.material));break;case \"Sprite\":g=new THREE.Sprite(f(b.material));break;case \"Group\":g=new THREE.Group;break;default:g=new THREE.Object3D}g.uuid=b.uuid;void 0!==b.name&&(g.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(g.position,g.quaternion,g.scale)):(void 0!==b.position&&g.position.fromArray(b.position),\r\nvoid 0!==b.rotation&&g.rotation.fromArray(b.rotation),void 0!==b.scale&&g.scale.fromArray(b.scale));void 0!==b.castShadow&&(g.castShadow=b.castShadow);void 0!==b.receiveShadow&&(g.receiveShadow=b.receiveShadow);void 0!==b.visible&&(g.visible=b.visible);void 0!==b.userData&&(g.userData=b.userData);if(void 0!==b.children)for(var k in b.children)g.add(this.parseObject(b.children[k],c,d));if(\"LOD\"===b.type)for(b=b.levels,h=0;h<b.length;h++){var l=b[h];k=g.getObjectByProperty(\"uuid\",l.object);void 0!==\r\nk&&g.addLevel(k,l.distance)}return g}}()};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){var e=new THREE.Texture,f=new THREE.ImageLoader(this.manager);f.setCrossOrigin(this.crossOrigin);f.setPath(this.path);f.load(a,function(a){e.image=a;e.needsUpdate=!0;void 0!==b&&b(e)},c,d);return e},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}};\r\nTHREE.CubeTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};\r\nTHREE.CubeTextureLoader.prototype={constructor:THREE.CubeTextureLoader,load:function(a,b,c,d){function e(c){g.load(a[c],function(a){f.images[c]=a;h++;6===h&&(f.needsUpdate=!0,b&&b(f))},void 0,d)}var f=new THREE.CubeTexture,g=new THREE.ImageLoader(this.manager);g.setCrossOrigin(this.crossOrigin);g.setPath(this.path);var h=0;for(c=0;c<a.length;++c)e(c);return f},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}};\r\nTHREE.DataTextureLoader=THREE.BinaryTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this._parser=null};\r\nTHREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(a,b,c,d){var e=this,f=new THREE.DataTexture,g=new THREE.XHRLoader(this.manager);g.setResponseType(\"arraybuffer\");g.load(a,function(a){if(a=e._parser(a))void 0!==a.image?f.image=a.image:void 0!==a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:THREE.ClampToEdgeWrapping,f.wrapT=void 0!==a.wrapT?a.wrapT:THREE.ClampToEdgeWrapping,f.magFilter=void 0!==a.magFilter?\r\na.magFilter:THREE.LinearFilter,f.minFilter=void 0!==a.minFilter?a.minFilter:THREE.LinearMipMapLinearFilter,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}};THREE.CompressedTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this._parser=null};\r\nTHREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(a,b,c,d){function e(e){k.load(a[e],function(a){a=f._parser(a,!0);g[e]={width:a.width,height:a.height,format:a.format,mipmaps:a.mipmaps};l+=1;6===l&&(1===a.mipmapCount&&(h.minFilter=THREE.LinearFilter),h.format=a.format,h.needsUpdate=!0,b&&b(h))},c,d)}var f=this,g=[],h=new THREE.CompressedTexture;h.image=g;var k=new THREE.XHRLoader(this.manager);k.setPath(this.path);k.setResponseType(\"arraybuffer\");if(Array.isArray(a))for(var l=\r\n0,n=0,p=a.length;n<p;++n)e(n);else k.load(a,function(a){a=f._parser(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,d=0;d<c;d++){g[d]={mipmaps:[]};for(var e=0;e<a.mipmapCount;e++)g[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+e]),g[d].format=a.format,g[d].width=a.width,g[d].height=a.height}else h.image.width=a.width,h.image.height=a.height,h.mipmaps=a.mipmaps;1===a.mipmapCount&&(h.minFilter=THREE.LinearFilter);h.format=a.format;h.needsUpdate=!0;b&&b(h)},c,d);return h},setPath:function(a){this.path=\r\na}};\r\nTHREE.Material=function(){Object.defineProperty(this,\"id\",{value:THREE.MaterialIdCount++});this.uuid=THREE.Math.generateUUID();this.name=\"\";this.type=\"Material\";this.lights=this.fog=!0;this.blending=THREE.NormalBlending;this.side=THREE.FrontSide;this.shading=THREE.SmoothShading;this.vertexColors=THREE.NoColors;this.opacity=1;this.transparent=!1;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=\r\nnull;this.depthFunc=THREE.LessEqualDepth;this.depthWrite=this.depthTest=!0;this.clippingPlanes=null;this.clipShadows=!1;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.premultipliedAlpha=!1;this.overdraw=0;this._needsUpdate=this.visible=!0};\r\nTHREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn(\"THREE.Material: '\"+b+\"' parameter is undefined.\");else{var d=this[b];void 0===d?console.warn(\"THREE.\"+this.type+\": '\"+b+\"' is not a property of this material.\"):d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):\r\nthis[b]=\"overdraw\"===b?Number(c):c}}},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var c=void 0===a;c&&(a={textures:{},images:{}});var d={metadata:{version:4.4,type:\"Material\",generator:\"Material.toJSON\"}};d.uuid=this.uuid;d.type=this.type;\"\"!==this.name&&(d.name=this.name);this.color instanceof THREE.Color&&(d.color=this.color.getHex());.5!==this.roughness&&(d.roughness=this.roughness);.5!==this.metalness&&(d.metalness=this.metalness);this.emissive instanceof\r\nTHREE.Color&&(d.emissive=this.emissive.getHex());this.specular instanceof THREE.Color&&(d.specular=this.specular.getHex());void 0!==this.shininess&&(d.shininess=this.shininess);this.map instanceof THREE.Texture&&(d.map=this.map.toJSON(a).uuid);this.alphaMap instanceof THREE.Texture&&(d.alphaMap=this.alphaMap.toJSON(a).uuid);this.lightMap instanceof THREE.Texture&&(d.lightMap=this.lightMap.toJSON(a).uuid);this.bumpMap instanceof THREE.Texture&&(d.bumpMap=this.bumpMap.toJSON(a).uuid,d.bumpScale=this.bumpScale);\r\nthis.normalMap instanceof THREE.Texture&&(d.normalMap=this.normalMap.toJSON(a).uuid,d.normalScale=this.normalScale.toArray());this.displacementMap instanceof THREE.Texture&&(d.displacementMap=this.displacementMap.toJSON(a).uuid,d.displacementScale=this.displacementScale,d.displacementBias=this.displacementBias);this.roughnessMap instanceof THREE.Texture&&(d.roughnessMap=this.roughnessMap.toJSON(a).uuid);this.metalnessMap instanceof THREE.Texture&&(d.metalnessMap=this.metalnessMap.toJSON(a).uuid);\r\nthis.emissiveMap instanceof THREE.Texture&&(d.emissiveMap=this.emissiveMap.toJSON(a).uuid);this.specularMap instanceof THREE.Texture&&(d.specularMap=this.specularMap.toJSON(a).uuid);this.envMap instanceof THREE.Texture&&(d.envMap=this.envMap.toJSON(a).uuid,d.reflectivity=this.reflectivity);void 0!==this.size&&(d.size=this.size);void 0!==this.sizeAttenuation&&(d.sizeAttenuation=this.sizeAttenuation);this.blending!==THREE.NormalBlending&&(d.blending=this.blending);this.shading!==THREE.SmoothShading&&\r\n(d.shading=this.shading);this.side!==THREE.FrontSide&&(d.side=this.side);this.vertexColors!==THREE.NoColors&&(d.vertexColors=this.vertexColors);1>this.opacity&&(d.opacity=this.opacity);!0===this.transparent&&(d.transparent=this.transparent);0<this.alphaTest&&(d.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(d.wireframe=this.wireframe);1<this.wireframeLinewidth&&(d.wireframeLinewidth=this.wireframeLinewidth);c&&(c=b(a.textures),\r\na=b(a.images),0<c.length&&(d.textures=c),0<a.length&&(d.images=a));return d},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name;this.fog=a.fog;this.lights=a.lights;this.blending=a.blending;this.side=a.side;this.vertexColors=a.vertexColors;this.opacity=a.opacity;this.transparent=a.transparent;this.blendSrc=a.blendSrc;this.blendDst=a.blendDst;this.blendEquation=a.blendEquation;this.blendSrcAlpha=a.blendSrcAlpha;this.blendDstAlpha=a.blendDstAlpha;this.blendEquationAlpha=\r\na.blendEquationAlpha;this.depthFunc=a.depthFunc;this.depthTest=a.depthTest;this.depthWrite=a.depthWrite;this.colorWrite=a.colorWrite;this.precision=a.precision;this.polygonOffset=a.polygonOffset;this.polygonOffsetFactor=a.polygonOffsetFactor;this.polygonOffsetUnits=a.polygonOffsetUnits;this.alphaTest=a.alphaTest;this.premultipliedAlpha=a.premultipliedAlpha;this.overdraw=a.overdraw;this.visible=a.visible;this.clipShadows=a.clipShadows;a=a.clippingPlanes;var b=null;if(null!==a)for(var c=a.length,b=\r\nArray(c),d=0;d!==c;++d)b[d]=a[d].clone();this.clippingPlanes=b;return this},update:function(){this.dispatchEvent({type:\"update\"})},dispose:function(){this.dispatchEvent({type:\"dispose\"})}};Object.assign(THREE.Material.prototype,THREE.EventDispatcher.prototype);THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.type=\"LineBasicMaterial\";this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap=\"round\";this.lights=!1;this.setValues(a)};\r\nTHREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;THREE.LineBasicMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.linewidth=a.linewidth;this.linecap=a.linecap;this.linejoin=a.linejoin;return this};\r\nTHREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.type=\"LineDashedMaterial\";this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.lights=!1;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial;\r\nTHREE.LineDashedMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.linewidth=a.linewidth;this.scale=a.scale;this.dashSize=a.dashSize;this.gapSize=a.gapSize;return this};\r\nTHREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.type=\"MeshBasicMaterial\";this.color=new THREE.Color(16777215);this.aoMap=this.map=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\"round\";this.lights=this.morphTargets=this.skinning=!1;this.setValues(a)};\r\nTHREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;\r\nTHREE.MeshBasicMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;\r\nthis.skinning=a.skinning;this.morphTargets=a.morphTargets;return this};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.type=\"MeshDepthMaterial\";this.depthPacking=THREE.BasicDepthPacking;this.morphTargets=this.skinning=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);\r\nTHREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;THREE.MeshDepthMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.depthPacking=a.depthPacking;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};\r\nTHREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.type=\"MeshLambertMaterial\";this.color=new THREE.Color(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\r\n\"round\";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial;\r\nTHREE.MeshLambertMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=\r\na.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.type=\"MeshNormalMaterial\";this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=this.lights=this.fog=!1;this.setValues(a)};\r\nTHREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;THREE.MeshNormalMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};\r\nTHREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.type=\"MeshPhongMaterial\";this.color=new THREE.Color(16777215);this.specular=new THREE.Color(1118481);this.shininess=30;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=\r\n0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\"round\";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;\r\nTHREE.MeshPhongMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess=a.shininess;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);\r\nthis.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;\r\nthis.morphNormals=a.morphNormals;return this};\r\nTHREE.MeshStandardMaterial=function(a){THREE.Material.call(this);this.defines={STANDARD:\"\"};this.type=\"MeshStandardMaterial\";this.color=new THREE.Color(16777215);this.metalness=this.roughness=.5;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.displacementMap=null;this.displacementScale=\r\n1;this.displacementBias=0;this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=\"round\";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshStandardMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshStandardMaterial.prototype.constructor=THREE.MeshStandardMaterial;\r\nTHREE.MeshStandardMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.defines={STANDARD:\"\"};this.color.copy(a.color);this.roughness=a.roughness;this.metalness=a.metalness;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=\r\na.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.roughnessMap=a.roughnessMap;this.metalnessMap=a.metalnessMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.envMapIntensity=a.envMapIntensity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;\r\nthis.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};THREE.MeshPhysicalMaterial=function(a){THREE.MeshStandardMaterial.call(this);this.defines={PHYSICAL:\"\"};this.type=\"MeshPhysicalMaterial\";this.reflectivity=.5;this.setValues(a)};THREE.MeshPhysicalMaterial.prototype=Object.create(THREE.MeshStandardMaterial.prototype);THREE.MeshPhysicalMaterial.prototype.constructor=THREE.MeshPhysicalMaterial;\r\nTHREE.MeshPhysicalMaterial.prototype.copy=function(a){THREE.MeshStandardMaterial.prototype.copy.call(this,a);this.defines={PHYSICAL:\"\"};this.reflectivity=a.reflectivity;return this};THREE.MultiMaterial=function(a){this.uuid=THREE.Math.generateUUID();this.type=\"MultiMaterial\";this.materials=a instanceof Array?a:[];this.visible=!0};\r\nTHREE.MultiMaterial.prototype={constructor:THREE.MultiMaterial,toJSON:function(a){for(var b={metadata:{version:4.2,type:\"material\",generator:\"MaterialExporter\"},uuid:this.uuid,type:this.type,materials:[]},c=this.materials,d=0,e=c.length;d<e;d++){var f=c[d].toJSON(a);delete f.metadata;b.materials.push(f)}b.visible=this.visible;return b},clone:function(){for(var a=new this.constructor,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());a.visible=this.visible;return a}};\r\nTHREE.PointsMaterial=function(a){THREE.Material.call(this);this.type=\"PointsMaterial\";this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.lights=!1;this.setValues(a)};THREE.PointsMaterial.prototype=Object.create(THREE.Material.prototype);THREE.PointsMaterial.prototype.constructor=THREE.PointsMaterial;\r\nTHREE.PointsMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.size=a.size;this.sizeAttenuation=a.sizeAttenuation;return this};\r\nTHREE.ShaderMaterial=function(a){THREE.Material.call(this);this.type=\"ShaderMaterial\";this.defines={};this.uniforms={};this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,\r\ndrawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;void 0!==a&&(void 0!==a.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(a))};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;\r\nTHREE.ShaderMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.fragmentShader=a.fragmentShader;this.vertexShader=a.vertexShader;this.uniforms=THREE.UniformsUtils.clone(a.uniforms);this.defines=a.defines;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.lights=a.lights;this.clipping=a.clipping;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;this.extensions=a.extensions;return this};\r\nTHREE.ShaderMaterial.prototype.toJSON=function(a){a=THREE.Material.prototype.toJSON.call(this,a);a.uniforms=this.uniforms;a.vertexShader=this.vertexShader;a.fragmentShader=this.fragmentShader;return a};THREE.RawShaderMaterial=function(a){THREE.ShaderMaterial.call(this,a);this.type=\"RawShaderMaterial\"};THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial;\r\nTHREE.SpriteMaterial=function(a){THREE.Material.call(this);this.type=\"SpriteMaterial\";this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.lights=this.fog=!1;this.setValues(a)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial;THREE.SpriteMaterial.prototype.copy=function(a){THREE.Material.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.rotation=a.rotation;return this};\r\nTHREE.ShadowMaterial=function(){THREE.ShaderMaterial.call(this,{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:THREE.ShaderChunk.shadow_vert,fragmentShader:THREE.ShaderChunk.shadow_frag});this.transparent=this.lights=!0;Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(a){this.uniforms.opacity.value=a}}})};THREE.ShadowMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);\r\nTHREE.ShadowMaterial.prototype.constructor=THREE.ShadowMaterial;\r\nTHREE.Texture=function(a,b,c,d,e,f,g,h,k,l){Object.defineProperty(this,\"id\",{value:THREE.TextureIdCount++});this.uuid=THREE.Math.generateUUID();this.sourceFile=this.name=\"\";this.image=void 0!==a?a:THREE.Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:THREE.Texture.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;\r\nthis.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==l?l:THREE.LinearEncoding;this.version=0;this.onUpdate=null};THREE.Texture.DEFAULT_IMAGE=void 0;THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping;\r\nTHREE.Texture.prototype={constructor:THREE.Texture,set needsUpdate(a){!0===a&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.image=a.image;this.mipmaps=a.mipmaps.slice(0);this.mapping=a.mapping;this.wrapS=a.wrapS;this.wrapT=a.wrapT;this.magFilter=a.magFilter;this.minFilter=a.minFilter;this.anisotropy=a.anisotropy;this.format=a.format;this.type=a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.generateMipmaps=a.generateMipmaps;this.premultiplyAlpha=\r\na.premultiplyAlpha;this.flipY=a.flipY;this.unpackAlignment=a.unpackAlignment;this.encoding=a.encoding;return this},toJSON:function(a){if(void 0!==a.textures[this.uuid])return a.textures[this.uuid];var b={metadata:{version:4.4,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy};\r\nif(void 0!==this.image){var c=this.image;void 0===c.uuid&&(c.uuid=THREE.Math.generateUUID());if(void 0===a.images[c.uuid]){var d=a.images,e=c.uuid,f=c.uuid,g;void 0!==c.toDataURL?g=c:(g=document.createElement(\"canvas\"),g.width=c.width,g.height=c.height,g.getContext(\"2d\").drawImage(c,0,0,c.width,c.height));g=2048<g.width||2048<g.height?g.toDataURL(\"image/jpeg\",.6):g.toDataURL(\"image/png\");d[e]={uuid:f,url:g}}b.image=c.uuid}return a.textures[this.uuid]=b},dispose:function(){this.dispatchEvent({type:\"dispose\"})},\r\ntransformUv:function(a){if(this.mapping===THREE.UVMapping){a.multiply(this.repeat);a.add(this.offset);if(0>a.x||1<a.x)switch(this.wrapS){case THREE.RepeatWrapping:a.x-=Math.floor(a.x);break;case THREE.ClampToEdgeWrapping:a.x=0>a.x?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(a.x)%2)?a.x=Math.ceil(a.x)-a.x:a.x-=Math.floor(a.x)}if(0>a.y||1<a.y)switch(this.wrapT){case THREE.RepeatWrapping:a.y-=Math.floor(a.y);break;case THREE.ClampToEdgeWrapping:a.y=0>a.y?0:1;break;case THREE.MirroredRepeatWrapping:1===\r\nMath.abs(Math.floor(a.y)%2)?a.y=Math.ceil(a.y)-a.y:a.y-=Math.floor(a.y)}this.flipY&&(a.y=1-a.y)}}};Object.assign(THREE.Texture.prototype,THREE.EventDispatcher.prototype);THREE.TextureIdCount=0;\r\nTHREE.DepthTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,null,d,e,f,g,h,THREE.DepthFormat,c,k);this.image={width:a,height:b};this.type=void 0!==c?c:THREE.UnsignedShortType;this.magFilter=void 0!==g?g:THREE.NearestFilter;this.minFilter=void 0!==h?h:THREE.NearestFilter;this.generateMipmaps=this.flipY=!1};THREE.DepthTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DepthTexture.prototype.constructor=THREE.DepthTexture;\r\nTHREE.CanvasTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.needsUpdate=!0};THREE.CanvasTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CanvasTexture.prototype.constructor=THREE.CanvasTexture;THREE.CubeTexture=function(a,b,c,d,e,f,g,h,k,l){a=void 0!==a?a:[];b=void 0!==b?b:THREE.CubeReflectionMapping;THREE.Texture.call(this,a,b,c,d,e,f,g,h,k,l);this.flipY=!1};THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype);\r\nTHREE.CubeTexture.prototype.constructor=THREE.CubeTexture;Object.defineProperty(THREE.CubeTexture.prototype,\"images\",{get:function(){return this.image},set:function(a){this.image=a}});THREE.CompressedTexture=function(a,b,c,d,e,f,g,h,k,l,n,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,n,p);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture;\r\nTHREE.DataTexture=function(a,b,c,d,e,f,g,h,k,l,n,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,n,p);this.image={data:a,width:b,height:c};this.magFilter=void 0!==k?k:THREE.NearestFilter;this.minFilter=void 0!==l?l:THREE.NearestFilter;this.generateMipmaps=this.flipY=!1};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor=THREE.DataTexture;\r\nTHREE.VideoTexture=function(a,b,c,d,e,f,g,h,k){function l(){requestAnimationFrame(l);a.readyState>=a.HAVE_CURRENT_DATA&&(n.needsUpdate=!0)}THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.generateMipmaps=!1;var n=this;l()};THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor=THREE.VideoTexture;THREE.Group=function(){THREE.Object3D.call(this);this.type=\"Group\"};THREE.Group.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Group});\r\nTHREE.Points=function(a,b){THREE.Object3D.call(this);this.type=\"Points\";this.geometry=void 0!==a?a:new THREE.BufferGeometry;this.material=void 0!==b?b:new THREE.PointsMaterial({color:16777215*Math.random()})};\r\nTHREE.Points.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Points,raycast:function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){function f(a,c){var f=b.distanceSqToPoint(a);if(f<n){var h=b.closestPointToPoint(a);h.applyMatrix4(k);var m=d.ray.origin.distanceTo(h);m<d.near||m>d.far||e.push({distance:m,distanceToRay:Math.sqrt(f),point:h.clone(),index:c,face:null,object:g})}}var g=this,h=this.geometry,k=this.matrixWorld,l=d.params.Points.threshold;\r\nnull===h.boundingSphere&&h.computeBoundingSphere();c.copy(h.boundingSphere);c.applyMatrix4(k);if(!1!==d.ray.intersectsSphere(c)){a.getInverse(k);b.copy(d.ray).applyMatrix4(a);var l=l/((this.scale.x+this.scale.y+this.scale.z)/3),n=l*l,l=new THREE.Vector3;if(h instanceof THREE.BufferGeometry){var p=h.index,h=h.attributes.position.array;if(null!==p)for(var m=p.array,p=0,q=m.length;p<q;p++){var r=m[p];l.fromArray(h,3*r);f(l,r)}else for(p=0,m=h.length/3;p<m;p++)l.fromArray(h,3*p),f(l,p)}else for(l=h.vertices,\r\np=0,m=l.length;p<m;p++)f(l[p],p)}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.Line=function(a,b,c){if(1===c)return console.warn(\"THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.\"),new THREE.LineSegments(a,b);THREE.Object3D.call(this);this.type=\"Line\";this.geometry=void 0!==a?a:new THREE.BufferGeometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()})};\r\nTHREE.Line.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Line,raycast:function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry,h=this.matrixWorld;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(h);if(!1!==d.ray.intersectsSphere(c)){a.getInverse(h);b.copy(d.ray).applyMatrix4(a);var k=new THREE.Vector3,l=new THREE.Vector3,h=new THREE.Vector3,n=\r\nnew THREE.Vector3,p=this instanceof THREE.LineSegments?2:1;if(g instanceof THREE.BufferGeometry){var m=g.index,q=g.attributes.position.array;if(null!==m)for(var m=m.array,g=0,r=m.length-1;g<r;g+=p){var s=m[g+1];k.fromArray(q,3*m[g]);l.fromArray(q,3*s);s=b.distanceSqToSegment(k,l,n,h);s>f||(n.applyMatrix4(this.matrixWorld),s=d.ray.origin.distanceTo(n),s<d.near||s>d.far||e.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else for(g=0,r=\r\nq.length/3-1;g<r;g+=p)k.fromArray(q,3*g),l.fromArray(q,3*g+3),s=b.distanceSqToSegment(k,l,n,h),s>f||(n.applyMatrix4(this.matrixWorld),s=d.ray.origin.distanceTo(n),s<d.near||s>d.far||e.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else if(g instanceof THREE.Geometry)for(k=g.vertices,l=k.length,g=0;g<l-1;g+=p)s=b.distanceSqToSegment(k[g],k[g+1],n,h),s>f||(n.applyMatrix4(this.matrixWorld),s=d.ray.origin.distanceTo(n),s<d.near||s>d.far||\r\ne.push({distance:s,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.LineSegments=function(a,b){THREE.Line.call(this,a,b);this.type=\"LineSegments\"};THREE.LineSegments.prototype=Object.assign(Object.create(THREE.Line.prototype),{constructor:THREE.LineSegments});\r\nTHREE.Mesh=function(a,b){THREE.Object3D.call(this);this.type=\"Mesh\";this.geometry=void 0!==a?a:new THREE.BufferGeometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.drawMode=THREE.TrianglesDrawMode;this.updateMorphTargets()};\r\nTHREE.Mesh.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Mesh,setDrawMode:function(a){this.drawMode=a},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}},getMorphTargetIndexByName:function(a){if(void 0!==\r\nthis.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.warn(\"THREE.Mesh.getMorphTargetIndexByName: morph target \"+a+\" does not exist. Returning 0.\");return 0},raycast:function(){function a(a,b,c,d,e,g,f){THREE.Triangle.barycoordFromPoint(a,b,c,d,s);e.multiplyScalar(s.x);g.multiplyScalar(s.y);f.multiplyScalar(s.z);e.add(g).add(f);return e.clone()}function b(a,b,c,d,e,g,f){var h=a.material;if(null===(h.side===THREE.BackSide?c.intersectTriangle(g,e,d,!0,f):c.intersectTriangle(d,e,\r\ng,h.side!==THREE.DoubleSide,f)))return null;x.copy(f);x.applyMatrix4(a.matrixWorld);c=b.ray.origin.distanceTo(x);return c<b.near||c>b.far?null:{distance:c,point:x.clone(),object:a}}function c(c,d,e,f,l,p,n,s){g.fromArray(f,3*p);h.fromArray(f,3*n);k.fromArray(f,3*s);if(c=b(c,d,e,g,h,k,u))l&&(m.fromArray(l,2*p),q.fromArray(l,2*n),r.fromArray(l,2*s),c.uv=a(u,g,h,k,m,q,r)),c.face=new THREE.Face3(p,n,s,THREE.Triangle.normal(g,h,k)),c.faceIndex=p;return c}var d=new THREE.Matrix4,e=new THREE.Ray,f=new THREE.Sphere,\r\ng=new THREE.Vector3,h=new THREE.Vector3,k=new THREE.Vector3,l=new THREE.Vector3,n=new THREE.Vector3,p=new THREE.Vector3,m=new THREE.Vector2,q=new THREE.Vector2,r=new THREE.Vector2,s=new THREE.Vector3,u=new THREE.Vector3,x=new THREE.Vector3;return function(s,x){var w=this.geometry,D=this.material,A=this.matrixWorld;if(void 0!==D&&(null===w.boundingSphere&&w.computeBoundingSphere(),f.copy(w.boundingSphere),f.applyMatrix4(A),!1!==s.ray.intersectsSphere(f)&&(d.getInverse(A),e.copy(s.ray).applyMatrix4(d),\r\nnull===w.boundingBox||!1!==e.intersectsBox(w.boundingBox)))){var y,B;if(w instanceof THREE.BufferGeometry){var G,z,D=w.index,A=w.attributes,w=A.position.array;void 0!==A.uv&&(y=A.uv.array);if(null!==D)for(var A=D.array,H=0,M=A.length;H<M;H+=3){if(D=A[H],G=A[H+1],z=A[H+2],B=c(this,s,e,w,y,D,G,z))B.faceIndex=Math.floor(H/3),x.push(B)}else for(H=0,M=w.length;H<M;H+=9)if(D=H/3,G=D+1,z=D+2,B=c(this,s,e,w,y,D,G,z))B.index=D,x.push(B)}else if(w instanceof THREE.Geometry){var O,N,A=D instanceof THREE.MultiMaterial,\r\nH=!0===A?D.materials:null,M=w.vertices;G=w.faces;z=w.faceVertexUvs[0];0<z.length&&(y=z);for(var E=0,K=G.length;E<K;E++){var I=G[E];B=!0===A?H[I.materialIndex]:D;if(void 0!==B){z=M[I.a];O=M[I.b];N=M[I.c];if(!0===B.morphTargets){B=w.morphTargets;var L=this.morphTargetInfluences;g.set(0,0,0);h.set(0,0,0);k.set(0,0,0);for(var P=0,Q=B.length;P<Q;P++){var R=L[P];if(0!==R){var F=B[P].vertices;g.addScaledVector(l.subVectors(F[I.a],z),R);h.addScaledVector(n.subVectors(F[I.b],O),R);k.addScaledVector(p.subVectors(F[I.c],\r\nN),R)}}g.add(z);h.add(O);k.add(N);z=g;O=h;N=k}if(B=b(this,s,e,z,O,N,u))y&&(L=y[E],m.copy(L[0]),q.copy(L[1]),r.copy(L[2]),B.uv=a(u,z,O,N,m,q,r)),B.face=I,B.faceIndex=E,x.push(B)}}}}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.Bone=function(a){THREE.Object3D.call(this);this.type=\"Bone\";this.skin=a};\r\nTHREE.Bone.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Bone,copy:function(a){THREE.Object3D.prototype.copy.call(this,a);this.skin=a.skin;return this}});\r\nTHREE.Skeleton=function(a,b,c){this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;a=a||[];this.bones=a.slice(0);this.useVertexTexture?(a=Math.sqrt(4*this.bones.length),a=THREE.Math.nextPowerOfTwo(Math.ceil(a)),this.boneTextureHeight=this.boneTextureWidth=a=Math.max(a,4),this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType)):\r\nthis.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(console.warn(\"THREE.Skeleton bonInverses is the wrong length.\"),this.boneInverses=[],b=0,a=this.bones.length;b<a;b++)this.boneInverses.push(new THREE.Matrix4)};\r\nObject.assign(THREE.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new THREE.Matrix4;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}},pose:function(){for(var a,b=0,c=this.bones.length;b<c;b++)(a=this.bones[b])&&a.matrixWorld.getInverse(this.boneInverses[b]);b=0;for(c=this.bones.length;b<c;b++)if(a=this.bones[b])a.parent?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):\r\na.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)},update:function(){var a=new THREE.Matrix4;return function(){for(var b=0,c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix,this.boneInverses[b]),a.toArray(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new THREE.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}});\r\nTHREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.type=\"SkinnedMesh\";this.bindMode=\"attached\";this.bindMatrix=new THREE.Matrix4;this.bindMatrixInverse=new THREE.Matrix4;a=[];if(this.geometry&&void 0!==this.geometry.bones){for(var d,e=0,f=this.geometry.bones.length;e<f;++e)d=this.geometry.bones[e],b=new THREE.Bone(this),a.push(b),b.name=d.name,b.position.fromArray(d.pos),b.quaternion.fromArray(d.rotq),void 0!==d.scl&&b.scale.fromArray(d.scl);e=0;for(f=this.geometry.bones.length;e<f;++e)d=\r\nthis.geometry.bones[e],-1!==d.parent&&null!==d.parent&&void 0!==a[d.parent]?a[d.parent].add(a[e]):this.add(a[e])}this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a,void 0,c),this.matrixWorld)};\r\nTHREE.SkinnedMesh.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:THREE.SkinnedMesh,bind:function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinWeights.length;a++){var b=this.geometry.skinWeights[a],c=\r\n1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0)}else if(this.geometry instanceof THREE.BufferGeometry)for(var b=new THREE.Vector4,d=this.geometry.attributes.skinWeight,a=0;a<d.count;a++)b.x=d.getX(a),b.y=d.getY(a),b.z=d.getZ(a),b.w=d.getW(a),c=1/b.lengthManhattan(),Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0),d.setXYZW(a,b.x,b.y,b.z,b.w)},updateMatrixWorld:function(a){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0);\"attached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):\r\n\"detached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn(\"THREE.SkinnedMesh unrecognized bindMode: \"+this.bindMode)},clone:function(){return(new this.constructor(this.geometry,this.material,this.useVertexTexture)).copy(this)}});THREE.LOD=function(){THREE.Object3D.call(this);this.type=\"LOD\";Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})};\r\nTHREE.LOD.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LOD,copy:function(a){THREE.Object3D.prototype.copy.call(this,a,!1);a=a.levels;for(var b=0,c=a.length;b<c;b++){var d=a[b];this.addLevel(d.object.clone(),d.distance)}return this},addLevel:function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=this.levels,d=0;d<c.length&&!(b<c[d].distance);d++);c.splice(d,0,{distance:b,object:a});this.add(a)},getObjectForDistance:function(a){for(var b=this.levels,c=1,d=b.length;c<\r\nd&&!(a<b[c].distance);c++);return b[c-1].object},raycast:function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}(),update:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){var d=this.levels;if(1<d.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);d[0].object.visible=!0;for(var e=1,f=d.length;e<f;e++)if(c>=\r\nd[e].distance)d[e-1].object.visible=!1,d[e].object.visible=!0;else break;for(;e<f;e++)d[e].object.visible=!1}}}(),toJSON:function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.levels=[];for(var b=this.levels,c=0,d=b.length;c<d;c++){var e=b[c];a.object.levels.push({object:e.object.uuid,distance:e.distance})}return a}});THREE.Sprite=function(a){THREE.Object3D.call(this);this.type=\"Sprite\";this.material=void 0!==a?a:new THREE.SpriteMaterial};\r\nTHREE.Sprite.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Sprite,raycast:function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.distanceSqToPoint(a);d>this.scale.x*this.scale.y/4||c.push({distance:Math.sqrt(d),point:this.position,face:null,object:this})}}(),clone:function(){return(new this.constructor(this.material)).copy(this)}});\r\nTHREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};\r\nTHREE.LensFlare.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LensFlare,copy:function(a){THREE.Object3D.prototype.copy.call(this,a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback=a.customUpdateCallback;for(var b=0,c=a.lensFlares.length;b<c;b++)this.lensFlares.push(a.lensFlares[b]);return this},add:function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);\r\nc=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:0,opacity:f,color:e,blending:d})},updateLensFlares:function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)}});\r\nTHREE.Scene=function(){THREE.Object3D.call(this);this.type=\"Scene\";this.overrideMaterial=this.fog=null;this.autoUpdate=!0};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);THREE.Scene.prototype.constructor=THREE.Scene;\r\nTHREE.Scene.prototype.copy=function(a,b){THREE.Object3D.prototype.copy.call(this,a,b);null!==a.fog&&(this.fog=a.fog.clone());null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone());this.autoUpdate=a.autoUpdate;this.matrixAutoUpdate=a.matrixAutoUpdate;return this};THREE.Fog=function(a,b,c){this.name=\"\";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};\r\nTHREE.FogExp2=function(a,b){this.name=\"\";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={};THREE.ShaderChunk.alphamap_fragment=\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";THREE.ShaderChunk.alphamap_pars_fragment=\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";THREE.ShaderChunk.alphatest_fragment=\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\nTHREE.ShaderChunk.aomap_fragment=\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.aomap_pars_fragment=\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\r\nTHREE.ShaderChunk.begin_vertex=\"\\nvec3 transformed = vec3( position );\\n\";THREE.ShaderChunk.beginnormal_vertex=\"\\nvec3 objectNormal = vec3( normal );\\n\";THREE.ShaderChunk.bsdfs=\"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\nTHREE.ShaderChunk.bumpmap_pars_fragment=\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\r\nTHREE.ShaderChunk.clipping_planes_fragment=\"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";THREE.ShaderChunk.clipping_planes_pars_fragment=\"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\r\nTHREE.ShaderChunk.clipping_planes_pars_vertex=\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";THREE.ShaderChunk.clipping_planes_vertex=\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";THREE.ShaderChunk.color_fragment=\"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";THREE.ShaderChunk.color_pars_fragment=\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\r\nTHREE.ShaderChunk.color_pars_vertex=\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";THREE.ShaderChunk.color_vertex=\"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";THREE.ShaderChunk.common=\"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\r\nTHREE.ShaderChunk.cube_uv_reflection_fragment=\"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\nTHREE.ShaderChunk.defaultnormal_vertex=\"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";THREE.ShaderChunk.displacementmap_vertex=\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";THREE.ShaderChunk.displacementmap_pars_vertex=\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\r\nTHREE.ShaderChunk.emissivemap_fragment=\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";THREE.ShaderChunk.emissivemap_pars_fragment=\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";THREE.ShaderChunk.encodings_pars_fragment=\"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\nTHREE.ShaderChunk.encodings_fragment=\"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";THREE.ShaderChunk.envmap_fragment=\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#else\\n\\t\\tfloat flipNormal = 1.0;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.envmap_pars_fragment=\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.envmap_pars_vertex=\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.envmap_vertex=\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.fog_fragment=\"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\nTHREE.ShaderChunk.fog_pars_fragment=\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";THREE.ShaderChunk.lightmap_fragment=\"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";THREE.ShaderChunk.lightmap_pars_fragment=\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\r\nTHREE.ShaderChunk.lights_lambert_vertex=\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\nTHREE.ShaderChunk.lights_pars=\"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#else\\n\\t\\t\\tfloat flipNormal = 1.0;\\n\\t\\t#endif\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#else\\n\\t\\t\\tfloat flipNormal = 1.0;\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\r\nTHREE.ShaderChunk.lights_phong_fragment=\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";THREE.ShaderChunk.lights_phong_pars_fragment=\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\r\nTHREE.ShaderChunk.lights_physical_fragment=\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n\";THREE.ShaderChunk.lights_physical_pars_fragment=\"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t#endif\\n};\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\nTHREE.ShaderChunk.lights_template=\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\nTHREE.ShaderChunk.logdepthbuf_fragment=\"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";THREE.ShaderChunk.logdepthbuf_pars_fragment=\"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.logdepthbuf_pars_vertex=\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\r\nTHREE.ShaderChunk.logdepthbuf_vertex=\"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";THREE.ShaderChunk.map_fragment=\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\nTHREE.ShaderChunk.map_pars_fragment=\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";THREE.ShaderChunk.map_particle_fragment=\"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";THREE.ShaderChunk.map_particle_pars_fragment=\"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";THREE.ShaderChunk.metalnessmap_fragment=\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\r\nTHREE.ShaderChunk.metalnessmap_pars_fragment=\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";THREE.ShaderChunk.morphnormal_vertex=\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\nTHREE.ShaderChunk.morphtarget_pars_vertex=\"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";THREE.ShaderChunk.morphtarget_vertex=\"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.normal_fragment=\"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\nTHREE.ShaderChunk.normalmap_pars_fragment=\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\r\nTHREE.ShaderChunk.packing=\"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\r\nTHREE.ShaderChunk.premultiplied_alpha_fragment=\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";THREE.ShaderChunk.project_vertex=\"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";THREE.ShaderChunk.roughnessmap_fragment=\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\r\nTHREE.ShaderChunk.roughnessmap_pars_fragment=\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";THREE.ShaderChunk.shadowmap_pars_fragment=\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\nTHREE.ShaderChunk.shadowmap_pars_vertex=\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.shadowmap_vertex=\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.shadowmask_pars_fragment=\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\r\nTHREE.ShaderChunk.skinbase_vertex=\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";THREE.ShaderChunk.skinning_pars_vertex=\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\r\nTHREE.ShaderChunk.skinning_vertex=\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";THREE.ShaderChunk.skinnormal_vertex=\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\nTHREE.ShaderChunk.specularmap_fragment=\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";THREE.ShaderChunk.specularmap_pars_fragment=\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";THREE.ShaderChunk.tonemapping_fragment=\"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\nTHREE.ShaderChunk.tonemapping_pars_fragment=\"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\nTHREE.ShaderChunk.uv2_pars_fragment=\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";THREE.ShaderChunk.uv2_pars_vertex=\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";THREE.ShaderChunk.uv2_vertex=\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";THREE.ShaderChunk.uv_pars_fragment=\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\r\nTHREE.ShaderChunk.uv_pars_vertex=\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";THREE.ShaderChunk.uv_vertex=\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\r\nTHREE.ShaderChunk.worldpos_vertex=\"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\r\nTHREE.UniformsUtils={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;for(e in d)b[e]=d[e]}return b},clone:function(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];e instanceof THREE.Color||e instanceof THREE.Vector2||e instanceof THREE.Vector3||e instanceof THREE.Vector4||e instanceof THREE.Matrix3||e instanceof THREE.Matrix4||e instanceof THREE.Texture?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}}return b}};\r\nTHREE.UniformsLib={common:{diffuse:{type:\"c\",value:new THREE.Color(15658734)},opacity:{type:\"1f\",value:1},map:{type:\"t\",value:null},offsetRepeat:{type:\"v4\",value:new THREE.Vector4(0,0,1,1)},specularMap:{type:\"t\",value:null},alphaMap:{type:\"t\",value:null},envMap:{type:\"t\",value:null},flipEnvMap:{type:\"1f\",value:-1},reflectivity:{type:\"1f\",value:1},refractionRatio:{type:\"1f\",value:.98}},aomap:{aoMap:{type:\"t\",value:null},aoMapIntensity:{type:\"1f\",value:1}},lightmap:{lightMap:{type:\"t\",value:null},lightMapIntensity:{type:\"1f\",\r\nvalue:1}},emissivemap:{emissiveMap:{type:\"t\",value:null}},bumpmap:{bumpMap:{type:\"t\",value:null},bumpScale:{type:\"1f\",value:1}},normalmap:{normalMap:{type:\"t\",value:null},normalScale:{type:\"v2\",value:new THREE.Vector2(1,1)}},displacementmap:{displacementMap:{type:\"t\",value:null},displacementScale:{type:\"1f\",value:1},displacementBias:{type:\"1f\",value:0}},roughnessmap:{roughnessMap:{type:\"t\",value:null}},metalnessmap:{metalnessMap:{type:\"t\",value:null}},fog:{fogDensity:{type:\"1f\",value:2.5E-4},fogNear:{type:\"1f\",\r\nvalue:1},fogFar:{type:\"1f\",value:2E3},fogColor:{type:\"c\",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:\"3fv\",value:[]},directionalLights:{type:\"sa\",value:[],properties:{direction:{type:\"v3\"},color:{type:\"c\"},shadow:{type:\"1i\"},shadowBias:{type:\"1f\"},shadowRadius:{type:\"1f\"},shadowMapSize:{type:\"v2\"}}},directionalShadowMap:{type:\"tv\",value:[]},directionalShadowMatrix:{type:\"m4v\",value:[]},spotLights:{type:\"sa\",value:[],properties:{color:{type:\"c\"},position:{type:\"v3\"},direction:{type:\"v3\"},\r\ndistance:{type:\"1f\"},coneCos:{type:\"1f\"},penumbraCos:{type:\"1f\"},decay:{type:\"1f\"},shadow:{type:\"1i\"},shadowBias:{type:\"1f\"},shadowRadius:{type:\"1f\"},shadowMapSize:{type:\"v2\"}}},spotShadowMap:{type:\"tv\",value:[]},spotShadowMatrix:{type:\"m4v\",value:[]},pointLights:{type:\"sa\",value:[],properties:{color:{type:\"c\"},position:{type:\"v3\"},decay:{type:\"1f\"},distance:{type:\"1f\"},shadow:{type:\"1i\"},shadowBias:{type:\"1f\"},shadowRadius:{type:\"1f\"},shadowMapSize:{type:\"v2\"}}},pointShadowMap:{type:\"tv\",value:[]},\r\npointShadowMatrix:{type:\"m4v\",value:[]},hemisphereLights:{type:\"sa\",value:[],properties:{direction:{type:\"v3\"},skyColor:{type:\"c\"},groundColor:{type:\"c\"}}}},points:{diffuse:{type:\"c\",value:new THREE.Color(15658734)},opacity:{type:\"1f\",value:1},size:{type:\"1f\",value:1},scale:{type:\"1f\",value:1},map:{type:\"t\",value:null},offsetRepeat:{type:\"v4\",value:new THREE.Vector4(0,0,1,1)}}};THREE.ShaderChunk.cube_frag=\"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.cube_vert=\"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";THREE.ShaderChunk.depth_frag=\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\r\nTHREE.ShaderChunk.depth_vert=\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.distanceRGBA_frag=\"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";THREE.ShaderChunk.distanceRGBA_vert=\"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\r\nTHREE.ShaderChunk.equirect_frag=\"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.equirect_vert=\"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";THREE.ShaderChunk.linedashed_frag=\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.linedashed_vert=\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.meshbasic_frag=\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.meshbasic_vert=\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.meshlambert_frag=\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.meshlambert_vert=\"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.meshphong_frag=\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.meshphong_vert=\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.meshphysical_frag=\"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.meshphysical_vert=\"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.normal_frag=\"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";THREE.ShaderChunk.normal_vert=\"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.points_frag=\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\nTHREE.ShaderChunk.points_vert=\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\nTHREE.ShaderChunk.shadow_frag=\"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";THREE.ShaderChunk.shadow_vert=\"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\r\nTHREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.meshbasic_vert,fragmentShader:THREE.ShaderChunk.meshbasic_frag},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:\"c\",value:new THREE.Color(0)}}]),vertexShader:THREE.ShaderChunk.meshlambert_vert,\r\nfragmentShader:THREE.ShaderChunk.meshlambert_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:\"c\",value:new THREE.Color(0)},specular:{type:\"c\",value:new THREE.Color(1118481)},shininess:{type:\"1f\",value:30}}]),vertexShader:THREE.ShaderChunk.meshphong_vert,\r\nfragmentShader:THREE.ShaderChunk.meshphong_frag},standard:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.roughnessmap,THREE.UniformsLib.metalnessmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:\"c\",value:new THREE.Color(0)},roughness:{type:\"1f\",value:.5},metalness:{type:\"1f\",value:0},\r\nenvMapIntensity:{type:\"1f\",value:1}}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.points_vert,fragmentShader:THREE.ShaderChunk.points_frag},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:\"1f\",value:1},dashSize:{type:\"1f\",value:1},totalSize:{type:\"1f\",value:2}}]),\r\nvertexShader:THREE.ShaderChunk.linedashed_vert,fragmentShader:THREE.ShaderChunk.linedashed_frag},depth:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.displacementmap]),vertexShader:THREE.ShaderChunk.depth_vert,fragmentShader:THREE.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{type:\"1f\",value:1}},vertexShader:THREE.ShaderChunk.normal_vert,fragmentShader:THREE.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{type:\"t\",value:null},tFlip:{type:\"1f\",value:-1}},vertexShader:THREE.ShaderChunk.cube_vert,\r\nfragmentShader:THREE.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{type:\"t\",value:null},tFlip:{type:\"1f\",value:-1}},vertexShader:THREE.ShaderChunk.equirect_vert,fragmentShader:THREE.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{type:\"v3\",value:new THREE.Vector3}},vertexShader:THREE.ShaderChunk.distanceRGBA_vert,fragmentShader:THREE.ShaderChunk.distanceRGBA_frag}};\r\nTHREE.ShaderLib.physical={uniforms:THREE.UniformsUtils.merge([THREE.ShaderLib.standard.uniforms,{}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag};\r\nTHREE.WebGLRenderer=function(a){function b(a,b,c,d){!0===K&&(a*=d,b*=d,c*=d);J.clearColor(a,b,c,d)}function c(){J.init();J.scissor(ra.copy(ya).multiplyScalar($));J.viewport(ma.copy(na).multiplyScalar($));b(aa.r,aa.g,aa.b,ia)}function d(){ea=fa=null;oa=\"\";Z=-1;J.reset()}function e(a){a.preventDefault();d();c();T.clear()}function f(a){a=a.target;a.removeEventListener(\"dispose\",f);a:{var b=T.get(a);if(a.image&&b.__image__webglTextureCube)t.deleteTexture(b.__image__webglTextureCube);else{if(void 0===\r\nb.__webglInit)break a;t.deleteTexture(b.__webglTexture)}T.delete(a)}ja.textures--}function g(a){a=a.target;a.removeEventListener(\"dispose\",g);var b=T.get(a),c=T.get(a.texture);if(a){void 0!==c.__webglTexture&&t.deleteTexture(c.__webglTexture);a.depthTexture&&a.depthTexture.dispose();if(a instanceof THREE.WebGLRenderTargetCube)for(c=0;6>c;c++)t.deleteFramebuffer(b.__webglFramebuffer[c]),b.__webglDepthbuffer&&t.deleteRenderbuffer(b.__webglDepthbuffer[c]);else t.deleteFramebuffer(b.__webglFramebuffer),\r\nb.__webglDepthbuffer&&t.deleteRenderbuffer(b.__webglDepthbuffer);T.delete(a.texture);T.delete(a)}ja.textures--}function h(a){a=a.target;a.removeEventListener(\"dispose\",h);k(a);T.delete(a)}function k(a){var b=T.get(a).program;a.program=void 0;void 0!==b&&pa.releaseProgram(b)}function l(a,b){return Math.abs(b[0])-Math.abs(a[0])}function n(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==\r\nb.z?a.z-b.z:a.id-b.id}function p(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function m(a,b,c,d,e){var g;c.transparent?(d=R,g=++F):(d=P,g=++Q);g=d[g];void 0!==g?(g.id=a.id,g.object=a,g.geometry=b,g.material=c,g.z=X.z,g.group=e):(g={id:a.id,object:a,geometry:b,material:c,z:X.z,group:e},d.push(g))}function q(a){if(!Ba.intersectsSphere(a))return!1;var b=ba.numPlanes;if(0===b)return!0;var c=W.clippingPlanes,d=a.center;a=\r\n-a.radius;var e=0;do if(c[e].distanceToPoint(d)<a)return!1;while(++e!==b);return!0}function r(a,b){if(!1!==a.visible){if(a.layers.test(b.layers))if(a instanceof THREE.Light)L.push(a);else if(a instanceof THREE.Sprite){var c;(c=!1===a.frustumCulled)||(ka.center.set(0,0,0),ka.radius=.7071067811865476,ka.applyMatrix4(a.matrixWorld),c=!0===q(ka));c&&U.push(a)}else if(a instanceof THREE.LensFlare)Y.push(a);else if(a instanceof THREE.ImmediateRenderObject)!0===W.sortObjects&&(X.setFromMatrixPosition(a.matrixWorld),\r\nX.applyProjection(sa)),m(a,null,a.material,X.z,null);else if(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof THREE.Points)if(a instanceof THREE.SkinnedMesh&&a.skeleton.update(),(c=!1===a.frustumCulled)||(c=a.geometry,null===c.boundingSphere&&c.computeBoundingSphere(),ka.copy(c.boundingSphere).applyMatrix4(a.matrixWorld),c=!0===q(ka)),c){var d=a.material;if(!0===d.visible)if(!0===W.sortObjects&&(X.setFromMatrixPosition(a.matrixWorld),X.applyProjection(sa)),c=qa.update(a),d instanceof\r\nTHREE.MultiMaterial)for(var e=c.groups,g=d.materials,d=0,f=e.length;d<f;d++){var h=e[d],k=g[h.materialIndex];!0===k.visible&&m(a,c,k,X.z,h)}else m(a,c,d,X.z,null)}c=a.children;d=0;for(f=c.length;d<f;d++)r(c[d],b)}}function s(a,b,c,d){for(var e=0,g=a.length;e<g;e++){var f=a[e],h=f.object,k=f.geometry,m=void 0===d?f.material:d,f=f.group;h.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,h.matrixWorld);h.normalMatrix.getNormalMatrix(h.modelViewMatrix);if(h instanceof THREE.ImmediateRenderObject){u(m);\r\nvar l=x(b,c,m,h);oa=\"\";h.render(function(a){W.renderBufferImmediate(a,l,m)})}else W.renderBufferDirect(b,c,k,m,h,f)}}function u(a){a.side!==THREE.DoubleSide?J.enable(t.CULL_FACE):J.disable(t.CULL_FACE);J.setFlipSided(a.side===THREE.BackSide);!0===a.transparent?J.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha):J.setBlending(THREE.NoBlending);J.setDepthFunc(a.depthFunc);J.setDepthTest(a.depthTest);J.setDepthWrite(a.depthWrite);\r\nJ.setColorWrite(a.colorWrite);J.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function x(a,b,c,d){ta=0;var e=T.get(c);ua&&((za||a!==ea)&&ba.setState(c.clippingPlanes,c.clipShadows,a,e,a===ea&&c.id===Z),void 0!==e.numClippingPlanes&&e.numClippingPlanes!==ba.numPlanes&&(c.needsUpdate=!0));void 0===e.program&&(c.needsUpdate=!0);void 0!==e.lightsHash&&e.lightsHash!==S.hash&&(c.needsUpdate=!0);if(c.needsUpdate){a:{var g=T.get(c),f=pa.getParameters(c,S,b,ba.numPlanes,d),m=\r\npa.getProgramCode(c,f),l=g.program,p=!0;if(void 0===l)c.addEventListener(\"dispose\",h);else if(l.code!==m)k(c);else if(void 0!==f.shaderID)break a;else p=!1;p&&(f.shaderID?(l=THREE.ShaderLib[f.shaderID],g.__webglShader={name:c.type,uniforms:THREE.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}):g.__webglShader={name:c.type,uniforms:c.uniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader},c.__webglShader=g.__webglShader,l=pa.acquireProgram(c,\r\nf,m),g.program=l,c.program=l);f=l.getAttributes();if(c.morphTargets)for(m=c.numSupportedMorphTargets=0;m<W.maxMorphTargets;m++)0<=f[\"morphTarget\"+m]&&c.numSupportedMorphTargets++;if(c.morphNormals)for(m=c.numSupportedMorphNormals=0;m<W.maxMorphNormals;m++)0<=f[\"morphNormal\"+m]&&c.numSupportedMorphNormals++;f=g.__webglShader.uniforms;(c instanceof THREE.ShaderMaterial||c instanceof THREE.RawShaderMaterial)&&!0!==c.clipping||(g.numClippingPlanes=ba.numPlanes,f.clippingPlanes=ba.uniform);c.lights&&(g.lightsHash=\r\nS.hash,f.ambientLightColor.value=S.ambient,f.directionalLights.value=S.directional,f.spotLights.value=S.spot,f.pointLights.value=S.point,f.hemisphereLights.value=S.hemi,f.directionalShadowMap.value=S.directionalShadowMap,f.directionalShadowMatrix.value=S.directionalShadowMatrix,f.spotShadowMap.value=S.spotShadowMap,f.spotShadowMatrix.value=S.spotShadowMatrix,f.pointShadowMap.value=S.pointShadowMap,f.pointShadowMatrix.value=S.pointShadowMatrix);m=g.program.getUniforms();m=THREE.WebGLUniforms.seqWithValue(m.seq,\r\nf);g.uniformsList=m;g.dynamicUniforms=THREE.WebGLUniforms.splitDynamic(m,f)}c.needsUpdate=!1}var n=!1,p=l=!1,g=e.program,m=g.getUniforms(),f=e.__webglShader.uniforms;g.id!==fa&&(t.useProgram(g.program),fa=g.id,p=l=n=!0);c.id!==Z&&(Z=c.id,l=!0);if(n||a!==ea){m.set(t,a,\"projectionMatrix\");ca.logarithmicDepthBuffer&&m.setValue(t,\"logDepthBufFC\",2/(Math.log(a.far+1)/Math.LN2));a!==ea&&(ea=a,p=l=!0);if(c instanceof THREE.ShaderMaterial||c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshStandardMaterial||\r\nc.envMap)n=m.map.cameraPosition,void 0!==n&&n.setValue(t,X.setFromMatrixPosition(a.matrixWorld));(c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshBasicMaterial||c instanceof THREE.MeshStandardMaterial||c instanceof THREE.ShaderMaterial||c.skinning)&&m.setValue(t,\"viewMatrix\",a.matrixWorldInverse);m.set(t,W,\"toneMappingExposure\");m.set(t,W,\"toneMappingWhitePoint\")}c.skinning&&(m.setOptional(t,d,\"bindMatrix\"),m.setOptional(t,d,\"bindMatrixInverse\"),\r\nn=d.skeleton)&&(ca.floatVertexTextures&&n.useVertexTexture?(m.set(t,n,\"boneTexture\"),m.set(t,n,\"boneTextureWidth\"),m.set(t,n,\"boneTextureHeight\")):m.setOptional(t,n,\"boneMatrices\"));if(l){c.lights&&(l=p,f.ambientLightColor.needsUpdate=l,f.directionalLights.needsUpdate=l,f.pointLights.needsUpdate=l,f.spotLights.needsUpdate=l,f.hemisphereLights.needsUpdate=l);b&&c.fog&&(f.fogColor.value=b.color,b instanceof THREE.Fog?(f.fogNear.value=b.near,f.fogFar.value=b.far):b instanceof THREE.FogExp2&&(f.fogDensity.value=\r\nb.density));if(c instanceof THREE.MeshBasicMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshStandardMaterial||c instanceof THREE.MeshDepthMaterial){f.opacity.value=c.opacity;f.diffuse.value=c.color;c.emissive&&f.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity);f.map.value=c.map;f.specularMap.value=c.specularMap;f.alphaMap.value=c.alphaMap;c.aoMap&&(f.aoMap.value=c.aoMap,f.aoMapIntensity.value=c.aoMapIntensity);var q;\r\nc.map?q=c.map:c.specularMap?q=c.specularMap:c.displacementMap?q=c.displacementMap:c.normalMap?q=c.normalMap:c.bumpMap?q=c.bumpMap:c.roughnessMap?q=c.roughnessMap:c.metalnessMap?q=c.metalnessMap:c.alphaMap?q=c.alphaMap:c.emissiveMap&&(q=c.emissiveMap);void 0!==q&&(q instanceof THREE.WebGLRenderTarget&&(q=q.texture),b=q.offset,q=q.repeat,f.offsetRepeat.value.set(b.x,b.y,q.x,q.y));f.envMap.value=c.envMap;f.flipEnvMap.value=c.envMap instanceof THREE.CubeTexture?-1:1;f.reflectivity.value=c.reflectivity;\r\nf.refractionRatio.value=c.refractionRatio}c instanceof THREE.LineBasicMaterial?(f.diffuse.value=c.color,f.opacity.value=c.opacity):c instanceof THREE.LineDashedMaterial?(f.diffuse.value=c.color,f.opacity.value=c.opacity,f.dashSize.value=c.dashSize,f.totalSize.value=c.dashSize+c.gapSize,f.scale.value=c.scale):c instanceof THREE.PointsMaterial?(f.diffuse.value=c.color,f.opacity.value=c.opacity,f.size.value=c.size*$,f.scale.value=.5*z.clientHeight,f.map.value=c.map,null!==c.map&&(q=c.map.offset,c=c.map.repeat,\r\nf.offsetRepeat.value.set(q.x,q.y,c.x,c.y))):c instanceof THREE.MeshLambertMaterial?(c.lightMap&&(f.lightMap.value=c.lightMap,f.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(f.emissiveMap.value=c.emissiveMap)):c instanceof THREE.MeshPhongMaterial?(f.specular.value=c.specular,f.shininess.value=Math.max(c.shininess,1E-4),c.lightMap&&(f.lightMap.value=c.lightMap,f.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(f.emissiveMap.value=c.emissiveMap),c.bumpMap&&(f.bumpMap.value=\r\nc.bumpMap,f.bumpScale.value=c.bumpScale),c.normalMap&&(f.normalMap.value=c.normalMap,f.normalScale.value.copy(c.normalScale)),c.displacementMap&&(f.displacementMap.value=c.displacementMap,f.displacementScale.value=c.displacementScale,f.displacementBias.value=c.displacementBias)):c instanceof THREE.MeshPhysicalMaterial?v(f,c):c instanceof THREE.MeshStandardMaterial?v(f,c):c instanceof THREE.MeshDepthMaterial?c.displacementMap&&(f.displacementMap.value=c.displacementMap,f.displacementScale.value=c.displacementScale,\r\nf.displacementBias.value=c.displacementBias):c instanceof THREE.MeshNormalMaterial&&(f.opacity.value=c.opacity);THREE.WebGLUniforms.upload(t,e.uniformsList,f,W)}m.set(t,d,\"modelViewMatrix\");m.set(t,d,\"normalMatrix\");m.setValue(t,\"modelMatrix\",d.matrixWorld);e=e.dynamicUniforms;null!==e&&(THREE.WebGLUniforms.evalDynamic(e,f,d,a),THREE.WebGLUniforms.upload(t,e,f,W));return g}function v(a,b){a.roughness.value=b.roughness;a.metalness.value=b.metalness;b.roughnessMap&&(a.roughnessMap.value=b.roughnessMap);\r\nb.metalnessMap&&(a.metalnessMap.value=b.metalnessMap);b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity);b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap);b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale);b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale));b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias);b.envMap&&\r\n(a.envMapIntensity.value=b.envMapIntensity)}function C(a,b,c){c?(t.texParameteri(a,t.TEXTURE_WRAP_S,G(b.wrapS)),t.texParameteri(a,t.TEXTURE_WRAP_T,G(b.wrapT)),t.texParameteri(a,t.TEXTURE_MAG_FILTER,G(b.magFilter)),t.texParameteri(a,t.TEXTURE_MIN_FILTER,G(b.minFilter))):(t.texParameteri(a,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(a,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),b.wrapS===THREE.ClampToEdgeWrapping&&b.wrapT===THREE.ClampToEdgeWrapping||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\",\r\nb),t.texParameteri(a,t.TEXTURE_MAG_FILTER,B(b.magFilter)),t.texParameteri(a,t.TEXTURE_MIN_FILTER,B(b.minFilter)),b.minFilter!==THREE.NearestFilter&&b.minFilter!==THREE.LinearFilter&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\",b));!(c=V.get(\"EXT_texture_filter_anisotropic\"))||b.type===THREE.FloatType&&null===V.get(\"OES_texture_float_linear\")||b.type===THREE.HalfFloatType&&null===V.get(\"OES_texture_half_float_linear\")||\r\n!(1<b.anisotropy||T.get(b).__currentAnisotropy)||(t.texParameterf(a,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,W.getMaxAnisotropy())),T.get(b).__currentAnisotropy=b.anisotropy)}function w(a,b){if(a.width>b||a.height>b){var c=b/Math.max(a.width,a.height),d=document.createElement(\"canvas\");d.width=Math.floor(a.width*c);d.height=Math.floor(a.height*c);d.getContext(\"2d\").drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height);console.warn(\"THREE.WebGLRenderer: image is too big (\"+a.width+\"x\"+a.height+\r\n\"). Resized to \"+d.width+\"x\"+d.height,a);return d}return a}function D(a){return THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height)}function A(a,b,c,d){var e=G(b.texture.format),f=G(b.texture.type);J.texImage2D(d,0,e,b.width,b.height,0,e,f,null);t.bindFramebuffer(t.FRAMEBUFFER,a);t.framebufferTexture2D(t.FRAMEBUFFER,c,d,T.get(b.texture).__webglTexture,0);t.bindFramebuffer(t.FRAMEBUFFER,null)}function y(a,b){t.bindRenderbuffer(t.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,\r\nt.DEPTH_COMPONENT16,b.width,b.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,b.width,b.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,a)):t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,b.width,b.height);t.bindRenderbuffer(t.RENDERBUFFER,null)}function B(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?\r\nt.NEAREST:t.LINEAR}function G(a){var b;if(a===THREE.RepeatWrapping)return t.REPEAT;if(a===THREE.ClampToEdgeWrapping)return t.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return t.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return t.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return t.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return t.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return t.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return t.LINEAR_MIPMAP_NEAREST;if(a===\r\nTHREE.LinearMipMapLinearFilter)return t.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return t.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return t.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return t.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return t.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return t.BYTE;if(a===THREE.ShortType)return t.SHORT;if(a===THREE.UnsignedShortType)return t.UNSIGNED_SHORT;if(a===THREE.IntType)return t.INT;if(a===THREE.UnsignedIntType)return t.UNSIGNED_INT;\r\nif(a===THREE.FloatType)return t.FLOAT;b=V.get(\"OES_texture_half_float\");if(null!==b&&a===THREE.HalfFloatType)return b.HALF_FLOAT_OES;if(a===THREE.AlphaFormat)return t.ALPHA;if(a===THREE.RGBFormat)return t.RGB;if(a===THREE.RGBAFormat)return t.RGBA;if(a===THREE.LuminanceFormat)return t.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return t.LUMINANCE_ALPHA;if(a===THREE.DepthFormat)return t.DEPTH_COMPONENT;if(a===THREE.AddEquation)return t.FUNC_ADD;if(a===THREE.SubtractEquation)return t.FUNC_SUBTRACT;if(a===\r\nTHREE.ReverseSubtractEquation)return t.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return t.ZERO;if(a===THREE.OneFactor)return t.ONE;if(a===THREE.SrcColorFactor)return t.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return t.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return t.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return t.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return t.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return t.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return t.DST_COLOR;\r\nif(a===THREE.OneMinusDstColorFactor)return t.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return t.SRC_ALPHA_SATURATE;b=V.get(\"WEBGL_compressed_texture_s3tc\");if(null!==b){if(a===THREE.RGB_S3TC_DXT1_Format)return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return b.COMPRESSED_RGBA_S3TC_DXT5_EXT}b=V.get(\"WEBGL_compressed_texture_pvrtc\");\r\nif(null!==b){if(a===THREE.RGB_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===THREE.RGB_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===THREE.RGBA_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(a===THREE.RGBA_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}b=V.get(\"WEBGL_compressed_texture_etc1\");if(null!==b&&a===THREE.RGB_ETC1_Format)return b.COMPRESSED_RGB_ETC1_WEBGL;b=V.get(\"EXT_blend_minmax\");if(null!==b){if(a===THREE.MinEquation)return b.MIN_EXT;\r\nif(a===THREE.MaxEquation)return b.MAX_EXT}return 0}console.log(\"THREE.WebGLRenderer\",THREE.REVISION);a=a||{};var z=void 0!==a.canvas?a.canvas:document.createElement(\"canvas\"),H=void 0!==a.context?a.context:null,M=void 0!==a.alpha?a.alpha:!1,O=void 0!==a.depth?a.depth:!0,N=void 0!==a.stencil?a.stencil:!0,E=void 0!==a.antialias?a.antialias:!1,K=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,I=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,L=[],P=[],Q=-1,R=[],F=-1,da=new Float32Array(8),\r\nU=[],Y=[];this.domElement=z;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.clippingPlanes=[];this.localClippingEnabled=!1;this.gammaFactor=2;this.physicallyCorrectLights=this.gammaOutput=this.gammaInput=!1;this.toneMapping=THREE.LinearToneMapping;this.toneMappingWhitePoint=this.toneMappingExposure=1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;var W=this,fa=null,la=null,ga=null,Z=-1,oa=\"\",ea=null,ra=\r\nnew THREE.Vector4,Aa=null,ma=new THREE.Vector4,ta=0,aa=new THREE.Color(0),ia=0,va=z.width,wa=z.height,$=1,ya=new THREE.Vector4(0,0,va,wa),Ca=!1,na=new THREE.Vector4(0,0,va,wa),Ba=new THREE.Frustum,ba=new THREE.WebGLClipping,ua=!1,za=!1,ka=new THREE.Sphere,sa=new THREE.Matrix4,X=new THREE.Vector3,S={hash:\"\",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},\r\nja={geometries:0,textures:0},ha={calls:0,vertices:0,faces:0,points:0};this.info={render:ha,memory:ja,programs:null};var t;try{M={alpha:M,depth:O,stencil:N,antialias:E,premultipliedAlpha:K,preserveDrawingBuffer:I};t=H||z.getContext(\"webgl\",M)||z.getContext(\"experimental-webgl\",M);if(null===t){if(null!==z.getContext(\"webgl\"))throw\"Error creating WebGL context with your selected attributes.\";throw\"Error creating WebGL context.\";}void 0===t.getShaderPrecisionFormat&&(t.getShaderPrecisionFormat=function(){return{rangeMin:1,\r\nrangeMax:1,precision:1}});z.addEventListener(\"webglcontextlost\",e,!1)}catch(Fa){console.error(\"THREE.WebGLRenderer: \"+Fa)}var Da=\"undefined\"!==typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,V=new THREE.WebGLExtensions(t);V.get(\"WEBGL_depth_texture\");V.get(\"OES_texture_float\");V.get(\"OES_texture_float_linear\");V.get(\"OES_texture_half_float\");V.get(\"OES_texture_half_float_linear\");V.get(\"OES_standard_derivatives\");V.get(\"ANGLE_instanced_arrays\");V.get(\"OES_element_index_uint\")&&\r\n(THREE.BufferGeometry.MaxIndex=4294967296);var ca=new THREE.WebGLCapabilities(t,V,a),J=new THREE.WebGLState(t,V,G),T=new THREE.WebGLProperties,qa=new THREE.WebGLObjects(t,T,this.info),pa=new THREE.WebGLPrograms(this,ca),xa=new THREE.WebGLLights;this.info.programs=pa.programs;var Ga=new THREE.WebGLBufferRenderer(t,V,ha),Ha=new THREE.WebGLIndexedBufferRenderer(t,V,ha);c();this.context=t;this.capabilities=ca;this.extensions=V;this.properties=T;this.state=J;var Ea=new THREE.WebGLShadowMap(this,S,qa);\r\nthis.shadowMap=Ea;var Ia=new THREE.SpritePlugin(this,U),Ja=new THREE.LensFlarePlugin(this,Y);this.getContext=function(){return t};this.getContextAttributes=function(){return t.getContextAttributes()};this.forceContextLoss=function(){V.get(\"WEBGL_lose_context\").loseContext()};this.getMaxAnisotropy=function(){var a;return function(){if(void 0!==a)return a;var b=V.get(\"EXT_texture_filter_anisotropic\");return a=null!==b?t.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}}();this.getPrecision=function(){return ca.precision};\r\nthis.getPixelRatio=function(){return $};this.setPixelRatio=function(a){void 0!==a&&($=a,this.setSize(na.z,na.w,!1))};this.getSize=function(){return{width:va,height:wa}};this.setSize=function(a,b,c){va=a;wa=b;z.width=a*$;z.height=b*$;!1!==c&&(z.style.width=a+\"px\",z.style.height=b+\"px\");this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){J.viewport(na.set(a,b,c,d))};this.setScissor=function(a,b,c,d){J.scissor(ya.set(a,b,c,d))};this.setScissorTest=function(a){J.setScissorTest(Ca=a)};this.getClearColor=\r\nfunction(){return aa};this.setClearColor=function(a,c){aa.set(a);ia=void 0!==c?c:1;b(aa.r,aa.g,aa.b,ia)};this.getClearAlpha=function(){return ia};this.setClearAlpha=function(a){ia=a;b(aa.r,aa.g,aa.b,ia)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=t.COLOR_BUFFER_BIT;if(void 0===b||b)d|=t.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=t.STENCIL_BUFFER_BIT;t.clear(d)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,\r\n!1,!0)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.resetGLState=d;this.dispose=function(){z.removeEventListener(\"webglcontextlost\",e,!1)};this.renderBufferImmediate=function(a,b,c){J.initAttributes();var d=T.get(a);a.hasPositions&&!d.position&&(d.position=t.createBuffer());a.hasNormals&&!d.normal&&(d.normal=t.createBuffer());a.hasUvs&&!d.uv&&(d.uv=t.createBuffer());a.hasColors&&!d.color&&(d.color=t.createBuffer());b=b.getAttributes();a.hasPositions&&(t.bindBuffer(t.ARRAY_BUFFER,\r\nd.position),t.bufferData(t.ARRAY_BUFFER,a.positionArray,t.DYNAMIC_DRAW),J.enableAttribute(b.position),t.vertexAttribPointer(b.position,3,t.FLOAT,!1,0,0));if(a.hasNormals){t.bindBuffer(t.ARRAY_BUFFER,d.normal);if(\"MeshPhongMaterial\"!==c.type&&\"MeshStandardMaterial\"!==c.type&&\"MeshPhysicalMaterial\"!==c.type&&c.shading===THREE.FlatShading)for(var e=0,f=3*a.count;e<f;e+=9){var g=a.normalArray,h=(g[e+0]+g[e+3]+g[e+6])/3,k=(g[e+1]+g[e+4]+g[e+7])/3,m=(g[e+2]+g[e+5]+g[e+8])/3;g[e+0]=h;g[e+1]=k;g[e+2]=m;g[e+\r\n3]=h;g[e+4]=k;g[e+5]=m;g[e+6]=h;g[e+7]=k;g[e+8]=m}t.bufferData(t.ARRAY_BUFFER,a.normalArray,t.DYNAMIC_DRAW);J.enableAttribute(b.normal);t.vertexAttribPointer(b.normal,3,t.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(t.bindBuffer(t.ARRAY_BUFFER,d.uv),t.bufferData(t.ARRAY_BUFFER,a.uvArray,t.DYNAMIC_DRAW),J.enableAttribute(b.uv),t.vertexAttribPointer(b.uv,2,t.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(t.bindBuffer(t.ARRAY_BUFFER,d.color),t.bufferData(t.ARRAY_BUFFER,a.colorArray,t.DYNAMIC_DRAW),\r\nJ.enableAttribute(b.color),t.vertexAttribPointer(b.color,3,t.FLOAT,!1,0,0));J.disableUnusedAttributes();t.drawArrays(t.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){u(d);var g=x(a,b,d,e),h=!1;a=c.id+\"_\"+g.id+\"_\"+d.wireframe;a!==oa&&(oa=a,h=!0);b=e.morphTargetInfluences;if(void 0!==b){a=[];for(var k=0,h=b.length;k<h;k++){var m=b[k];a.push([m,k])}a.sort(l);8<a.length&&(a.length=8);for(var p=c.morphAttributes,k=0,h=a.length;k<h;k++)m=a[k],da[k]=m[0],0!==m[0]?(b=m[1],!0===\r\nd.morphTargets&&p.position&&c.addAttribute(\"morphTarget\"+k,p.position[b]),!0===d.morphNormals&&p.normal&&c.addAttribute(\"morphNormal\"+k,p.normal[b])):(!0===d.morphTargets&&c.removeAttribute(\"morphTarget\"+k),!0===d.morphNormals&&c.removeAttribute(\"morphNormal\"+k));g.getUniforms().setValue(t,\"morphTargetInfluences\",da);h=!0}b=c.index;k=c.attributes.position;!0===d.wireframe&&(b=qa.getWireframeAttribute(c));null!==b?(a=Ha,a.setIndex(b)):a=Ga;if(h){a:{var h=void 0,n;if(c instanceof THREE.InstancedBufferGeometry&&\r\n(n=V.get(\"ANGLE_instanced_arrays\"),null===n)){console.error(\"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");break a}void 0===h&&(h=0);J.initAttributes();var m=c.attributes,g=g.getAttributes(),p=d.defaultAttributeValues,q;for(q in g){var r=g[q];if(0<=r){var s=m[q];if(void 0!==s){var v=t.FLOAT,w=s.array,E=s.normalized;w instanceof Float32Array?v=t.FLOAT:w instanceof Float64Array?console.warn(\"Unsupported data buffer format: Float64Array\"):\r\nw instanceof Uint16Array?v=t.UNSIGNED_SHORT:w instanceof Int16Array?v=t.SHORT:w instanceof Uint32Array?v=t.UNSIGNED_INT:w instanceof Int32Array?v=t.INT:w instanceof Int8Array?v=t.BYTE:w instanceof Uint8Array&&(v=t.UNSIGNED_BYTE);var w=s.itemSize,L=qa.getAttributeBuffer(s);if(s instanceof THREE.InterleavedBufferAttribute){var y=s.data,C=y.stride,s=s.offset;y instanceof THREE.InstancedInterleavedBuffer?(J.enableAttributeAndDivisor(r,y.meshPerAttribute,n),void 0===c.maxInstancedCount&&(c.maxInstancedCount=\r\ny.meshPerAttribute*y.count)):J.enableAttribute(r);t.bindBuffer(t.ARRAY_BUFFER,L);t.vertexAttribPointer(r,w,v,E,C*y.array.BYTES_PER_ELEMENT,(h*C+s)*y.array.BYTES_PER_ELEMENT)}else s instanceof THREE.InstancedBufferAttribute?(J.enableAttributeAndDivisor(r,s.meshPerAttribute,n),void 0===c.maxInstancedCount&&(c.maxInstancedCount=s.meshPerAttribute*s.count)):J.enableAttribute(r),t.bindBuffer(t.ARRAY_BUFFER,L),t.vertexAttribPointer(r,w,v,E,0,h*w*s.array.BYTES_PER_ELEMENT)}else if(void 0!==p&&(v=p[q],void 0!==\r\nv))switch(v.length){case 2:t.vertexAttrib2fv(r,v);break;case 3:t.vertexAttrib3fv(r,v);break;case 4:t.vertexAttrib4fv(r,v);break;default:t.vertexAttrib1fv(r,v)}}}J.disableUnusedAttributes()}null!==b&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,qa.getAttributeBuffer(b))}n=Infinity;null!==b?n=b.count:void 0!==k&&(n=k.count);q=c.drawRange.start;b=c.drawRange.count;k=null!==f?f.start:0;h=null!==f?f.count:Infinity;f=Math.max(0,q,k);n=Math.min(0+n,q+b,k+h)-1;n=Math.max(0,n-f+1);if(e instanceof THREE.Mesh)if(!0===\r\nd.wireframe)J.setLineWidth(d.wireframeLinewidth*(null===la?$:1)),a.setMode(t.LINES);else switch(e.drawMode){case THREE.TrianglesDrawMode:a.setMode(t.TRIANGLES);break;case THREE.TriangleStripDrawMode:a.setMode(t.TRIANGLE_STRIP);break;case THREE.TriangleFanDrawMode:a.setMode(t.TRIANGLE_FAN)}else e instanceof THREE.Line?(d=d.linewidth,void 0===d&&(d=1),J.setLineWidth(d*(null===la?$:1)),e instanceof THREE.LineSegments?a.setMode(t.LINES):a.setMode(t.LINE_STRIP)):e instanceof THREE.Points&&a.setMode(t.POINTS);\r\nc instanceof THREE.InstancedBufferGeometry?0<c.maxInstancedCount&&a.renderInstances(c,f,n):a.render(f,n)};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");else{var e=a.fog;oa=\"\";Z=-1;ea=null;!0===a.autoUpdate&&a.updateMatrixWorld();null===b.parent&&b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);sa.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);Ba.setFromMatrix(sa);\r\nL.length=0;F=Q=-1;U.length=0;Y.length=0;za=this.localClippingEnabled;ua=ba.init(this.clippingPlanes,za,b);r(a,b);P.length=Q+1;R.length=F+1;!0===W.sortObjects&&(P.sort(n),R.sort(p));ua&&ba.beginShadows();for(var f=L,g=0,h=0,k=f.length;h<k;h++){var m=f[h];m.castShadow&&(S.shadows[g++]=m)}S.shadows.length=g;Ea.render(a,b);for(var f=L,l=m=0,q=0,v,x,u,w,E=b.matrixWorldInverse,y=0,C=0,A=0,I=0,g=0,h=f.length;g<h;g++)if(k=f[g],v=k.color,x=k.intensity,u=k.distance,w=k.shadow&&k.shadow.map?k.shadow.map.texture:\r\nnull,k instanceof THREE.AmbientLight)m+=v.r*x,l+=v.g*x,q+=v.b*x;else if(k instanceof THREE.DirectionalLight){var z=xa.get(k);z.color.copy(k.color).multiplyScalar(k.intensity);z.direction.setFromMatrixPosition(k.matrixWorld);X.setFromMatrixPosition(k.target.matrixWorld);z.direction.sub(X);z.direction.transformDirection(E);if(z.shadow=k.castShadow)z.shadowBias=k.shadow.bias,z.shadowRadius=k.shadow.radius,z.shadowMapSize=k.shadow.mapSize;S.directionalShadowMap[y]=w;S.directionalShadowMatrix[y]=k.shadow.matrix;\r\nS.directional[y++]=z}else if(k instanceof THREE.SpotLight){z=xa.get(k);z.position.setFromMatrixPosition(k.matrixWorld);z.position.applyMatrix4(E);z.color.copy(v).multiplyScalar(x);z.distance=u;z.direction.setFromMatrixPosition(k.matrixWorld);X.setFromMatrixPosition(k.target.matrixWorld);z.direction.sub(X);z.direction.transformDirection(E);z.coneCos=Math.cos(k.angle);z.penumbraCos=Math.cos(k.angle*(1-k.penumbra));z.decay=0===k.distance?0:k.decay;if(z.shadow=k.castShadow)z.shadowBias=k.shadow.bias,\r\nz.shadowRadius=k.shadow.radius,z.shadowMapSize=k.shadow.mapSize;S.spotShadowMap[A]=w;S.spotShadowMatrix[A]=k.shadow.matrix;S.spot[A++]=z}else if(k instanceof THREE.PointLight){z=xa.get(k);z.position.setFromMatrixPosition(k.matrixWorld);z.position.applyMatrix4(E);z.color.copy(k.color).multiplyScalar(k.intensity);z.distance=k.distance;z.decay=0===k.distance?0:k.decay;if(z.shadow=k.castShadow)z.shadowBias=k.shadow.bias,z.shadowRadius=k.shadow.radius,z.shadowMapSize=k.shadow.mapSize;S.pointShadowMap[C]=\r\nw;void 0===S.pointShadowMatrix[C]&&(S.pointShadowMatrix[C]=new THREE.Matrix4);X.setFromMatrixPosition(k.matrixWorld).negate();S.pointShadowMatrix[C].identity().setPosition(X);S.point[C++]=z}else k instanceof THREE.HemisphereLight&&(z=xa.get(k),z.direction.setFromMatrixPosition(k.matrixWorld),z.direction.transformDirection(E),z.direction.normalize(),z.skyColor.copy(k.color).multiplyScalar(x),z.groundColor.copy(k.groundColor).multiplyScalar(x),S.hemi[I++]=z);S.ambient[0]=m;S.ambient[1]=l;S.ambient[2]=\r\nq;S.directional.length=y;S.spot.length=A;S.point.length=C;S.hemi.length=I;S.hash=y+\",\"+C+\",\"+A+\",\"+I+\",\"+S.shadows.length;ua&&ba.endShadows();ha.calls=0;ha.vertices=0;ha.faces=0;ha.points=0;void 0===c&&(c=null);this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);a.overrideMaterial?(d=a.overrideMaterial,s(P,b,e,d),s(R,b,e,d)):(J.setBlending(THREE.NoBlending),s(P,b,e),s(R,b,e));Ia.render(a,b);Ja.render(a,b,ma);c&&(a=c.texture,a.generateMipmaps&&\r\nD(c)&&a.minFilter!==THREE.NearestFilter&&a.minFilter!==THREE.LinearFilter&&(a=c instanceof THREE.WebGLRenderTargetCube?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,c=T.get(c.texture).__webglTexture,J.bindTexture(a,c),t.generateMipmap(a),J.bindTexture(a,null)));J.setDepthTest(!0);J.setDepthWrite(!0);J.setColorWrite(!0)}};this.setFaceCulling=function(a,b){J.setCullFace(a);J.setFlipSided(b===THREE.FrontFaceDirectionCW)};this.allocTextureUnit=function(){var a=ta;a>=ca.maxTextures&&console.warn(\"WebGLRenderer: trying to use \"+\r\na+\" texture units while this GPU supports only \"+ca.maxTextures);ta+=1;return a};this.setTexture2D=function(){var a=!1;return function(b,c){b instanceof THREE.WebGLRenderTarget&&(a||(console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\"),a=!0),b=b.texture);var d=b,e=T.get(d);if(0<d.version&&e.__version!==d.version){var g=d.image;if(void 0===g)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\",d);\r\nelse if(!1===g.complete)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\",d);else{void 0===e.__webglInit&&(e.__webglInit=!0,d.addEventListener(\"dispose\",f),e.__webglTexture=t.createTexture(),ja.textures++);J.activeTexture(t.TEXTURE0+c);J.bindTexture(t.TEXTURE_2D,e.__webglTexture);t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,d.flipY);t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,d.premultiplyAlpha);t.pixelStorei(t.UNPACK_ALIGNMENT,d.unpackAlignment);var h=w(d.image,ca.maxTextureSize);\r\nif((d.wrapS!==THREE.ClampToEdgeWrapping||d.wrapT!==THREE.ClampToEdgeWrapping||d.minFilter!==THREE.NearestFilter&&d.minFilter!==THREE.LinearFilter)&&!1===D(h))if(g=h,g instanceof HTMLImageElement||g instanceof HTMLCanvasElement){var k=document.createElement(\"canvas\");k.width=THREE.Math.nearestPowerOfTwo(g.width);k.height=THREE.Math.nearestPowerOfTwo(g.height);k.getContext(\"2d\").drawImage(g,0,0,k.width,k.height);console.warn(\"THREE.WebGLRenderer: image is not power of two (\"+g.width+\"x\"+g.height+\"). Resized to \"+\r\nk.width+\"x\"+k.height,g);h=k}else h=g;var g=D(h),k=G(d.format),m=G(d.type);C(t.TEXTURE_2D,d,g);var l=d.mipmaps;if(d instanceof THREE.DepthTexture){l=t.DEPTH_COMPONENT;if(d.type===THREE.FloatType){if(!Da)throw Error(\"Float Depth Texture only supported in WebGL2.0\");l=t.DEPTH_COMPONENT32F}else Da&&(l=t.DEPTH_COMPONENT16);J.texImage2D(t.TEXTURE_2D,0,l,h.width,h.height,0,k,m,null)}else if(d instanceof THREE.DataTexture)if(0<l.length&&g){for(var n=0,p=l.length;n<p;n++)h=l[n],J.texImage2D(t.TEXTURE_2D,n,\r\nk,h.width,h.height,0,k,m,h.data);d.generateMipmaps=!1}else J.texImage2D(t.TEXTURE_2D,0,k,h.width,h.height,0,k,m,h.data);else if(d instanceof THREE.CompressedTexture)for(n=0,p=l.length;n<p;n++)h=l[n],d.format!==THREE.RGBAFormat&&d.format!==THREE.RGBFormat?-1<J.getCompressedTextureFormats().indexOf(k)?J.compressedTexImage2D(t.TEXTURE_2D,n,k,h.width,h.height,0,h.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):J.texImage2D(t.TEXTURE_2D,\r\nn,k,h.width,h.height,0,k,m,h.data);else if(0<l.length&&g){n=0;for(p=l.length;n<p;n++)h=l[n],J.texImage2D(t.TEXTURE_2D,n,k,k,m,h);d.generateMipmaps=!1}else J.texImage2D(t.TEXTURE_2D,0,k,k,m,h);d.generateMipmaps&&g&&t.generateMipmap(t.TEXTURE_2D);e.__version=d.version;if(d.onUpdate)d.onUpdate(d)}}else J.activeTexture(t.TEXTURE0+c),J.bindTexture(t.TEXTURE_2D,e.__webglTexture)}}();this.setTexture=function(){var a=!1;return function(b,c){a||(console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\"),\r\na=!0);W.setTexture2D(b,c)}}();this.setTextureCube=function(){var a=!1;return function(b,c){b instanceof THREE.WebGLRenderTargetCube&&(a||(console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),a=!0),b=b.texture);if(b instanceof THREE.CubeTexture||Array.isArray(b.image)&&6===b.image.length){var d=b,e=T.get(d);if(6===d.image.length)if(0<d.version&&e.__version!==d.version){e.__image__webglTextureCube||(d.addEventListener(\"dispose\",\r\nf),e.__image__webglTextureCube=t.createTexture(),ja.textures++);J.activeTexture(t.TEXTURE0+c);J.bindTexture(t.TEXTURE_CUBE_MAP,e.__image__webglTextureCube);t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,d.flipY);for(var g=d instanceof THREE.CompressedTexture,h=d.image[0]instanceof THREE.DataTexture,k=[],m=0;6>m;m++)k[m]=!W.autoScaleCubemaps||g||h?h?d.image[m].image:d.image[m]:w(d.image[m],ca.maxCubemapSize);var l=D(k[0]),n=G(d.format),p=G(d.type);C(t.TEXTURE_CUBE_MAP,d,l);for(m=0;6>m;m++)if(g)for(var q,r=k[m].mipmaps,\r\ns=0,x=r.length;s<x;s++)q=r[s],d.format!==THREE.RGBAFormat&&d.format!==THREE.RGBFormat?-1<J.getCompressedTextureFormats().indexOf(n)?J.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,s,n,q.width,q.height,0,q.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):J.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,s,n,q.width,q.height,0,n,p,q.data);else h?J.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,n,k[m].width,k[m].height,0,n,p,k[m].data):\r\nJ.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,n,n,p,k[m]);d.generateMipmaps&&l&&t.generateMipmap(t.TEXTURE_CUBE_MAP);e.__version=d.version;if(d.onUpdate)d.onUpdate(d)}else J.activeTexture(t.TEXTURE0+c),J.bindTexture(t.TEXTURE_CUBE_MAP,e.__image__webglTextureCube)}else d=b,J.activeTexture(t.TEXTURE0+c),J.bindTexture(t.TEXTURE_CUBE_MAP,T.get(d).__webglTexture)}}();this.getCurrentRenderTarget=function(){return la};this.setRenderTarget=function(a){if((la=a)&&void 0===T.get(a).__webglFramebuffer){var b=\r\nT.get(a),c=T.get(a.texture);a.addEventListener(\"dispose\",g);c.__webglTexture=t.createTexture();ja.textures++;var d=a instanceof THREE.WebGLRenderTargetCube,e=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height);if(d){b.__webglFramebuffer=[];for(var f=0;6>f;f++)b.__webglFramebuffer[f]=t.createFramebuffer()}else b.__webglFramebuffer=t.createFramebuffer();if(d){J.bindTexture(t.TEXTURE_CUBE_MAP,c.__webglTexture);C(t.TEXTURE_CUBE_MAP,a.texture,e);for(f=0;6>f;f++)A(b.__webglFramebuffer[f],\r\na,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+f);a.texture.generateMipmaps&&e&&t.generateMipmap(t.TEXTURE_CUBE_MAP);J.bindTexture(t.TEXTURE_CUBE_MAP,null)}else J.bindTexture(t.TEXTURE_2D,c.__webglTexture),C(t.TEXTURE_2D,a.texture,e),A(b.__webglFramebuffer,a,t.COLOR_ATTACHMENT0,t.TEXTURE_2D),a.texture.generateMipmaps&&e&&t.generateMipmap(t.TEXTURE_2D),J.bindTexture(t.TEXTURE_2D,null);if(a.depthBuffer){b=T.get(a);c=a instanceof THREE.WebGLRenderTargetCube;if(a.depthTexture){if(c)throw Error(\"target.depthTexture not supported in Cube render targets\");\r\nif(a instanceof THREE.WebGLRenderTargetCube)throw Error(\"Depth Texture with cube render targets is not supported!\");t.bindFramebuffer(t.FRAMEBUFFER,b.__webglFramebuffer);if(!(a.depthTexture instanceof THREE.DepthTexture))throw Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");T.get(a.depthTexture).__webglTexture&&a.depthTexture.image.width===a.width&&a.depthTexture.image.height===a.height||(a.depthTexture.image.width=a.width,a.depthTexture.image.height=a.height,a.depthTexture.needsUpdate=\r\n!0);W.setTexture2D(a.depthTexture,0);b=T.get(a.depthTexture).__webglTexture;t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,b,0)}else if(c)for(b.__webglDepthbuffer=[],c=0;6>c;c++)t.bindFramebuffer(t.FRAMEBUFFER,b.__webglFramebuffer[c]),b.__webglDepthbuffer[c]=t.createRenderbuffer(),y(b.__webglDepthbuffer[c],a);else t.bindFramebuffer(t.FRAMEBUFFER,b.__webglFramebuffer),b.__webglDepthbuffer=t.createRenderbuffer(),y(b.__webglDepthbuffer,a);t.bindFramebuffer(t.FRAMEBUFFER,null)}}b=\r\na instanceof THREE.WebGLRenderTargetCube;a?(c=T.get(a),c=b?c.__webglFramebuffer[a.activeCubeFace]:c.__webglFramebuffer,ra.copy(a.scissor),Aa=a.scissorTest,ma.copy(a.viewport)):(c=null,ra.copy(ya).multiplyScalar($),Aa=Ca,ma.copy(na).multiplyScalar($));ga!==c&&(t.bindFramebuffer(t.FRAMEBUFFER,c),ga=c);J.scissor(ra);J.setScissorTest(Aa);J.viewport(ma);b&&(b=T.get(a.texture),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+a.activeCubeFace,b.__webglTexture,a.activeMipMapLevel))};\r\nthis.readRenderTargetPixels=function(a,b,c,d,e,f){if(!1===a instanceof THREE.WebGLRenderTarget)console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");else{var g=T.get(a).__webglFramebuffer;if(g){var h=!1;g!==ga&&(t.bindFramebuffer(t.FRAMEBUFFER,g),h=!0);try{var k=a.texture;k.format!==THREE.RGBAFormat&&G(k.format)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)?console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\"):\r\nk.type===THREE.UnsignedByteType||G(k.type)===t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE)||k.type===THREE.FloatType&&V.get(\"WEBGL_color_buffer_float\")||k.type===THREE.HalfFloatType&&V.get(\"EXT_color_buffer_half_float\")?t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE?0<=b&&b<=a.width-d&&0<=c&&c<=a.height-e&&t.readPixels(b,c,d,e,G(k.format),G(k.type),f):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\"):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\")}finally{h&&\r\nt.bindFramebuffer(t.FRAMEBUFFER,ga)}}}}};\r\nTHREE.WebGLRenderTarget=function(a,b,c){this.uuid=THREE.Math.generateUUID();this.width=a;this.height=b;this.scissor=new THREE.Vector4(0,0,a,b);this.scissorTest=!1;this.viewport=new THREE.Vector4(0,0,a,b);c=c||{};void 0===c.minFilter&&(c.minFilter=THREE.LinearFilter);this.texture=new THREE.Texture(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,c.encoding);this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:\r\n!0;this.depthTexture=null};\r\nObject.assign(THREE.WebGLRenderTarget.prototype,THREE.EventDispatcher.prototype,{setSize:function(a,b){if(this.width!==a||this.height!==b)this.width=a,this.height=b,this.dispose();this.viewport.set(0,0,a,b);this.scissor.set(0,0,a,b)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.width=a.width;this.height=a.height;this.viewport.copy(a.viewport);this.texture=a.texture.clone();this.depthBuffer=a.depthBuffer;this.stencilBuffer=a.stencilBuffer;this.depthTexture=a.depthTexture;\r\nreturn this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}});THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeMipMapLevel=this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;\r\nTHREE.WebGLBufferRenderer=function(a,b,c){var d;this.setMode=function(a){d=a};this.render=function(b,f){a.drawArrays(d,b,f);c.calls++;c.vertices+=f;d===a.TRIANGLES&&(c.faces+=f/3)};this.renderInstances=function(e){var f=b.get(\"ANGLE_instanced_arrays\");if(null===f)console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");else{var g=e.attributes.position,h=0,h=g instanceof THREE.InterleavedBufferAttribute?g.data.count:\r\ng.count;f.drawArraysInstancedANGLE(d,0,h,e.maxInstancedCount);c.calls++;c.vertices+=h*e.maxInstancedCount;d===a.TRIANGLES&&(c.faces+=e.maxInstancedCount*h/3)}}};\r\nTHREE.WebGLClipping=function(){function a(){l.value!==d&&(l.value=d,l.needsUpdate=0<e);c.numPlanes=e}function b(a,b,d,e){var f=null!==a?a.length:0,g=null;if(0!==f){g=l.value;if(!0!==e||null===g){e=d+4*f;b=b.matrixWorldInverse;k.getNormalMatrix(b);if(null===g||g.length<e)g=new Float32Array(e);for(e=0;e!==f;++e,d+=4)h.copy(a[e]).applyMatrix4(b,k),h.normal.toArray(g,d),g[d+3]=h.constant}l.value=g;l.needsUpdate=!0}c.numPlanes=f;return g}var c=this,d=null,e=0,f=!1,g=!1,h=new THREE.Plane,k=new THREE.Matrix3,\r\nl={value:null,needsUpdate:!1};this.uniform=l;this.numPlanes=0;this.init=function(a,c,g){var h=0!==a.length||c||0!==e||f;f=c;d=b(a,g,0);e=a.length;return h};this.beginShadows=function(){g=!0;b(null)};this.endShadows=function(){g=!1;a()};this.setState=function(c,h,k,q,r){if(!f||null===c||0===c.length||g&&!h)g?b(null):a();else{h=g?0:e;var s=4*h,u=q.clippingState||null;l.value=u;u=b(c,k,s,r);for(c=0;c!==s;++c)u[c]=d[c];q.clippingState=u;this.numPlanes+=h}}};\r\nTHREE.WebGLIndexedBufferRenderer=function(a,b,c){var d,e,f;this.setMode=function(a){d=a};this.setIndex=function(c){c.array instanceof Uint32Array&&b.get(\"OES_element_index_uint\")?(e=a.UNSIGNED_INT,f=4):(e=a.UNSIGNED_SHORT,f=2)};this.render=function(b,h){a.drawElements(d,h,e,b*f);c.calls++;c.vertices+=h;d===a.TRIANGLES&&(c.faces+=h/3)};this.renderInstances=function(g,h,k){var l=b.get(\"ANGLE_instanced_arrays\");null===l?console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\"):\r\n(l.drawElementsInstancedANGLE(d,k,e,h*f,g.maxInstancedCount),c.calls++,c.vertices+=k*g.maxInstancedCount,d===a.TRIANGLES&&(c.faces+=g.maxInstancedCount*k/3))}};\r\nTHREE.WebGLExtensions=function(a){var b={};this.get=function(c){if(void 0!==b[c])return b[c];var d;switch(c){case \"WEBGL_depth_texture\":d=a.getExtension(\"WEBGL_depth_texture\")||a.getExtension(\"MOZ_WEBGL_depth_texture\")||a.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case \"EXT_texture_filter_anisotropic\":d=a.getExtension(\"EXT_texture_filter_anisotropic\")||a.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||a.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case \"WEBGL_compressed_texture_s3tc\":d=\r\na.getExtension(\"WEBGL_compressed_texture_s3tc\")||a.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||a.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case \"WEBGL_compressed_texture_pvrtc\":d=a.getExtension(\"WEBGL_compressed_texture_pvrtc\")||a.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;case \"WEBGL_compressed_texture_etc1\":d=a.getExtension(\"WEBGL_compressed_texture_etc1\");break;default:d=a.getExtension(c)}null===d&&console.warn(\"THREE.WebGLRenderer: \"+c+\" extension not supported.\");\r\nreturn b[c]=d}};\r\nTHREE.WebGLCapabilities=function(a,b,c){function d(b){if(\"highp\"===b){if(0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision)return\"highp\";b=\"mediump\"}return\"mediump\"===b&&0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision?\"mediump\":\"lowp\"}this.getMaxPrecision=d;this.precision=void 0!==c.precision?c.precision:\"highp\";\r\nthis.logarithmicDepthBuffer=void 0!==c.logarithmicDepthBuffer?c.logarithmicDepthBuffer:!1;this.maxTextures=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);this.maxVertexTextures=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.maxTextureSize=a.getParameter(a.MAX_TEXTURE_SIZE);this.maxCubemapSize=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE);this.maxAttributes=a.getParameter(a.MAX_VERTEX_ATTRIBS);this.maxVertexUniforms=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS);this.maxVaryings=a.getParameter(a.MAX_VARYING_VECTORS);\r\nthis.maxFragmentUniforms=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);this.vertexTextures=0<this.maxVertexTextures;this.floatFragmentTextures=!!b.get(\"OES_texture_float\");this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;c=d(this.precision);c!==this.precision&&(console.warn(\"THREE.WebGLRenderer:\",this.precision,\"not supported, using\",c,\"instead.\"),this.precision=c);this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!b.get(\"EXT_frag_depth\"))};\r\nTHREE.WebGLGeometries=function(a,b,c){function d(a){var h=a.target;a=f[h.id];null!==a.index&&e(a.index);var k=a.attributes,l;for(l in k)e(k[l]);h.removeEventListener(\"dispose\",d);delete f[h.id];l=b.get(h);l.wireframe&&e(l.wireframe);b.delete(h);h=b.get(a);h.wireframe&&e(h.wireframe);b.delete(a);c.memory.geometries--}function e(c){var d;d=c instanceof THREE.InterleavedBufferAttribute?b.get(c.data).__webglBuffer:b.get(c).__webglBuffer;void 0!==d&&(a.deleteBuffer(d),c instanceof THREE.InterleavedBufferAttribute?\r\nb.delete(c.data):b.delete(c))}var f={};this.get=function(a){var b=a.geometry;if(void 0!==f[b.id])return f[b.id];b.addEventListener(\"dispose\",d);var e;b instanceof THREE.BufferGeometry?e=b:b instanceof THREE.Geometry&&(void 0===b._bufferGeometry&&(b._bufferGeometry=(new THREE.BufferGeometry).setFromObject(a)),e=b._bufferGeometry);f[b.id]=e;c.memory.geometries++;return e}};\r\nTHREE.WebGLLights=function(){var a={};this.get=function(b){if(void 0!==a[b.id])return a[b.id];var c;switch(b.type){case \"DirectionalLight\":c={direction:new THREE.Vector3,color:new THREE.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case \"SpotLight\":c={position:new THREE.Vector3,direction:new THREE.Vector3,color:new THREE.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case \"PointLight\":c=\r\n{position:new THREE.Vector3,color:new THREE.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case \"HemisphereLight\":c={direction:new THREE.Vector3,skyColor:new THREE.Color,groundColor:new THREE.Color}}return a[b.id]=c}};\r\nTHREE.WebGLObjects=function(a,b,c){function d(c,d){var e=c instanceof THREE.InterleavedBufferAttribute?c.data:c,f=b.get(e);void 0===f.__webglBuffer?(f.__webglBuffer=a.createBuffer(),a.bindBuffer(d,f.__webglBuffer),a.bufferData(d,e.array,e.dynamic?a.DYNAMIC_DRAW:a.STATIC_DRAW),f.version=e.version):f.version!==e.version&&(a.bindBuffer(d,f.__webglBuffer),!1===e.dynamic||-1===e.updateRange.count?a.bufferSubData(d,0,e.array):0===e.updateRange.count?console.error(\"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.\"):\r\n(a.bufferSubData(d,e.updateRange.offset*e.array.BYTES_PER_ELEMENT,e.array.subarray(e.updateRange.offset,e.updateRange.offset+e.updateRange.count)),e.updateRange.count=0),f.version=e.version)}function e(a,b,c){if(b>c){var d=b;b=c;c=d}d=a[b];return void 0===d?(a[b]=[c],!0):-1===d.indexOf(c)?(d.push(c),!0):!1}var f=new THREE.WebGLGeometries(a,b,c);this.getAttributeBuffer=function(a){return a instanceof THREE.InterleavedBufferAttribute?b.get(a.data).__webglBuffer:b.get(a).__webglBuffer};this.getWireframeAttribute=\r\nfunction(c){var f=b.get(c);if(void 0!==f.wireframe)return f.wireframe;var k=[],l=c.index,n=c.attributes;c=n.position;if(null!==l)for(var n={},l=l.array,p=0,m=l.length;p<m;p+=3){var q=l[p+0],r=l[p+1],s=l[p+2];e(n,q,r)&&k.push(q,r);e(n,r,s)&&k.push(r,s);e(n,s,q)&&k.push(s,q)}else for(l=n.position.array,p=0,m=l.length/3-1;p<m;p+=3)q=p+0,r=p+1,s=p+2,k.push(q,r,r,s,s,q);k=new THREE.BufferAttribute(new (65535<c.count?Uint32Array:Uint16Array)(k),1);d(k,a.ELEMENT_ARRAY_BUFFER);return f.wireframe=k};this.update=\r\nfunction(b){var c=f.get(b);b.geometry instanceof THREE.Geometry&&c.updateFromObject(b);b=c.index;var e=c.attributes;null!==b&&d(b,a.ELEMENT_ARRAY_BUFFER);for(var l in e)d(e[l],a.ARRAY_BUFFER);b=c.morphAttributes;for(l in b)for(var e=b[l],n=0,p=e.length;n<p;n++)d(e[n],a.ARRAY_BUFFER);return c}};\r\nTHREE.WebGLProgram=function(){function a(a){switch(a){case THREE.LinearEncoding:return[\"Linear\",\"( value )\"];case THREE.sRGBEncoding:return[\"sRGB\",\"( value )\"];case THREE.RGBEEncoding:return[\"RGBE\",\"( value )\"];case THREE.RGBM7Encoding:return[\"RGBM\",\"( value, 7.0 )\"];case THREE.RGBM16Encoding:return[\"RGBM\",\"( value, 16.0 )\"];case THREE.RGBDEncoding:return[\"RGBD\",\"( value, 256.0 )\"];case THREE.GammaEncoding:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];default:throw Error(\"unsupported encoding: \"+\r\na);}}function b(b,c){var d=a(c);return\"vec4 \"+b+\"( vec4 value ) { return \"+d[0]+\"ToLinear\"+d[1]+\"; }\"}function c(b,c){var d=a(c);return\"vec4 \"+b+\"( vec4 value ) { return LinearTo\"+d[0]+d[1]+\"; }\"}function d(a,b){var c;switch(b){case THREE.LinearToneMapping:c=\"Linear\";break;case THREE.ReinhardToneMapping:c=\"Reinhard\";break;case THREE.Uncharted2ToneMapping:c=\"Uncharted2\";break;case THREE.CineonToneMapping:c=\"OptimizedCineon\";break;default:throw Error(\"unsupported toneMapping: \"+b);}return\"vec3 \"+a+\r\n\"( vec3 color ) { return \"+c+\"ToneMapping( color ); }\"}function e(a,b,c){a=a||{};return[a.derivatives||b.envMapCubeUV||b.bumpMap||b.normalMap||b.flatShading?\"#extension GL_OES_standard_derivatives : enable\":\"\",(a.fragDepth||b.logarithmicDepthBuffer)&&c.get(\"EXT_frag_depth\")?\"#extension GL_EXT_frag_depth : enable\":\"\",a.drawBuffers&&c.get(\"WEBGL_draw_buffers\")?\"#extension GL_EXT_draw_buffers : require\":\"\",(a.shaderTextureLOD||b.envMap)&&c.get(\"EXT_shader_texture_lod\")?\"#extension GL_EXT_shader_texture_lod : enable\":\r\n\"\"].filter(g).join(\"\\n\")}function f(a){var b=[],c;for(c in a){var d=a[c];!1!==d&&b.push(\"#define \"+c+\" \"+d)}return b.join(\"\\n\")}function g(a){return\"\"!==a}function h(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights)}function k(a){return a.replace(/#include +<([\\w\\d.]+)>/g,function(a,b){var c=THREE.ShaderChunk[b];if(void 0===c)throw Error(\"Can not resolve #include <\"+\r\nb+\">\");return k(c)})}function l(a){return a.replace(/for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g,function(a,b,c,d){a=\"\";for(b=parseInt(b);b<parseInt(c);b++)a+=d.replace(/\\[ i \\]/g,\"[ \"+b+\" ]\");return a})}var n=0;return function(a,m,q,r){var s=a.context,u=q.extensions,x=q.defines,v=q.__webglShader.vertexShader,C=q.__webglShader.fragmentShader,w=\"SHADOWMAP_TYPE_BASIC\";r.shadowMapType===THREE.PCFShadowMap?w=\"SHADOWMAP_TYPE_PCF\":r.shadowMapType===THREE.PCFSoftShadowMap&&(w=\"SHADOWMAP_TYPE_PCF_SOFT\");\r\nvar D=\"ENVMAP_TYPE_CUBE\",A=\"ENVMAP_MODE_REFLECTION\",y=\"ENVMAP_BLENDING_MULTIPLY\";if(r.envMap){switch(q.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:D=\"ENVMAP_TYPE_CUBE\";break;case THREE.CubeUVReflectionMapping:case THREE.CubeUVRefractionMapping:D=\"ENVMAP_TYPE_CUBE_UV\";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:D=\"ENVMAP_TYPE_EQUIREC\";break;case THREE.SphericalReflectionMapping:D=\"ENVMAP_TYPE_SPHERE\"}switch(q.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:A=\r\n\"ENVMAP_MODE_REFRACTION\"}switch(q.combine){case THREE.MultiplyOperation:y=\"ENVMAP_BLENDING_MULTIPLY\";break;case THREE.MixOperation:y=\"ENVMAP_BLENDING_MIX\";break;case THREE.AddOperation:y=\"ENVMAP_BLENDING_ADD\"}}var B=0<a.gammaFactor?a.gammaFactor:1,u=e(u,r,a.extensions),G=f(x),z=s.createProgram();q instanceof THREE.RawShaderMaterial?w=x=\"\":(x=[\"precision \"+r.precision+\" float;\",\"precision \"+r.precision+\" int;\",\"#define SHADER_NAME \"+q.__webglShader.name,G,r.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\r\n\"\",\"#define GAMMA_FACTOR \"+B,\"#define MAX_BONES \"+r.maxBones,r.map?\"#define USE_MAP\":\"\",r.envMap?\"#define USE_ENVMAP\":\"\",r.envMap?\"#define \"+A:\"\",r.lightMap?\"#define USE_LIGHTMAP\":\"\",r.aoMap?\"#define USE_AOMAP\":\"\",r.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",r.bumpMap?\"#define USE_BUMPMAP\":\"\",r.normalMap?\"#define USE_NORMALMAP\":\"\",r.displacementMap&&r.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",r.specularMap?\"#define USE_SPECULARMAP\":\"\",r.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",r.metalnessMap?\r\n\"#define USE_METALNESSMAP\":\"\",r.alphaMap?\"#define USE_ALPHAMAP\":\"\",r.vertexColors?\"#define USE_COLOR\":\"\",r.flatShading?\"#define FLAT_SHADED\":\"\",r.skinning?\"#define USE_SKINNING\":\"\",r.useVertexTexture?\"#define BONE_TEXTURE\":\"\",r.morphTargets?\"#define USE_MORPHTARGETS\":\"\",r.morphNormals&&!1===r.flatShading?\"#define USE_MORPHNORMALS\":\"\",r.doubleSided?\"#define DOUBLE_SIDED\":\"\",r.flipSided?\"#define FLIP_SIDED\":\"\",\"#define NUM_CLIPPING_PLANES \"+r.numClippingPlanes,r.shadowMapEnabled?\"#define USE_SHADOWMAP\":\r\n\"\",r.shadowMapEnabled?\"#define \"+w:\"\",r.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",r.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",r.logarithmicDepthBuffer&&a.extensions.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_COLOR\",\r\n\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\r\n\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(g).join(\"\\n\"),w=[u,\"precision \"+r.precision+\" float;\",\"precision \"+r.precision+\" int;\",\"#define SHADER_NAME \"+q.__webglShader.name,G,r.alphaTest?\"#define ALPHATEST \"+r.alphaTest:\"\",\"#define GAMMA_FACTOR \"+B,r.useFog&&r.fog?\"#define USE_FOG\":\"\",r.useFog&&r.fogExp?\"#define FOG_EXP2\":\"\",r.map?\"#define USE_MAP\":\"\",r.envMap?\"#define USE_ENVMAP\":\"\",r.envMap?\"#define \"+D:\"\",r.envMap?\r\n\"#define \"+A:\"\",r.envMap?\"#define \"+y:\"\",r.lightMap?\"#define USE_LIGHTMAP\":\"\",r.aoMap?\"#define USE_AOMAP\":\"\",r.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",r.bumpMap?\"#define USE_BUMPMAP\":\"\",r.normalMap?\"#define USE_NORMALMAP\":\"\",r.specularMap?\"#define USE_SPECULARMAP\":\"\",r.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",r.metalnessMap?\"#define USE_METALNESSMAP\":\"\",r.alphaMap?\"#define USE_ALPHAMAP\":\"\",r.vertexColors?\"#define USE_COLOR\":\"\",r.flatShading?\"#define FLAT_SHADED\":\"\",r.doubleSided?\"#define DOUBLE_SIDED\":\r\n\"\",r.flipSided?\"#define FLIP_SIDED\":\"\",\"#define NUM_CLIPPING_PLANES \"+r.numClippingPlanes,r.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",r.shadowMapEnabled?\"#define \"+w:\"\",r.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",r.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",r.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",r.logarithmicDepthBuffer&&a.extensions.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",r.envMap&&a.extensions.get(\"EXT_shader_texture_lod\")?\"#define TEXTURE_LOD_EXT\":\r\n\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",r.toneMapping!==THREE.NoToneMapping?\"#define TONE_MAPPING\":\"\",r.toneMapping!==THREE.NoToneMapping?THREE.ShaderChunk.tonemapping_pars_fragment:\"\",r.toneMapping!==THREE.NoToneMapping?d(\"toneMapping\",r.toneMapping):\"\",r.outputEncoding||r.mapEncoding||r.envMapEncoding||r.emissiveMapEncoding?THREE.ShaderChunk.encodings_pars_fragment:\"\",r.mapEncoding?b(\"mapTexelToLinear\",r.mapEncoding):\"\",r.envMapEncoding?b(\"envMapTexelToLinear\",r.envMapEncoding):\r\n\"\",r.emissiveMapEncoding?b(\"emissiveMapTexelToLinear\",r.emissiveMapEncoding):\"\",r.outputEncoding?c(\"linearToOutputTexel\",r.outputEncoding):\"\",r.depthPacking?\"#define DEPTH_PACKING \"+q.depthPacking:\"\",\"\\n\"].filter(g).join(\"\\n\"));v=k(v,r);v=h(v,r);C=k(C,r);C=h(C,r);!1===q instanceof THREE.ShaderMaterial&&(v=l(v),C=l(C));C=w+C;v=THREE.WebGLShader(s,s.VERTEX_SHADER,x+v);C=THREE.WebGLShader(s,s.FRAGMENT_SHADER,C);s.attachShader(z,v);s.attachShader(z,C);void 0!==q.index0AttributeName?s.bindAttribLocation(z,\r\n0,q.index0AttributeName):!0===r.morphTargets&&s.bindAttribLocation(z,0,\"position\");s.linkProgram(z);r=s.getProgramInfoLog(z);D=s.getShaderInfoLog(v);A=s.getShaderInfoLog(C);B=y=!0;if(!1===s.getProgramParameter(z,s.LINK_STATUS))y=!1,console.error(\"THREE.WebGLProgram: shader error: \",s.getError(),\"gl.VALIDATE_STATUS\",s.getProgramParameter(z,s.VALIDATE_STATUS),\"gl.getProgramInfoLog\",r,D,A);else if(\"\"!==r)console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",r);else if(\"\"===D||\"\"===A)B=!1;B&&(this.diagnostics=\r\n{runnable:y,material:q,programLog:r,vertexShader:{log:D,prefix:x},fragmentShader:{log:A,prefix:w}});s.deleteShader(v);s.deleteShader(C);var H;this.getUniforms=function(){void 0===H&&(H=new THREE.WebGLUniforms(s,z,a));return H};var M;this.getAttributes=function(){if(void 0===M){for(var a={},b=s.getProgramParameter(z,s.ACTIVE_ATTRIBUTES),c=0;c<b;c++){var d=s.getActiveAttrib(z,c).name;a[d]=s.getAttribLocation(z,d)}M=a}return M};this.destroy=function(){s.deleteProgram(z);this.program=void 0};Object.defineProperties(this,\r\n{uniforms:{get:function(){console.warn(\"THREE.WebGLProgram: .uniforms is now .getUniforms().\");return this.getUniforms()}},attributes:{get:function(){console.warn(\"THREE.WebGLProgram: .attributes is now .getAttributes().\");return this.getAttributes()}}});this.id=n++;this.code=m;this.usedTimes=1;this.program=z;this.vertexShader=v;this.fragmentShader=C;return this}}();\r\nTHREE.WebGLPrograms=function(a,b){function c(a,b){var c;a?a instanceof THREE.Texture?c=a.encoding:a instanceof THREE.WebGLRenderTarget&&(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),c=a.texture.encoding):c=THREE.LinearEncoding;c===THREE.LinearEncoding&&b&&(c=THREE.GammaEncoding);return c}var d=[],e={MeshDepthMaterial:\"depth\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",\r\nMeshPhongMaterial:\"phong\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\"},f=\"precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes depthPacking\".split(\" \");\r\nthis.getParameters=function(d,f,k,l,n){var p=e[d.type],m;b.floatVertexTextures&&n&&n.skeleton&&n.skeleton.useVertexTexture?m=1024:(m=Math.floor((b.maxVertexUniforms-20)/4),void 0!==n&&n instanceof THREE.SkinnedMesh&&(m=Math.min(n.skeleton.bones.length,m),m<n.skeleton.bones.length&&console.warn(\"WebGLRenderer: too many bones - \"+n.skeleton.bones.length+\", this GPU supports just \"+m+\" (try OpenGL instead of ANGLE)\")));var q=a.getPrecision();null!==d.precision&&(q=b.getMaxPrecision(d.precision),q!==\r\nd.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",d.precision,\"not supported, using\",q,\"instead.\"));var r=a.getCurrentRenderTarget();return{shaderID:p,precision:q,supportsVertexTextures:b.vertexTextures,outputEncoding:c(r?r.texture:null,a.gammaOutput),map:!!d.map,mapEncoding:c(d.map,a.gammaInput),envMap:!!d.envMap,envMapMode:d.envMap&&d.envMap.mapping,envMapEncoding:c(d.envMap,a.gammaInput),envMapCubeUV:!!d.envMap&&(d.envMap.mapping===THREE.CubeUVReflectionMapping||d.envMap.mapping===\r\nTHREE.CubeUVRefractionMapping),lightMap:!!d.lightMap,aoMap:!!d.aoMap,emissiveMap:!!d.emissiveMap,emissiveMapEncoding:c(d.emissiveMap,a.gammaInput),bumpMap:!!d.bumpMap,normalMap:!!d.normalMap,displacementMap:!!d.displacementMap,roughnessMap:!!d.roughnessMap,metalnessMap:!!d.metalnessMap,specularMap:!!d.specularMap,alphaMap:!!d.alphaMap,combine:d.combine,vertexColors:d.vertexColors,fog:k,useFog:d.fog,fogExp:k instanceof THREE.FogExp2,flatShading:d.shading===THREE.FlatShading,sizeAttenuation:d.sizeAttenuation,\r\nlogarithmicDepthBuffer:b.logarithmicDepthBuffer,skinning:d.skinning,maxBones:m,useVertexTexture:b.floatVertexTextures&&n&&n.skeleton&&n.skeleton.useVertexTexture,morphTargets:d.morphTargets,morphNormals:d.morphNormals,maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:f.directional.length,numPointLights:f.point.length,numSpotLights:f.spot.length,numHemiLights:f.hemi.length,numClippingPlanes:l,shadowMapEnabled:a.shadowMap.enabled&&n.receiveShadow&&0<f.shadows.length,shadowMapType:a.shadowMap.type,\r\ntoneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:d.premultipliedAlpha,alphaTest:d.alphaTest,doubleSided:d.side===THREE.DoubleSide,flipSided:d.side===THREE.BackSide,depthPacking:void 0!==d.depthPacking?d.depthPacking:!1}};this.getProgramCode=function(a,b){var c=[];b.shaderID?c.push(b.shaderID):(c.push(a.fragmentShader),c.push(a.vertexShader));if(void 0!==a.defines)for(var d in a.defines)c.push(d),c.push(a.defines[d]);for(d=0;d<f.length;d++)c.push(b[f[d]]);\r\nreturn c.join()};this.acquireProgram=function(b,c,e){for(var f,n=0,p=d.length;n<p;n++){var m=d[n];if(m.code===e){f=m;++f.usedTimes;break}}void 0===f&&(f=new THREE.WebGLProgram(a,e,b,c),d.push(f));return f};this.releaseProgram=function(a){if(0===--a.usedTimes){var b=d.indexOf(a);d[b]=d[d.length-1];d.pop();a.destroy()}};this.programs=d};\r\nTHREE.WebGLProperties=function(){var a={};this.get=function(b){b=b.uuid;var c=a[b];void 0===c&&(c={},a[b]=c);return c};this.delete=function(b){delete a[b.uuid]};this.clear=function(){a={}}};\r\nTHREE.WebGLShader=function(){function a(a){a=a.split(\"\\n\");for(var c=0;c<a.length;c++)a[c]=c+1+\": \"+a[c];return a.join(\"\\n\")}return function(b,c,d){var e=b.createShader(c);b.shaderSource(e,d);b.compileShader(e);!1===b.getShaderParameter(e,b.COMPILE_STATUS)&&console.error(\"THREE.WebGLShader: Shader couldn't compile.\");\"\"!==b.getShaderInfoLog(e)&&console.warn(\"THREE.WebGLShader: gl.getShaderInfoLog()\",c===b.VERTEX_SHADER?\"vertex\":\"fragment\",b.getShaderInfoLog(e),a(d));return e}}();\r\nTHREE.WebGLShadowMap=function(a,b,c){function d(b,c,d,e){var f=b.geometry,g=null,g=r,h=b.customDepthMaterial;d&&(g=s,h=b.customDistanceMaterial);h?g=h:(b=b instanceof THREE.SkinnedMesh&&c.skinning,h=0,void 0!==f.morphTargets&&0<f.morphTargets.length&&c.morphTargets&&(h|=1),b&&(h|=2),g=g[h]);a.localClippingEnabled&&!0===c.clipShadows&&0!==c.clippingPlanes.length&&(h=g.uuid,f=c.uuid,b=u[h],void 0===b&&(b={},u[h]=b),h=b[f],void 0===h&&(h=g.clone(),b[f]=h),g=h);g.visible=c.visible;g.wireframe=c.wireframe;\r\nf=c.side;z.renderSingleSided&&f==THREE.DoubleSide&&(f=THREE.FrontSide);z.renderReverseSided&&(f===THREE.FrontSide?f=THREE.BackSide:f===THREE.BackSide&&(f=THREE.FrontSide));g.side=f;g.clipShadows=c.clipShadows;g.clippingPlanes=c.clippingPlanes;g.wireframeLinewidth=c.wireframeLinewidth;g.linewidth=c.linewidth;d&&void 0!==g.uniforms.lightPos&&g.uniforms.lightPos.value.copy(e);return g}function e(a,b,c){if(!1!==a.visible){a.layers.test(b.layers)&&(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof\r\nTHREE.Points)&&a.castShadow&&(!1===a.frustumCulled||!0===h.intersectsObject(a))&&!0===a.material.visible&&(a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld),q.push(a));a=a.children;for(var d=0,f=a.length;d<f;d++)e(a[d],b,c)}}var f=a.context,g=a.state,h=new THREE.Frustum,k=new THREE.Matrix4,l=b.shadows,n=new THREE.Vector2,p=new THREE.Vector3,m=new THREE.Vector3,q=[],r=Array(4),s=Array(4),u={},x=[new THREE.Vector3(1,0,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,\r\n0,-1),new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1,0)],v=[new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1)],C=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4];b=new THREE.MeshDepthMaterial;b.depthPacking=THREE.RGBADepthPacking;b.clipping=!0;for(var w=THREE.ShaderLib.distanceRGBA,D=THREE.UniformsUtils.clone(w.uniforms),A=0;4!==A;++A){var y=\r\n0!==(A&1),B=0!==(A&2),G=b.clone();G.morphTargets=y;G.skinning=B;r[A]=G;y=new THREE.ShaderMaterial({defines:{USE_SHADOWMAP:\"\"},uniforms:D,vertexShader:w.vertexShader,fragmentShader:w.fragmentShader,morphTargets:y,skinning:B,clipping:!0});s[A]=y}var z=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=THREE.PCFShadowMap;this.renderSingleSided=this.renderReverseSided=!0;this.render=function(b,r){if(!1!==z.enabled&&(!1!==z.autoUpdate||!1!==z.needsUpdate)&&0!==l.length){g.clearColor(1,\r\n1,1,1);g.disable(f.BLEND);g.setDepthTest(!0);g.setScissorTest(!1);for(var s,u,w=0,y=l.length;w<y;w++){var A=l[w],L=A.shadow;if(void 0===L)console.warn(\"THREE.WebGLShadowMap:\",A,\"has no shadow.\");else{var P=L.camera;n.copy(L.mapSize);if(A instanceof THREE.PointLight){s=6;u=!0;var B=n.x,D=n.y;C[0].set(2*B,D,B,D);C[1].set(0,D,B,D);C[2].set(3*B,D,B,D);C[3].set(B,D,B,D);C[4].set(3*B,0,B,D);C[5].set(B,0,B,D);n.x*=4;n.y*=2}else s=1,u=!1;null===L.map&&(L.map=new THREE.WebGLRenderTarget(n.x,n.y,{minFilter:THREE.NearestFilter,\r\nmagFilter:THREE.NearestFilter,format:THREE.RGBAFormat}),P.updateProjectionMatrix());L instanceof THREE.SpotLightShadow&&L.update(A);B=L.map;L=L.matrix;m.setFromMatrixPosition(A.matrixWorld);P.position.copy(m);a.setRenderTarget(B);a.clear();for(B=0;B<s;B++){u?(p.copy(P.position),p.add(x[B]),P.up.copy(v[B]),P.lookAt(p),g.viewport(C[B])):(p.setFromMatrixPosition(A.target.matrixWorld),P.lookAt(p));P.updateMatrixWorld();P.matrixWorldInverse.getInverse(P.matrixWorld);L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,\r\n0,0,0,1);L.multiply(P.projectionMatrix);L.multiply(P.matrixWorldInverse);k.multiplyMatrices(P.projectionMatrix,P.matrixWorldInverse);h.setFromMatrix(k);q.length=0;e(b,r,P);for(var D=0,F=q.length;D<F;D++){var G=q[D],U=c.update(G),Y=G.material;if(Y instanceof THREE.MultiMaterial)for(var W=U.groups,Y=Y.materials,fa=0,la=W.length;fa<la;fa++){var ga=W[fa],Z=Y[ga.materialIndex];!0===Z.visible&&(Z=d(G,Z,u,m),a.renderBufferDirect(P,null,U,Z,G,ga))}else Z=d(G,Y,u,m),a.renderBufferDirect(P,null,U,Z,G,null)}}}}s=\r\na.getClearColor();u=a.getClearAlpha();a.setClearColor(s,u);z.needsUpdate=!1}}};\r\nTHREE.WebGLState=function(a,b,c){function d(b,c,d){var e=new Uint8Array(3),f=a.createTexture();a.bindTexture(b,f);a.texParameteri(b,a.TEXTURE_MIN_FILTER,a.NEAREST);a.texParameteri(b,a.TEXTURE_MAG_FILTER,a.NEAREST);for(b=0;b<d;b++)a.texImage2D(c+b,0,a.RGB,1,1,0,a.RGB,a.UNSIGNED_BYTE,e);return f}var e=this;this.buffers={color:new THREE.WebGLColorBuffer(a,this),depth:new THREE.WebGLDepthBuffer(a,this),stencil:new THREE.WebGLStencilBuffer(a,this)};var f=a.getParameter(a.MAX_VERTEX_ATTRIBS),g=new Uint8Array(f),\r\nh=new Uint8Array(f),k=new Uint8Array(f),l={},n=null,p=null,m=null,q=null,r=null,s=null,u=null,x=null,v=!1,C=null,w=null,D=null,A=null,y=null,B=null,G=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),z=null,H={},M=new THREE.Vector4,O=new THREE.Vector4,N={};N[a.TEXTURE_2D]=d(a.TEXTURE_2D,a.TEXTURE_2D,1);N[a.TEXTURE_CUBE_MAP]=d(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6);this.init=function(){this.clearColor(0,0,0,1);this.clearDepth(1);this.clearStencil(0);this.enable(a.DEPTH_TEST);this.setDepthFunc(THREE.LessEqualDepth);\r\nthis.setFlipSided(!1);this.setCullFace(THREE.CullFaceBack);this.enable(a.CULL_FACE);this.enable(a.BLEND);this.setBlending(THREE.NormalBlending)};this.initAttributes=function(){for(var a=0,b=g.length;a<b;a++)g[a]=0};this.enableAttribute=function(c){g[c]=1;0===h[c]&&(a.enableVertexAttribArray(c),h[c]=1);0!==k[c]&&(b.get(\"ANGLE_instanced_arrays\").vertexAttribDivisorANGLE(c,0),k[c]=0)};this.enableAttributeAndDivisor=function(b,c,d){g[b]=1;0===h[b]&&(a.enableVertexAttribArray(b),h[b]=1);k[b]!==c&&(d.vertexAttribDivisorANGLE(b,\r\nc),k[b]=c)};this.disableUnusedAttributes=function(){for(var b=0,c=h.length;b!==c;++b)h[b]!==g[b]&&(a.disableVertexAttribArray(b),h[b]=0)};this.enable=function(b){!0!==l[b]&&(a.enable(b),l[b]=!0)};this.disable=function(b){!1!==l[b]&&(a.disable(b),l[b]=!1)};this.getCompressedTextureFormats=function(){if(null===n&&(n=[],b.get(\"WEBGL_compressed_texture_pvrtc\")||b.get(\"WEBGL_compressed_texture_s3tc\")||b.get(\"WEBGL_compressed_texture_etc1\")))for(var c=a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d=0;d<\r\nc.length;d++)n.push(c[d]);return n};this.setBlending=function(b,d,e,f,g,h,k,l){if(b!==THREE.NoBlending){this.enable(a.BLEND);if(b!==p||l!==v)b===THREE.AdditiveBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE,a.ONE,a.ONE)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE)):b===THREE.SubtractiveBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),\r\na.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR)):b===THREE.MultiplyBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.SRC_COLOR,a.ZERO,a.SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR)):l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),\r\np=b,v=l;if(b===THREE.CustomBlending){g=g||d;h=h||e;k=k||f;if(d!==m||g!==s)a.blendEquationSeparate(c(d),c(g)),m=d,s=g;if(e!==q||f!==r||h!==u||k!==x)a.blendFuncSeparate(c(e),c(f),c(h),c(k)),q=e,r=f,u=h,x=k}else x=u=s=r=q=m=null}else this.disable(a.BLEND),p=b};this.setColorWrite=function(a){this.buffers.color.setMask(a)};this.setDepthTest=function(a){this.buffers.depth.setTest(a)};this.setDepthWrite=function(a){this.buffers.depth.setMask(a)};this.setDepthFunc=function(a){this.buffers.depth.setFunc(a)};\r\nthis.setStencilTest=function(a){this.buffers.stencil.setTest(a)};this.setStencilWrite=function(a){this.buffers.stencil.setMask(a)};this.setStencilFunc=function(a,b,c){this.buffers.stencil.setFunc(a,b,c)};this.setStencilOp=function(a,b,c){this.buffers.stencil.setOp(a,b,c)};this.setFlipSided=function(b){C!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),C=b)};this.setCullFace=function(b){b!==THREE.CullFaceNone?(this.enable(a.CULL_FACE),b!==w&&(b===THREE.CullFaceBack?a.cullFace(a.BACK):b===THREE.CullFaceFront?\r\na.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):this.disable(a.CULL_FACE);w=b};this.setLineWidth=function(b){b!==D&&(a.lineWidth(b),D=b)};this.setPolygonOffset=function(b,c,d){if(b){if(this.enable(a.POLYGON_OFFSET_FILL),A!==c||y!==d)a.polygonOffset(c,d),A=c,y=d}else this.disable(a.POLYGON_OFFSET_FILL)};this.getScissorTest=function(){return B};this.setScissorTest=function(b){(B=b)?this.enable(a.SCISSOR_TEST):this.disable(a.SCISSOR_TEST)};this.activeTexture=function(b){void 0===b&&(b=a.TEXTURE0+\r\nG-1);z!==b&&(a.activeTexture(b),z=b)};this.bindTexture=function(b,c){null===z&&e.activeTexture();var d=H[z];void 0===d&&(d={type:void 0,texture:void 0},H[z]=d);if(d.type!==b||d.texture!==c)a.bindTexture(b,c||N[b]),d.type=b,d.texture=c};this.compressedTexImage2D=function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(b){console.error(b)}};this.texImage2D=function(){try{a.texImage2D.apply(a,arguments)}catch(b){console.error(b)}};this.clearColor=function(a,b,c,d){this.buffers.color.setClear(a,\r\nb,c,d)};this.clearDepth=function(a){this.buffers.depth.setClear(a)};this.clearStencil=function(a){this.buffers.stencil.setClear(a)};this.scissor=function(b){!1===M.equals(b)&&(a.scissor(b.x,b.y,b.z,b.w),M.copy(b))};this.viewport=function(b){!1===O.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),O.copy(b))};this.reset=function(){for(var b=0;b<h.length;b++)1===h[b]&&(a.disableVertexAttribArray(b),h[b]=0);l={};z=n=null;H={};w=C=p=null;this.buffers.color.reset();this.buffers.depth.reset();this.buffers.stencil.reset()}};\r\nTHREE.WebGLColorBuffer=function(a,b){var c=!1,d=new THREE.Vector4,e=null,f=new THREE.Vector4;this.setMask=function(b){e===b||c||(a.colorMask(b,b,b,b),e=b)};this.setLocked=function(a){c=a};this.setClear=function(b,c,e,l){d.set(b,c,e,l);!1===f.equals(d)&&(a.clearColor(b,c,e,l),f.copy(d))};this.reset=function(){c=!1;e=null;f=new THREE.Vector4}};\r\nTHREE.WebGLDepthBuffer=function(a,b){var c=!1,d=null,e=null,f=null;this.setTest=function(c){c?b.enable(a.DEPTH_TEST):b.disable(a.DEPTH_TEST)};this.setMask=function(b){d===b||c||(a.depthMask(b),d=b)};this.setFunc=function(b){if(e!==b){if(b)switch(b){case THREE.NeverDepth:a.depthFunc(a.NEVER);break;case THREE.AlwaysDepth:a.depthFunc(a.ALWAYS);break;case THREE.LessDepth:a.depthFunc(a.LESS);break;case THREE.LessEqualDepth:a.depthFunc(a.LEQUAL);break;case THREE.EqualDepth:a.depthFunc(a.EQUAL);break;case THREE.GreaterEqualDepth:a.depthFunc(a.GEQUAL);\r\nbreak;case THREE.GreaterDepth:a.depthFunc(a.GREATER);break;case THREE.NotEqualDepth:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}else a.depthFunc(a.LEQUAL);e=b}};this.setLocked=function(a){c=a};this.setClear=function(b){f!==b&&(a.clearDepth(b),f=b)};this.reset=function(){c=!1;f=e=d=null}};\r\nTHREE.WebGLStencilBuffer=function(a,b){var c=!1,d=null,e=null,f=null,g=null,h=null,k=null,l=null,n=null;this.setTest=function(c){c?b.enable(a.STENCIL_TEST):b.disable(a.STENCIL_TEST)};this.setMask=function(b){d===b||c||(a.stencilMask(b),d=b)};this.setFunc=function(b,c,d){if(e!==b||f!==c||g!==d)a.stencilFunc(b,c,d),e=b,f=c,g=d};this.setOp=function(b,c,d){if(h!==b||k!==c||l!==d)a.stencilOp(b,c,d),h=b,k=c,l=d};this.setLocked=function(a){c=a};this.setClear=function(b){n!==b&&(a.clearStencil(b),n=b)};this.reset=\r\nfunction(){c=!1;n=l=k=h=g=f=e=d=null}};\r\nTHREE.WebGLUniforms=function(){var a=[],b=[],c=function(b,c,d){var e=b[0];if(0>=e||0<e)return b;var f=c*d,g=a[f];void 0===g&&(g=new Float32Array(f),a[f]=g);if(0!==c)for(e.toArray(g,0),e=1,f=0;e!==c;++e)f+=d,b[e].toArray(g,f);return g},d=function(a,c){var d=b[c];void 0===d&&(d=new Int32Array(c),b[c]=d);for(var e=0;e!==c;++e)d[e]=a.allocTextureUnit();return d},e=function(a,b){a.uniform1f(this.addr,b)},f=function(a,b){a.uniform1i(this.addr,b)},g=function(a,b){void 0===b.x?a.uniform2fv(this.addr,b):a.uniform2f(this.addr,\r\nb.x,b.y)},h=function(a,b){void 0!==b.x?a.uniform3f(this.addr,b.x,b.y,b.z):void 0!==b.r?a.uniform3f(this.addr,b.r,b.g,b.b):a.uniform3fv(this.addr,b)},k=function(a,b){void 0===b.x?a.uniform4fv(this.addr,b):a.uniform4f(this.addr,b.x,b.y,b.z,b.w)},l=function(a,b){a.uniformMatrix2fv(this.addr,!1,b.elements||b)},n=function(a,b){a.uniformMatrix3fv(this.addr,!1,b.elements||b)},p=function(a,b){a.uniformMatrix4fv(this.addr,!1,b.elements||b)},m=function(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,\r\nd);b&&c.setTexture2D(b,d)},q=function(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,d);b&&c.setTextureCube(b,d)},r=function(a,b){a.uniform2iv(this.addr,b)},s=function(a,b){a.uniform3iv(this.addr,b)},u=function(a,b){a.uniform4iv(this.addr,b)},x=function(a){switch(a){case 5126:return e;case 35664:return g;case 35665:return h;case 35666:return k;case 35674:return l;case 35675:return n;case 35676:return p;case 35678:return m;case 35680:return q;case 5124:case 35670:return f;case 35667:case 35671:return r;\r\ncase 35668:case 35672:return s;case 35669:case 35673:return u}},v=function(a,b){a.uniform1fv(this.addr,b)},C=function(a,b){a.uniform1iv(this.addr,b)},w=function(a,b){a.uniform2fv(this.addr,c(b,this.size,2))},D=function(a,b){a.uniform3fv(this.addr,c(b,this.size,3))},A=function(a,b){a.uniform4fv(this.addr,c(b,this.size,4))},y=function(a,b){a.uniformMatrix2fv(this.addr,!1,c(b,this.size,4))},B=function(a,b){a.uniformMatrix3fv(this.addr,!1,c(b,this.size,9))},G=function(a,b){a.uniformMatrix4fv(this.addr,\r\n!1,c(b,this.size,16))},z=function(a,b,c){var e=b.length,f=d(c,e);a.uniform1iv(this.addr,f);for(a=0;a!==e;++a){var g=b[a];g&&c.setTexture2D(g,f[a])}},H=function(a,b,c){var e=b.length,f=d(c,e);a.uniform1iv(this.addr,f);for(a=0;a!==e;++a){var g=b[a];g&&c.setTextureCube(g,f[a])}},M=function(a){switch(a){case 5126:return v;case 35664:return w;case 35665:return D;case 35666:return A;case 35674:return y;case 35675:return B;case 35676:return G;case 35678:return z;case 35680:return H;case 5124:case 35670:return C;\r\ncase 35667:case 35671:return r;case 35668:case 35672:return s;case 35669:case 35673:return u}},O=function(a,b,c){this.id=a;this.addr=c;this.setValue=x(b.type)},N=function(a,b,c){this.id=a;this.addr=c;this.size=b.size;this.setValue=M(b.type)},E=function(a){this.id=a;this.seq=[];this.map={}};E.prototype.setValue=function(a,b){for(var c=this.seq,d=0,e=c.length;d!==e;++d){var f=c[d];f.setValue(a,b[f.id])}};var K=/([\\w\\d_]+)(\\])?(\\[|\\.)?/g,I=function(a,b,c){this.seq=[];this.map={};this.renderer=c;c=a.getProgramParameter(b,\r\na.ACTIVE_UNIFORMS);for(var d=0;d!==c;++d){var e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name),g=this,h=e.name,k=h.length;for(K.lastIndex=0;;){var m=K.exec(h),l=K.lastIndex,n=m[1],q=m[3];\"]\"===m[2]&&(n|=0);if(void 0===q||\"[\"===q&&l+2===k){h=g;e=void 0===q?new O(n,e,f):new N(n,e,f);h.seq.push(e);h.map[e.id]=e;break}else q=g.map[n],void 0===q&&(q=new E(n),n=g,g=q,n.seq.push(g),n.map[g.id]=g),g=q}}};I.prototype.setValue=function(a,b,c){b=this.map[b];void 0!==b&&b.setValue(a,c,this.renderer)};\r\nI.prototype.set=function(a,b,c){var d=this.map[c];void 0!==d&&d.setValue(a,b[c],this.renderer)};I.prototype.setOptional=function(a,b,c){b=b[c];void 0!==b&&this.setValue(a,c,b)};I.upload=function(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}};I.seqWithValue=function(a,b){for(var c=[],d=0,e=a.length;d!==e;++d){var f=a[d];f.id in b&&c.push(f)}return c};I.splitDynamic=function(a,b){for(var c=null,d=a.length,e=0,f=0;f!==d;++f){var g=a[f],h=\r\nb[g.id];h&&!0===h.dynamic?(null===c&&(c=[]),c.push(g)):(e<f&&(a[e]=g),++e)}e<d&&(a.length=e);return c};I.evalDynamic=function(a,b,c,d){for(var e=0,f=a.length;e!==f;++e){var g=b[a[e].id],h=g.onUpdateCallback;void 0!==h&&h.call(g,c,d)}};return I}();\r\nTHREE.LensFlarePlugin=function(a,b){var c,d,e,f,g,h,k,l,n,p,m=a.context,q=a.state,r,s,u,x,v,C;this.render=function(w,D,A){if(0!==b.length){w=new THREE.Vector3;var y=A.w/A.z,B=.5*A.z,G=.5*A.w,z=16/A.w,H=new THREE.Vector2(z*y,z),M=new THREE.Vector3(1,1,0),O=new THREE.Vector2(1,1),N=new THREE.Box2;N.min.set(0,0);N.max.set(A.z-16,A.w-16);if(void 0===x){var z=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),E=new Uint16Array([0,1,2,0,2,3]);r=m.createBuffer();s=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,\r\nr);m.bufferData(m.ARRAY_BUFFER,z,m.STATIC_DRAW);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,s);m.bufferData(m.ELEMENT_ARRAY_BUFFER,E,m.STATIC_DRAW);v=m.createTexture();C=m.createTexture();q.bindTexture(m.TEXTURE_2D,v);m.texImage2D(m.TEXTURE_2D,0,m.RGB,16,16,0,m.RGB,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,\r\nm.NEAREST);q.bindTexture(m.TEXTURE_2D,C);m.texImage2D(m.TEXTURE_2D,0,m.RGBA,16,16,0,m.RGBA,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);var z=u={vertexShader:\"uniform lowp int renderType;\\nuniform vec3 screenPosition;\\nuniform vec2 scale;\\nuniform float rotation;\\nuniform sampler2D occlusionMap;\\nattribute vec2 position;\\nattribute vec2 uv;\\nvarying vec2 vUV;\\nvarying float vVisibility;\\nvoid main() {\\nvUV = uv;\\nvec2 pos = position;\\nif ( renderType == 2 ) {\\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\nvVisibility =        visibility.r / 9.0;\\nvVisibility *= 1.0 - visibility.g / 9.0;\\nvVisibility *=       visibility.b / 9.0;\\nvVisibility *= 1.0 - visibility.a / 9.0;\\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\\n}\\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\n}\",\r\nfragmentShader:\"uniform lowp int renderType;\\nuniform sampler2D map;\\nuniform float opacity;\\nuniform vec3 color;\\nvarying vec2 vUV;\\nvarying float vVisibility;\\nvoid main() {\\nif ( renderType == 0 ) {\\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\\n} else if ( renderType == 1 ) {\\ngl_FragColor = texture2D( map, vUV );\\n} else {\\nvec4 texture = texture2D( map, vUV );\\ntexture.a *= opacity * vVisibility;\\ngl_FragColor = texture;\\ngl_FragColor.rgb *= color;\\n}\\n}\"},E=m.createProgram(),K=m.createShader(m.FRAGMENT_SHADER),\r\nI=m.createShader(m.VERTEX_SHADER),L=\"precision \"+a.getPrecision()+\" float;\\n\";m.shaderSource(K,L+z.fragmentShader);m.shaderSource(I,L+z.vertexShader);m.compileShader(K);m.compileShader(I);m.attachShader(E,K);m.attachShader(E,I);m.linkProgram(E);x=E;n=m.getAttribLocation(x,\"position\");p=m.getAttribLocation(x,\"uv\");c=m.getUniformLocation(x,\"renderType\");d=m.getUniformLocation(x,\"map\");e=m.getUniformLocation(x,\"occlusionMap\");f=m.getUniformLocation(x,\"opacity\");g=m.getUniformLocation(x,\"color\");h=m.getUniformLocation(x,\r\n\"scale\");k=m.getUniformLocation(x,\"rotation\");l=m.getUniformLocation(x,\"screenPosition\")}m.useProgram(x);q.initAttributes();q.enableAttribute(n);q.enableAttribute(p);q.disableUnusedAttributes();m.uniform1i(e,0);m.uniform1i(d,1);m.bindBuffer(m.ARRAY_BUFFER,r);m.vertexAttribPointer(n,2,m.FLOAT,!1,16,0);m.vertexAttribPointer(p,2,m.FLOAT,!1,16,8);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,s);q.disable(m.CULL_FACE);q.setDepthWrite(!1);E=0;for(K=b.length;E<K;E++)if(z=16/A.w,H.set(z*y,z),I=b[E],w.set(I.matrixWorld.elements[12],\r\nI.matrixWorld.elements[13],I.matrixWorld.elements[14]),w.applyMatrix4(D.matrixWorldInverse),w.applyProjection(D.projectionMatrix),M.copy(w),O.x=A.x+M.x*B+B-8,O.y=A.y+M.y*G+G-8,!0===N.containsPoint(O)){q.activeTexture(m.TEXTURE0);q.bindTexture(m.TEXTURE_2D,null);q.activeTexture(m.TEXTURE1);q.bindTexture(m.TEXTURE_2D,v);m.copyTexImage2D(m.TEXTURE_2D,0,m.RGB,O.x,O.y,16,16,0);m.uniform1i(c,0);m.uniform2f(h,H.x,H.y);m.uniform3f(l,M.x,M.y,M.z);q.disable(m.BLEND);q.enable(m.DEPTH_TEST);m.drawElements(m.TRIANGLES,\r\n6,m.UNSIGNED_SHORT,0);q.activeTexture(m.TEXTURE0);q.bindTexture(m.TEXTURE_2D,C);m.copyTexImage2D(m.TEXTURE_2D,0,m.RGBA,O.x,O.y,16,16,0);m.uniform1i(c,1);q.disable(m.DEPTH_TEST);q.activeTexture(m.TEXTURE1);q.bindTexture(m.TEXTURE_2D,v);m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0);I.positionScreen.copy(M);I.customUpdateCallback?I.customUpdateCallback(I):I.updateLensFlares();m.uniform1i(c,2);q.enable(m.BLEND);for(var L=0,P=I.lensFlares.length;L<P;L++){var Q=I.lensFlares[L];.001<Q.opacity&&.001<Q.scale&&\r\n(M.x=Q.x,M.y=Q.y,M.z=Q.z,z=Q.size*Q.scale/A.w,H.x=z*y,H.y=z,m.uniform3f(l,M.x,M.y,M.z),m.uniform2f(h,H.x,H.y),m.uniform1f(k,Q.rotation),m.uniform1f(f,Q.opacity),m.uniform3f(g,Q.color.r,Q.color.g,Q.color.b),q.setBlending(Q.blending,Q.blendEquation,Q.blendSrc,Q.blendDst),a.setTexture2D(Q.texture,1),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0))}}q.enable(m.CULL_FACE);q.enable(m.DEPTH_TEST);q.setDepthWrite(!0);a.resetGLState()}}};\r\nTHREE.SpritePlugin=function(a,b){var c,d,e,f,g,h,k,l,n,p,m,q,r,s,u,x,v;function C(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var w=a.context,D=a.state,A,y,B,G,z=new THREE.Vector3,H=new THREE.Quaternion,M=new THREE.Vector3;this.render=function(O,N){if(0!==b.length){if(void 0===B){var E=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),K=new Uint16Array([0,1,2,0,2,3]);A=w.createBuffer();y=w.createBuffer();w.bindBuffer(w.ARRAY_BUFFER,\r\nA);w.bufferData(w.ARRAY_BUFFER,E,w.STATIC_DRAW);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,y);w.bufferData(w.ELEMENT_ARRAY_BUFFER,K,w.STATIC_DRAW);var E=w.createProgram(),K=w.createShader(w.VERTEX_SHADER),I=w.createShader(w.FRAGMENT_SHADER);w.shaderSource(K,[\"precision \"+a.getPrecision()+\" float;\",\"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform float rotation;\\nuniform vec2 scale;\\nuniform vec2 uvOffset;\\nuniform vec2 uvScale;\\nattribute vec2 position;\\nattribute vec2 uv;\\nvarying vec2 vUV;\\nvoid main() {\\nvUV = uvOffset + uv * uvScale;\\nvec2 alignedPosition = position * scale;\\nvec2 rotatedPosition;\\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\nvec4 finalPosition;\\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\nfinalPosition.xy += rotatedPosition;\\nfinalPosition = projectionMatrix * finalPosition;\\ngl_Position = finalPosition;\\n}\"].join(\"\\n\"));\r\nw.shaderSource(I,[\"precision \"+a.getPrecision()+\" float;\",\"uniform vec3 color;\\nuniform sampler2D map;\\nuniform float opacity;\\nuniform int fogType;\\nuniform vec3 fogColor;\\nuniform float fogDensity;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform float alphaTest;\\nvarying vec2 vUV;\\nvoid main() {\\nvec4 texture = texture2D( map, vUV );\\nif ( texture.a < alphaTest ) discard;\\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\\nif ( fogType > 0 ) {\\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\nfloat fogFactor = 0.0;\\nif ( fogType == 1 ) {\\nfogFactor = smoothstep( fogNear, fogFar, depth );\\n} else {\\nconst float LOG2 = 1.442695;\\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\\n}\\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}\\n}\"].join(\"\\n\"));\r\nw.compileShader(K);w.compileShader(I);w.attachShader(E,K);w.attachShader(E,I);w.linkProgram(E);B=E;x=w.getAttribLocation(B,\"position\");v=w.getAttribLocation(B,\"uv\");c=w.getUniformLocation(B,\"uvOffset\");d=w.getUniformLocation(B,\"uvScale\");e=w.getUniformLocation(B,\"rotation\");f=w.getUniformLocation(B,\"scale\");g=w.getUniformLocation(B,\"color\");h=w.getUniformLocation(B,\"map\");k=w.getUniformLocation(B,\"opacity\");l=w.getUniformLocation(B,\"modelViewMatrix\");n=w.getUniformLocation(B,\"projectionMatrix\");p=\r\nw.getUniformLocation(B,\"fogType\");m=w.getUniformLocation(B,\"fogDensity\");q=w.getUniformLocation(B,\"fogNear\");r=w.getUniformLocation(B,\"fogFar\");s=w.getUniformLocation(B,\"fogColor\");u=w.getUniformLocation(B,\"alphaTest\");E=document.createElement(\"canvas\");E.width=8;E.height=8;K=E.getContext(\"2d\");K.fillStyle=\"white\";K.fillRect(0,0,8,8);G=new THREE.Texture(E);G.needsUpdate=!0}w.useProgram(B);D.initAttributes();D.enableAttribute(x);D.enableAttribute(v);D.disableUnusedAttributes();D.disable(w.CULL_FACE);\r\nD.enable(w.BLEND);w.bindBuffer(w.ARRAY_BUFFER,A);w.vertexAttribPointer(x,2,w.FLOAT,!1,16,0);w.vertexAttribPointer(v,2,w.FLOAT,!1,16,8);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,y);w.uniformMatrix4fv(n,!1,N.projectionMatrix.elements);D.activeTexture(w.TEXTURE0);w.uniform1i(h,0);K=E=0;(I=O.fog)?(w.uniform3f(s,I.color.r,I.color.g,I.color.b),I instanceof THREE.Fog?(w.uniform1f(q,I.near),w.uniform1f(r,I.far),w.uniform1i(p,1),K=E=1):I instanceof THREE.FogExp2&&(w.uniform1f(m,I.density),w.uniform1i(p,2),K=E=2)):\r\n(w.uniform1i(p,0),K=E=0);for(var I=0,L=b.length;I<L;I++){var P=b[I];P.modelViewMatrix.multiplyMatrices(N.matrixWorldInverse,P.matrixWorld);P.z=-P.modelViewMatrix.elements[14]}b.sort(C);for(var Q=[],I=0,L=b.length;I<L;I++){var P=b[I],R=P.material;w.uniform1f(u,R.alphaTest);w.uniformMatrix4fv(l,!1,P.modelViewMatrix.elements);P.matrixWorld.decompose(z,H,M);Q[0]=M.x;Q[1]=M.y;P=0;O.fog&&R.fog&&(P=K);E!==P&&(w.uniform1i(p,P),E=P);null!==R.map?(w.uniform2f(c,R.map.offset.x,R.map.offset.y),w.uniform2f(d,\r\nR.map.repeat.x,R.map.repeat.y)):(w.uniform2f(c,0,0),w.uniform2f(d,1,1));w.uniform1f(k,R.opacity);w.uniform3f(g,R.color.r,R.color.g,R.color.b);w.uniform1f(e,R.rotation);w.uniform2fv(f,Q);D.setBlending(R.blending,R.blendEquation,R.blendSrc,R.blendDst);D.setDepthTest(R.depthTest);D.setDepthWrite(R.depthWrite);R.map?a.setTexture2D(R.map,0):a.setTexture2D(G,0);w.drawElements(w.TRIANGLES,6,w.UNSIGNED_SHORT,0)}D.enable(w.CULL_FACE);a.resetGLState()}}};\r\nObject.assign(THREE,{Face4:function(a,b,c,d,e,f,g){console.warn(\"THREE.Face4 has been removed. A THREE.Face3 will be created instead.\");return new THREE.Face3(a,b,c,e,f,g)},LineStrip:0,LinePieces:1,MeshFaceMaterial:THREE.MultiMaterial,PointCloud:function(a,b){console.warn(\"THREE.PointCloud has been renamed to THREE.Points.\");return new THREE.Points(a,b)},Particle:THREE.Sprite,ParticleSystem:function(a,b){console.warn(\"THREE.ParticleSystem has been renamed to THREE.Points.\");return new THREE.Points(a,\r\nb)},PointCloudMaterial:function(a){console.warn(\"THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.\");return new THREE.PointsMaterial(a)},ParticleBasicMaterial:function(a){console.warn(\"THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.\");return new THREE.PointsMaterial(a)},ParticleSystemMaterial:function(a){console.warn(\"THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.\");return new THREE.PointsMaterial(a)},Vertex:function(a,b,c){console.warn(\"THREE.Vertex has been removed. Use THREE.Vector3 instead.\");\r\nreturn new THREE.Vector3(a,b,c)}});Object.assign(THREE.Box2.prototype,{empty:function(){console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\");return this.isEmpty()},isIntersectionBox:function(a){console.warn(\"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\");return this.intersectsBox(a)}});\r\nObject.assign(THREE.Box3.prototype,{empty:function(){console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\");return this.isEmpty()},isIntersectionBox:function(a){console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\");return this.intersectsBox(a)},isIntersectionSphere:function(a){console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\");return this.intersectsSphere(a)}});\r\nObject.assign(THREE.Matrix3.prototype,{multiplyVector3:function(a){console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\");return a.applyMatrix3(this)},multiplyVector3Array:function(a){console.warn(\"THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.\");return this.applyToVector3Array(a)}});\r\nObject.assign(THREE.Matrix4.prototype,{extractPosition:function(a){console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\");return this.copyPosition(a)},setRotationFromQuaternion:function(a){console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\");return this.makeRotationFromQuaternion(a)},multiplyVector3:function(a){console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.\");\r\nreturn a.applyProjection(this)},multiplyVector4:function(a){console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\");return a.applyMatrix4(this)},multiplyVector3Array:function(a){console.warn(\"THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.\");return this.applyToVector3Array(a)},rotateAxis:function(a){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\");\r\na.transformDirection(this)},crossVector:function(a){console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\");return a.applyMatrix4(this)},translate:function(a){console.error(\"THREE.Matrix4: .translate() has been removed.\")},rotateX:function(a){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},rotateY:function(a){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},rotateZ:function(a){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},\r\nrotateByAxis:function(a,b){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")}});Object.assign(THREE.Plane.prototype,{isIntersectionLine:function(a){console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\");return this.intersectsLine(a)}});Object.assign(THREE.Quaternion.prototype,{multiplyVector3:function(a){console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\");return a.applyQuaternion(this)}});\r\nObject.assign(THREE.Ray.prototype,{isIntersectionBox:function(a){console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\");return this.intersectsBox(a)},isIntersectionPlane:function(a){console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\");return this.intersectsPlane(a)},isIntersectionSphere:function(a){console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\");return this.intersectsSphere(a)}});\r\nObject.assign(THREE.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},setEulerFromQuaternion:function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},getPositionFromMatrix:function(a){console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\");return this.setFromMatrixPosition(a)},\r\ngetScaleFromMatrix:function(a){console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\");return this.setFromMatrixColumn(b,a)}});\r\nObject.assign(THREE.Object3D.prototype,{getChildByName:function(a){console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\");return this.getObjectByName(a)},renderDepth:function(a){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},translate:function(a,b){console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\");return this.translateOnAxis(b,a)}});\r\nObject.defineProperties(THREE.Object3D.prototype,{eulerOrder:{get:function(){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\");return this.rotation.order},set:function(a){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\");this.rotation.order=a}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(a){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}});\r\nObject.defineProperties(THREE.LOD.prototype,{objects:{get:function(){console.warn(\"THREE.LOD: .objects has been renamed to .levels.\");return this.levels}}});THREE.PerspectiveCamera.prototype.setLens=function(a,b){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\");void 0!==b&&(this.filmGauge=b);this.setFocalLength(a)};\r\nObject.defineProperties(THREE.Light.prototype,{onlyShadow:{set:function(a){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(a){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\");this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\");this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\");\r\nthis.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\");this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\");this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\");this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\");\r\nthis.shadow.camera.far=a}},shadowCameraVisible:{set:function(a){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(a){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\");this.shadow.bias=a}},shadowDarkness:{set:function(a){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(a){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\");\r\nthis.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\");this.shadow.mapSize.height=a}}});Object.defineProperties(THREE.BufferAttribute.prototype,{length:{get:function(){console.warn(\"THREE.BufferAttribute: .length has been deprecated. Please use .count.\");return this.array.length}}});\r\nObject.assign(THREE.BufferGeometry.prototype,{addIndex:function(a){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\");this.setIndex(a)},addDrawCall:function(a,b,c){void 0!==c&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\");console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\");this.addGroup(a,b)},clearDrawCalls:function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\");this.clearGroups()},\r\ncomputeTangents:function(){console.warn(\"THREE.BufferGeometry: .computeTangents() has been removed.\")},computeOffsets:function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")}});Object.defineProperties(THREE.BufferGeometry.prototype,{drawcalls:{get:function(){console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\");return this.groups}},offsets:{get:function(){console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\");return this.groups}}});\r\nObject.defineProperties(THREE.Material.prototype,{wrapAround:{get:function(){console.warn(\"THREE.\"+this.type+\": .wrapAround has been removed.\")},set:function(a){console.warn(\"THREE.\"+this.type+\": .wrapAround has been removed.\")}},wrapRGB:{get:function(){console.warn(\"THREE.\"+this.type+\": .wrapRGB has been removed.\");return new THREE.Color}}});\r\nObject.defineProperties(THREE.MeshPhongMaterial.prototype,{metal:{get:function(){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.\");return!1},set:function(a){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead\")}}});\r\nObject.defineProperties(THREE.ShaderMaterial.prototype,{derivatives:{get:function(){console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\");return this.extensions.derivatives},set:function(a){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\");this.extensions.derivatives=a}}});\r\nTHREE.EventDispatcher.prototype=Object.assign(Object.create({constructor:THREE.EventDispatcher,apply:function(a){console.warn(\"THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in.\");Object.assign(a,this)}}),THREE.EventDispatcher.prototype);\r\nObject.assign(THREE.WebGLRenderer.prototype,{supportsFloatTextures:function(){console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\");return this.extensions.get(\"OES_texture_float\")},supportsHalfFloatTextures:function(){console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\");return this.extensions.get(\"OES_texture_half_float\")},supportsStandardDerivatives:function(){console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\");\r\nreturn this.extensions.get(\"OES_standard_derivatives\")},supportsCompressedTextureS3TC:function(){console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\");return this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},supportsCompressedTexturePVRTC:function(){console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\");return this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},\r\nsupportsBlendMinMax:function(){console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\");return this.extensions.get(\"EXT_blend_minmax\")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},supportsInstancedArrays:function(){console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\");return this.extensions.get(\"ANGLE_instanced_arrays\")},enableScissorTest:function(a){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\");\r\nthis.setScissorTest(a)},initMaterial:function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},addPrePlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},addPostPlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},updateShadowMap:function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")}});\r\nObject.defineProperties(THREE.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\");this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\");this.shadowMap.type=a}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(a){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.\");\r\nthis.shadowMap.cullFace=a}}});Object.defineProperties(THREE.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?THREE.CullFaceFront:THREE.CullFaceBack},set:function(a){a=a!==THREE.CullFaceBack;console.warn(\"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \"+a+\".\");this.renderReverseSided=a}}});\r\nObject.defineProperties(THREE.WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\");return this.texture.wrapS},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\");this.texture.wrapS=a}},wrapT:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\");return this.texture.wrapT},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\");this.texture.wrapT=\r\na}},magFilter:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\");return this.texture.magFilter},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\");this.texture.magFilter=a}},minFilter:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\");return this.texture.minFilter},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\");this.texture.minFilter=\r\na}},anisotropy:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\");return this.texture.anisotropy},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\");this.texture.anisotropy=a}},offset:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\");return this.texture.offset},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\");this.texture.offset=\r\na}},repeat:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\");return this.texture.repeat},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\");this.texture.repeat=a}},format:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\");return this.texture.format},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\");this.texture.format=a}},type:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\");\r\nreturn this.texture.type},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\");this.texture.type=a}},generateMipmaps:{get:function(){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\");return this.texture.generateMipmaps},set:function(a){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\");this.texture.generateMipmaps=a}}});\r\nObject.assign(THREE.Audio.prototype,{load:function(a){console.warn(\"THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.\");var b=this;(new THREE.AudioLoader).load(a,function(a){b.setBuffer(a)});return this}});Object.assign(THREE.AudioAnalyser.prototype,{getData:function(a){console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\");return this.getFrequencyData()}});\r\nTHREE.GeometryUtils={merge:function(a,b,c){console.warn(\"THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.\");var d;b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,b=b.geometry);a.merge(b,d,c)},center:function(a){console.warn(\"THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.\");return a.center()}};\r\nTHREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){console.warn(\"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\");var e=new THREE.TextureLoader;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a},loadTextureCube:function(a,b,c,d){console.warn(\"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\");var e=new THREE.CubeTextureLoader;e.setCrossOrigin(this.crossOrigin);a=e.load(a,\r\nc,void 0,d);b&&(a.mapping=b);return a},loadCompressedTexture:function(){console.error(\"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\")},loadCompressedTextureCube:function(){console.error(\"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\")}};\r\nTHREE.Projector=function(){console.error(\"THREE.Projector has been moved to /examples/js/renderers/Projector.js.\");this.projectVector=function(a,b){console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");a.project(b)};this.unprojectVector=function(a,b){console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");a.unproject(b)};this.pickingRay=function(a,b){console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\")}};\r\nTHREE.CanvasRenderer=function(){console.error(\"THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js\");this.domElement=document.createElement(\"canvas\");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};\r\nTHREE.CurveUtils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=.5*(c-a);d=.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};\r\nTHREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Group,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};\r\nTHREE.ShapeUtils={area:function(a){for(var b=a.length,c=0,d=b-1,e=0;e<b;d=e++)c+=a[d].x*a[e].y-a[e].x*a[d].y;return.5*c},triangulate:function(){return function(a,b){var c=a.length;if(3>c)return null;var d=[],e=[],f=[],g,h,k;if(0<THREE.ShapeUtils.area(a))for(h=0;h<c;h++)e[h]=h;else for(h=0;h<c;h++)e[h]=c-1-h;var l=2*c;for(h=c-1;2<c;){if(0>=l--){console.warn(\"THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()\");break}g=h;c<=g&&(g=0);h=g+1;c<=h&&(h=0);k=h+1;c<=k&&(k=0);var n;a:{var p=\r\nn=void 0,m=void 0,q=void 0,r=void 0,s=void 0,u=void 0,x=void 0,v=void 0,p=a[e[g]].x,m=a[e[g]].y,q=a[e[h]].x,r=a[e[h]].y,s=a[e[k]].x,u=a[e[k]].y;if(Number.EPSILON>(q-p)*(u-m)-(r-m)*(s-p))n=!1;else{var C=void 0,w=void 0,D=void 0,A=void 0,y=void 0,B=void 0,G=void 0,z=void 0,H=void 0,M=void 0,H=z=G=v=x=void 0,C=s-q,w=u-r,D=p-s,A=m-u,y=q-p,B=r-m;for(n=0;n<c;n++)if(x=a[e[n]].x,v=a[e[n]].y,!(x===p&&v===m||x===q&&v===r||x===s&&v===u)&&(G=x-p,z=v-m,H=x-q,M=v-r,x-=s,v-=u,H=C*M-w*H,G=y*z-B*G,z=D*v-A*x,H>=-Number.EPSILON&&\r\nz>=-Number.EPSILON&&G>=-Number.EPSILON)){n=!1;break a}n=!0}}if(n){d.push([a[e[g]],a[e[h]],a[e[k]]]);f.push([e[g],e[h],e[k]]);g=h;for(k=h+1;k<c;g++,k++)e[g]=e[k];c--;l=2*c}}return b?f:d}}(),triangulateShape:function(a,b){function c(a,b,c){return a.x!==b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,l=e.y-d.y,n=a.x-d.x,p=a.y-d.y,y=h*k-g*l,B=h*n-g*p;if(Math.abs(y)>Number.EPSILON){if(0<y){if(0>B||B>\r\ny)return[];k=l*n-k*p;if(0>k||k>y)return[]}else{if(0<B||B<y)return[];k=l*n-k*p;if(0<k||k<y)return[]}if(0===k)return!f||0!==B&&B!==y?[a]:[];if(k===y)return!f||0!==B&&B!==y?[b]:[];if(0===B)return[d];if(B===y)return[e];f=k/y;return[{x:a.x+f*g,y:a.y+f*h}]}if(0!==B||l*n!==k*p)return[];h=0===g&&0===h;k=0===k&&0===l;if(h&&k)return a.x!==d.x||a.y!==d.y?[]:[a];if(h)return c(d,e,a)?[a]:[];if(k)return c(a,b,d)?[d]:[];0!==g?(a.x<b.x?(g=a,k=a.x,h=b,a=b.x):(g=b,k=b.x,h=a,a=a.x),d.x<e.x?(b=d,y=d.x,l=e,d=e.x):(b=\r\ne,y=e.x,l=d,d=d.x)):(a.y<b.y?(g=a,k=a.y,h=b,a=b.y):(g=b,k=b.y,h=a,a=a.y),d.y<e.y?(b=d,y=d.y,l=e,d=e.y):(b=e,y=e.y,l=d,d=d.y));return k<=y?a<y?[]:a===y?f?[]:[b]:a<=d?[b,h]:[b,l]:k>d?[]:k===d?f?[]:[g]:a<=d?[g,h]:[g,l]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return Math.abs(a)>Number.EPSILON?(b=g*c-d*b,0<a?0<=e&&0<=b:0<=e||0<=b):0<e}var f,g,h,k,l,n={};h=a.concat();f=0;for(g=b.length;f<g;f++)Array.prototype.push.apply(h,b[f]);f=0;for(g=\r\nh.length;f<g;f++)l=h[f].x+\":\"+h[f].y,void 0!==n[l]&&console.warn(\"THREE.Shape: Duplicate point\",l),n[l]=f;f=function(a,b){function c(a,b){var d=h.length-1,f=a-1;0>f&&(f=d);var g=a+1;g>d&&(g=0);d=e(h[a],h[f],h[g],k[b]);if(!d)return!1;d=k.length-1;f=b-1;0>f&&(f=d);g=b+1;g>d&&(g=0);return(d=e(k[b],k[f],k[g],h[a]))?!0:!1}function f(a,b){var c,e;for(c=0;c<h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0<e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e<l.length;e++)for(f=b[l[e]],\r\nh=0;h<f.length;h++)if(k=h+1,k%=f.length,k=d(a,c,f[h],f[k],!0),0<k.length)return!0;return!1}var h=a.concat(),k,l=[],n,p,A,y,B,G=[],z,H,M,O=0;for(n=b.length;O<n;O++)l.push(O);z=0;for(var N=2*l.length;0<l.length;){N--;if(0>N){console.log(\"Infinite Loop! Holes left:\"+l.length+\", Probably Hole outside Shape!\");break}for(p=z;p<h.length;p++){A=h[p];n=-1;for(O=0;O<l.length;O++)if(y=l[O],B=A.x+\":\"+A.y+\":\"+y,void 0===G[B]){k=b[y];for(H=0;H<k.length;H++)if(y=k[H],c(p,H)&&!f(A,y)&&!g(A,y)){n=H;l.splice(O,1);\r\nz=h.slice(0,p+1);y=h.slice(p);H=k.slice(n);M=k.slice(0,n+1);h=z.concat(H).concat(M).concat(y);z=p;break}if(0<=n)break;G[B]=!0}if(0<=n)break}}return h}(a,b);var p=THREE.ShapeUtils.triangulate(f,!1);f=0;for(g=p.length;f<g;f++)for(k=p[f],h=0;3>h;h++)l=k[h].x+\":\"+k[h].y,l=n[l],void 0!==l&&(k[h]=l);return p.concat()},isClockWise:function(a){return 0>THREE.ShapeUtils.area(a)},b2:function(){return function(a,b,c,d){var e=1-a;return e*e*b+2*(1-a)*a*c+a*a*d}}(),b3:function(){return function(a,b,c,d,e){var f=\r\n1-a,g=1-a;return f*f*f*b+3*g*g*a*c+3*(1-a)*a*a*d+a*a*a*e}}()};THREE.Curve=function(){};\r\nTHREE.Curve.prototype={constructor:THREE.Curve,getPoint:function(a){console.warn(\"THREE.Curve: Warning, getPoint() not implemented!\");return null},getPointAt:function(a){a=this.getUtoTmapping(a);return this.getPoint(a)},getPoints:function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c},getSpacedPoints:function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c},getLength:function(){var a=this.getLengths();return a[a.length-1]},getLengths:function(a){a||\r\n(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()},getUtoTmapping:function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-\r\n1,k;g<=h;)if(d=Math.floor(g+(h-g)/2),k=c[d]-f,0>k)g=d+1;else if(0<k)h=d-1;else{h=d;break}d=h;if(c[d]===f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)},getTangent:function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()},getTangentAt:function(a){a=this.getUtoTmapping(a);return this.getTangent(a)}};\r\nTHREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.autoClose=!1};\r\nTHREE.CurvePath.prototype=Object.assign(Object.create(THREE.Curve.prototype),{constructor:THREE.CurvePath,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))},getPoint:function(a){for(var b=a*this.getLength(),c=this.getCurveLengths(),d=0;d<c.length;){if(c[d]>=b)return a=this.curves[d],b=1-(c[d]-b)/a.getLength(),a.getPointAt(b);d++}return null},getLength:function(){var a=\r\nthis.getCurveLengths();return a[a.length-1]},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a},createPointsGeometry:function(a){a=this.getPoints(a);return this.createGeometry(a)},createSpacedPointsGeometry:function(a){a=this.getSpacedPoints(a);return this.createGeometry(a)},createGeometry:function(a){for(var b=new THREE.Geometry,\r\nc=0,d=a.length;c<d;c++){var e=a[c];b.vertices.push(new THREE.Vector3(e.x,e.y,e.z||0))}return b}});THREE.Font=function(a){this.data=a};\r\nObject.assign(THREE.Font.prototype,{generateShapes:function(a,b,c){void 0===b&&(b=100);void 0===c&&(c=4);var d=this.data;a=String(a).split(\"\");var e=b/d.resolution,f=0;b=[];for(var g=0;g<a.length;g++){var h;h=e;var k=f,l=d.glyphs[a[g]]||d.glyphs[\"?\"];if(l){var n=new THREE.Path,p=[],m=THREE.ShapeUtils.b2,q=THREE.ShapeUtils.b3,r=void 0,s=void 0,u=s=r=void 0,x=void 0,v=void 0,C=void 0,w=void 0,D=void 0,x=void 0;if(l.o)for(var A=l._cachedOutline||(l._cachedOutline=l.o.split(\" \")),y=0,B=A.length;y<B;)switch(A[y++]){case \"m\":r=\r\nA[y++]*h+k;s=A[y++]*h;n.moveTo(r,s);break;case \"l\":r=A[y++]*h+k;s=A[y++]*h;n.lineTo(r,s);break;case \"q\":r=A[y++]*h+k;s=A[y++]*h;v=A[y++]*h+k;C=A[y++]*h;n.quadraticCurveTo(v,C,r,s);if(x=p[p.length-1])for(var u=x.x,x=x.y,G=1;G<=c;G++){var z=G/c;m(z,u,v,r);m(z,x,C,s)}break;case \"b\":if(r=A[y++]*h+k,s=A[y++]*h,v=A[y++]*h+k,C=A[y++]*h,w=A[y++]*h+k,D=A[y++]*h,n.bezierCurveTo(v,C,w,D,r,s),x=p[p.length-1])for(u=x.x,x=x.y,G=1;G<=c;G++)z=G/c,q(z,u,v,w,r),q(z,x,C,D,s)}h={offset:l.ha*h,path:n}}else h=void 0;f+=\r\nh.offset;b.push(h.path)}c=[];d=0;for(a=b.length;d<a;d++)Array.prototype.push.apply(c,b[d].toShapes());return c}});THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};\r\nTHREE.Path.prototype=Object.assign(Object.create(THREE.CurvePath.prototype),{constructor:THREE.Path,fromPoints:function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)},moveTo:function(a,b){this.actions.push({action:\"moveTo\",args:[a,b]})},lineTo:function(a,b){var c=this.actions[this.actions.length-1].args,c=new THREE.LineCurve(new THREE.Vector2(c[c.length-2],c[c.length-1]),new THREE.Vector2(a,b));this.curves.push(c);this.actions.push({action:\"lineTo\",args:[a,\r\nb]})},quadraticCurveTo:function(a,b,c,d){var e=this.actions[this.actions.length-1].args,e=new THREE.QuadraticBezierCurve(new THREE.Vector2(e[e.length-2],e[e.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(e);this.actions.push({action:\"quadraticCurveTo\",args:[a,b,c,d]})},bezierCurveTo:function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args,g=new THREE.CubicBezierCurve(new THREE.Vector2(g[g.length-2],g[g.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),\r\nnew THREE.Vector2(e,f));this.curves.push(g);this.actions.push({action:\"bezierCurveTo\",args:[a,b,c,d,e,f]})},splineThru:function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:\"splineThru\",args:b})},arc:function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-\r\n1],c,d,e,f)},absarc:function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)},ellipse:function(a,b,c,d,e,f,g,h){var k=this.actions[this.actions.length-1].args;this.absellipse(a+k[k.length-2],b+k[k.length-1],c,d,e,f,g,h)},absellipse:function(a,b,c,d,e,f,g,h){var k=[a,b,c,d,e,f,g,h||0];a=new THREE.EllipseCurve(a,b,c,d,e,f,g,h);this.curves.push(a);a=a.getPoint(1);k.push(a.x);k.push(a.y);this.actions.push({action:\"ellipse\",args:k})},getSpacedPoints:function(a){a||(a=40);for(var b=[],c=0;c<a;c++)b.push(this.getPoint(c/\r\na));this.autoClose&&b.push(b[0]);return b},getPoints:function(a){a=a||12;for(var b=THREE.ShapeUtils.b2,c=THREE.ShapeUtils.b3,d=[],e,f,g,h,k,l,n,p,m,q,r=0,s=this.actions.length;r<s;r++){m=this.actions[r];var u=m.args;switch(m.action){case \"moveTo\":d.push(new THREE.Vector2(u[0],u[1]));break;case \"lineTo\":d.push(new THREE.Vector2(u[0],u[1]));break;case \"quadraticCurveTo\":e=u[2];f=u[3];k=u[0];l=u[1];0<d.length?(m=d[d.length-1],n=m.x,p=m.y):(m=this.actions[r-1].args,n=m[m.length-2],p=m[m.length-1]);for(u=\r\n1;u<=a;u++)q=u/a,m=b(q,n,k,e),q=b(q,p,l,f),d.push(new THREE.Vector2(m,q));break;case \"bezierCurveTo\":e=u[4];f=u[5];k=u[0];l=u[1];g=u[2];h=u[3];0<d.length?(m=d[d.length-1],n=m.x,p=m.y):(m=this.actions[r-1].args,n=m[m.length-2],p=m[m.length-1]);for(u=1;u<=a;u++)q=u/a,m=c(q,n,k,g,e),q=c(q,p,l,h,f),d.push(new THREE.Vector2(m,q));break;case \"splineThru\":m=this.actions[r-1].args;q=[new THREE.Vector2(m[m.length-2],m[m.length-1])];m=a*u[0].length;q=q.concat(u[0]);q=new THREE.SplineCurve(q);for(u=1;u<=m;u++)d.push(q.getPointAt(u/\r\nm));break;case \"arc\":e=u[0];f=u[1];l=u[2];g=u[3];m=u[4];k=!!u[5];n=m-g;p=2*a;for(u=1;u<=p;u++)q=u/p,k||(q=1-q),q=g+q*n,m=e+l*Math.cos(q),q=f+l*Math.sin(q),d.push(new THREE.Vector2(m,q));break;case \"ellipse\":e=u[0];f=u[1];l=u[2];h=u[3];g=u[4];m=u[5];k=!!u[6];var x=u[7];n=m-g;p=2*a;var v,C;0!==x&&(v=Math.cos(x),C=Math.sin(x));for(u=1;u<=p;u++){q=u/p;k||(q=1-q);q=g+q*n;m=e+l*Math.cos(q);q=f+h*Math.sin(q);if(0!==x){var w=m;m=(w-e)*v-(q-f)*C+e;q=(w-e)*C+(q-f)*v+f}d.push(new THREE.Vector2(m,q))}}}a=d[d.length-\r\n1];Math.abs(a.x-d[0].x)<Number.EPSILON&&Math.abs(a.y-d[0].y)<Number.EPSILON&&d.splice(d.length-1,1);this.autoClose&&d.push(d[0]);return d},toShapes:function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c],f=new THREE.Shape;f.actions=e.actions;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,l=h.y-g.y;if(Math.abs(l)>Number.EPSILON){if(0>l&&(g=b[f],k=-k,h=b[e],l=-l),!(a.y<g.y||a.y>h.y))if(a.y===g.y){if(a.x===\r\ng.x)return!0}else{e=l*(a.x-g.x)-k*(a.y-g.y);if(0===e)return!0;0>e||(d=!d)}}else if(a.y===g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x))return!0}return d}var e=THREE.ShapeUtils.isClockWise,f=function(a){for(var b=[],c=new THREE.Path,d=0,e=a.length;d<e;d++){var f=a[d],g=f.args,f=f.action;\"moveTo\"===f&&0!==c.actions.length&&(b.push(c),c=new THREE.Path);c[f].apply(c,g)}0!==c.actions.length&&b.push(c);return b}(this.actions);if(0===f.length)return[];if(!0===b)return c(f);var g,h,k,l=[];if(1===f.length)return h=\r\nf[0],k=new THREE.Shape,k.actions=h.actions,k.curves=h.curves,l.push(k),l;var n=!e(f[0].getPoints()),n=a?!n:n;k=[];var p=[],m=[],q=0,r;p[q]=void 0;m[q]=[];for(var s=0,u=f.length;s<u;s++)h=f[s],r=h.getPoints(),g=e(r),(g=a?!g:g)?(!n&&p[q]&&q++,p[q]={s:new THREE.Shape,p:r},p[q].s.actions=h.actions,p[q].s.curves=h.curves,n&&q++,m[q]=[]):m[q].push({h:h,p:r[0]});if(!p[0])return c(f);if(1<p.length){s=!1;h=[];e=0;for(f=p.length;e<f;e++)k[e]=[];e=0;for(f=p.length;e<f;e++)for(g=m[e],n=0;n<g.length;n++){q=g[n];\r\nr=!0;for(u=0;u<p.length;u++)d(q.p,p[u].p)&&(e!==u&&h.push({froms:e,tos:u,hole:n}),r?(r=!1,k[u].push(q)):s=!0);r&&k[e].push(q)}0<h.length&&(s||(m=k))}s=0;for(e=p.length;s<e;s++)for(k=p[s].s,l.push(k),h=m[s],f=0,g=h.length;f<g;f++)k.holes.push(h[f].h);return l}});THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};\r\nTHREE.Shape.prototype=Object.assign(Object.create(THREE.Path.prototype),{constructor:THREE.Shape,extrude:function(a){return new THREE.ExtrudeGeometry(this,a)},makeGeometry:function(a){return new THREE.ShapeGeometry(this,a)},getPointsHoles:function(a){for(var b=[],c=0,d=this.holes.length;c<d;c++)b[c]=this.holes[c].getPoints(a);return b},extractAllPoints:function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},extractPoints:function(a){return this.extractAllPoints(a)}});\r\nTHREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.constructor=THREE.LineCurve;THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};\r\nTHREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve;THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b=THREE.ShapeUtils.b2;return new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y))};\r\nTHREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b=THREE.CurveUtils.tangentQuadraticBezier;return(new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y))).normalize()};THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve;\r\nTHREE.CubicBezierCurve.prototype.getPoint=function(a){var b=THREE.ShapeUtils.b3;return new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y))};THREE.CubicBezierCurve.prototype.getTangent=function(a){var b=THREE.CurveUtils.tangentCubicBezier;return(new THREE.Vector2(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y))).normalize()};THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};\r\nTHREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor=THREE.SplineCurve;THREE.SplineCurve.prototype.getPoint=function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0===c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=THREE.CurveUtils.interpolate;return new THREE.Vector2(c(d.x,e.x,f.x,b.x,a),c(d.y,e.y,f.y,b.y,a))};\r\nTHREE.EllipseCurve=function(a,b,c,d,e,f,g,h){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g;this.aRotation=h||0};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve;\r\nTHREE.EllipseCurve.prototype.getPoint=function(a){var b=this.aEndAngle-this.aStartAngle;0>b&&(b+=2*Math.PI);b>2*Math.PI&&(b-=2*Math.PI);b=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-b):this.aStartAngle+a*b;a=this.aX+this.xRadius*Math.cos(b);var c=this.aY+this.yRadius*Math.sin(b);if(0!==this.aRotation){var b=Math.cos(this.aRotation),d=Math.sin(this.aRotation),e=a;a=(e-this.aX)*b-(c-this.aY)*d+this.aX;c=(e-this.aX)*d+(c-this.aY)*b+this.aY}return new THREE.Vector2(a,c)};\r\nTHREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor=THREE.ArcCurve;THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});\r\nTHREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b=THREE.ShapeUtils.b2;return new THREE.Vector3(b(a,this.v0.x,this.v1.x,this.v2.x),b(a,this.v0.y,this.v1.y,this.v2.y),b(a,this.v0.z,this.v1.z,this.v2.z))});\r\nTHREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b=THREE.ShapeUtils.b3;return new THREE.Vector3(b(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y),b(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z))});\r\nTHREE.SplineCurve3=THREE.Curve.create(function(a){console.warn(\"THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3\");this.points=void 0==a?[]:a},function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0==c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x,e.x,f.x,b.x,a),c(d.y,e.y,f.y,b.y,a),c(d.z,e.z,f.z,b.z,a))});\r\nTHREE.CatmullRomCurve3=function(){function a(){}var b=new THREE.Vector3,c=new a,d=new a,e=new a;a.prototype.init=function(a,b,c,d){this.c0=a;this.c1=c;this.c2=-3*a+3*b-2*c-d;this.c3=2*a-2*b+c+d};a.prototype.initNonuniformCatmullRom=function(a,b,c,d,e,n,p){a=((b-a)/e-(c-a)/(e+n)+(c-b)/n)*n;d=((c-b)/n-(d-b)/(n+p)+(d-c)/p)*n;this.init(b,c,a,d)};a.prototype.initCatmullRom=function(a,b,c,d,e){this.init(b,c,e*(c-a),e*(d-b))};a.prototype.calc=function(a){var b=a*a;return this.c0+this.c1*a+this.c2*b+this.c3*\r\nb*a};return THREE.Curve.create(function(a){this.points=a||[];this.closed=!1},function(a){var g=this.points,h,k;k=g.length;2>k&&console.log(\"duh, you need at least 2 points\");a*=k-(this.closed?0:1);h=Math.floor(a);a-=h;this.closed?h+=0<h?0:(Math.floor(Math.abs(h)/g.length)+1)*g.length:0===a&&h===k-1&&(h=k-2,a=1);var l,n,p;this.closed||0<h?l=g[(h-1)%k]:(b.subVectors(g[0],g[1]).add(g[0]),l=b);n=g[h%k];p=g[(h+1)%k];this.closed||h+2<k?g=g[(h+2)%k]:(b.subVectors(g[k-1],g[k-2]).add(g[k-1]),g=b);if(void 0===\r\nthis.type||\"centripetal\"===this.type||\"chordal\"===this.type){var m=\"chordal\"===this.type?.5:.25;k=Math.pow(l.distanceToSquared(n),m);h=Math.pow(n.distanceToSquared(p),m);m=Math.pow(p.distanceToSquared(g),m);1E-4>h&&(h=1);1E-4>k&&(k=h);1E-4>m&&(m=h);c.initNonuniformCatmullRom(l.x,n.x,p.x,g.x,k,h,m);d.initNonuniformCatmullRom(l.y,n.y,p.y,g.y,k,h,m);e.initNonuniformCatmullRom(l.z,n.z,p.z,g.z,k,h,m)}else\"catmullrom\"===this.type&&(k=void 0!==this.tension?this.tension:.5,c.initCatmullRom(l.x,n.x,p.x,g.x,\r\nk),d.initCatmullRom(l.y,n.y,p.y,g.y,k),e.initCatmullRom(l.z,n.z,p.z,g.z,k));return new THREE.Vector3(c.calc(a),d.calc(a),e.calc(a))})}();THREE.ClosedSplineCurve3=function(a){console.warn(\"THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.\");THREE.CatmullRomCurve3.call(this,a);this.type=\"catmullrom\";this.closed=!0};THREE.ClosedSplineCurve3.prototype=Object.create(THREE.CatmullRomCurve3.prototype);\r\nTHREE.BoxGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type=\"BoxGeometry\";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.fromBufferGeometry(new THREE.BoxBufferGeometry(a,b,c,d,e,f));this.mergeVertices()};THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry;THREE.CubeGeometry=THREE.BoxGeometry;\r\nTHREE.BoxBufferGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,k,l,M,O){var N=f/l,E=g/M,K=f/2,I=g/2,L=k/2;g=l+1;for(var P=M+1,Q=f=0,R=new THREE.Vector3,F=0;F<P;F++)for(var da=F*E-I,U=0;U<g;U++)R[a]=(U*N-K)*d,R[b]=da*e,R[c]=L,p[r]=R.x,p[r+1]=R.y,p[r+2]=R.z,R[a]=0,R[b]=0,R[c]=0<k?1:-1,m[r]=R.x,m[r+1]=R.y,m[r+2]=R.z,q[s]=U/l,q[s+1]=1-F/M,r+=3,s+=2,f+=1;for(F=0;F<M;F++)for(U=0;U<l;U++)a=x+U+g*(F+1),b=x+(U+1)+g*(F+1),c=x+(U+1)+g*F,n[u]=x+U+g*F,n[u+1]=a,n[u+2]=c,n[u+3]=a,n[u+4]=b,n[u+5]=c,u+=6,\r\nQ+=6;h.addGroup(v,Q,O);v+=Q;x+=f}THREE.BufferGeometry.call(this);this.type=\"BoxBufferGeometry\";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};var h=this;d=Math.floor(d)||1;e=Math.floor(e)||1;f=Math.floor(f)||1;var k=function(a,b,c){a=0+(a+1)*(b+1)*2+(a+1)*(c+1)*2;return a+=(c+1)*(b+1)*2}(d,e,f),l=function(a,b,c){a=0+a*b*2+a*c*2;a+=c*b*2;return 6*a}(d,e,f),n=new (65535<l?Uint32Array:Uint16Array)(l),p=new Float32Array(3*k),m=new Float32Array(3*k),q=new Float32Array(2*\r\nk),r=0,s=0,u=0,x=0,v=0;g(\"z\",\"y\",\"x\",-1,-1,c,b,a,f,e,0);g(\"z\",\"y\",\"x\",1,-1,c,b,-a,f,e,1);g(\"x\",\"z\",\"y\",1,1,a,c,b,d,f,2);g(\"x\",\"z\",\"y\",1,-1,a,c,-b,d,f,3);g(\"x\",\"y\",\"z\",1,-1,a,b,c,d,e,4);g(\"x\",\"y\",\"z\",-1,-1,a,b,-c,d,e,5);this.setIndex(new THREE.BufferAttribute(n,1));this.addAttribute(\"position\",new THREE.BufferAttribute(p,3));this.addAttribute(\"normal\",new THREE.BufferAttribute(m,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(q,2))};THREE.BoxBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);\r\nTHREE.BoxBufferGeometry.prototype.constructor=THREE.BoxBufferGeometry;THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type=\"CircleGeometry\";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};this.fromBufferGeometry(new THREE.CircleBufferGeometry(a,b,c,d))};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry;\r\nTHREE.CircleBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type=\"CircleBufferGeometry\";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||50;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e=b+2,f=new Float32Array(3*e),g=new Float32Array(3*e),e=new Float32Array(2*e);g[2]=1;e[0]=.5;e[1]=.5;for(var h=0,k=3,l=2;h<=b;h++,k+=3,l+=2){var n=c+h/b*d;f[k]=a*Math.cos(n);f[k+1]=a*Math.sin(n);g[k+2]=1;e[l]=(f[k]/a+1)/2;e[l+1]=(f[k+1]/a+1)/2}c=\r\n[];for(k=1;k<=b;k++)c.push(k,k+1,0);this.setIndex(new THREE.BufferAttribute(new Uint16Array(c),1));this.addAttribute(\"position\",new THREE.BufferAttribute(f,3));this.addAttribute(\"normal\",new THREE.BufferAttribute(g,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(e,2));this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.CircleBufferGeometry.prototype.constructor=THREE.CircleBufferGeometry;\r\nTHREE.CylinderBufferGeometry=function(a,b,c,d,e,f,g,h){function k(c){var e,f,k,m=new THREE.Vector2,n=new THREE.Vector3,p=0,C=!0===c?a:b,N=!0===c?1:-1;f=x;for(e=1;e<=d;e++)r.setXYZ(x,0,w*N,0),s.setXYZ(x,0,N,0),m.x=.5,m.y=.5,u.setXY(x,m.x,m.y),x++;k=x;for(e=0;e<=d;e++){var E=e/d*h+g,K=Math.cos(E),E=Math.sin(E);n.x=C*E;n.y=w*N;n.z=C*K;r.setXYZ(x,n.x,n.y,n.z);s.setXYZ(x,0,N,0);m.x=.5*K+.5;m.y=.5*E*N+.5;u.setXY(x,m.x,m.y);x++}for(e=0;e<d;e++)m=f+e,n=k+e,!0===c?(q.setX(v,n),v++,q.setX(v,n+1)):(q.setX(v,\r\nn+1),v++,q.setX(v,n)),v++,q.setX(v,m),v++,p+=3;l.addGroup(D,p,!0===c?1:2);D+=p}THREE.BufferGeometry.call(this);this.type=\"CylinderBufferGeometry\";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};var l=this;a=void 0!==a?a:20;b=void 0!==b?b:20;c=void 0!==c?c:100;d=Math.floor(d)||8;e=Math.floor(e)||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var n=0;!1===f&&(0<a&&n++,0<b&&n++);var p=function(){var a=(d+1)*\r\n(e+1);!1===f&&(a+=(d+1)*n+d*n);return a}(),m=function(){var a=d*e*6;!1===f&&(a+=d*n*3);return a}(),q=new THREE.BufferAttribute(new (65535<m?Uint32Array:Uint16Array)(m),1),r=new THREE.BufferAttribute(new Float32Array(3*p),3),s=new THREE.BufferAttribute(new Float32Array(3*p),3),u=new THREE.BufferAttribute(new Float32Array(2*p),2),x=0,v=0,C=[],w=c/2,D=0;(function(){var f,k,m=new THREE.Vector3,n=new THREE.Vector3,p=0,H=(b-a)/c;for(k=0;k<=e;k++){var M=[],O=k/e,N=O*(b-a)+a;for(f=0;f<=d;f++){var E=f/d;n.x=\r\nN*Math.sin(E*h+g);n.y=-O*c+w;n.z=N*Math.cos(E*h+g);r.setXYZ(x,n.x,n.y,n.z);m.copy(n);if(0===a&&0===k||0===b&&k===e)m.x=Math.sin(E*h+g),m.z=Math.cos(E*h+g);m.setY(Math.sqrt(m.x*m.x+m.z*m.z)*H).normalize();s.setXYZ(x,m.x,m.y,m.z);u.setXY(x,E,1-O);M.push(x);x++}C.push(M)}for(f=0;f<d;f++)for(k=0;k<e;k++)m=C[k+1][f],n=C[k+1][f+1],H=C[k][f+1],q.setX(v,C[k][f]),v++,q.setX(v,m),v++,q.setX(v,H),v++,q.setX(v,m),v++,q.setX(v,n),v++,q.setX(v,H),v++,p+=6;l.addGroup(D,p,0);D+=p})();!1===f&&(0<a&&k(!0),0<b&&k(!1));\r\nthis.setIndex(q);this.addAttribute(\"position\",r);this.addAttribute(\"normal\",s);this.addAttribute(\"uv\",u)};THREE.CylinderBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.CylinderBufferGeometry.prototype.constructor=THREE.CylinderBufferGeometry;\r\nTHREE.CylinderGeometry=function(a,b,c,d,e,f,g,h){THREE.Geometry.call(this);this.type=\"CylinderGeometry\";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};this.fromBufferGeometry(new THREE.CylinderBufferGeometry(a,b,c,d,e,f,g,h));this.mergeVertices()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;\r\nTHREE.ConeBufferGeometry=function(a,b,c,d,e,f,g){THREE.CylinderBufferGeometry.call(this,0,a,b,c,d,e,f,g);this.type=\"ConeBufferGeometry\";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,thetaStart:f,thetaLength:g}};THREE.ConeBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.ConeBufferGeometry.prototype.constructor=THREE.ConeBufferGeometry;\r\nTHREE.ConeGeometry=function(a,b,c,d,e,f,g){THREE.CylinderGeometry.call(this,0,a,b,c,d,e,f,g);this.type=\"ConeGeometry\";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}};THREE.ConeGeometry.prototype=Object.create(THREE.CylinderGeometry.prototype);THREE.ConeGeometry.prototype.constructor=THREE.ConeGeometry;\r\nTHREE.EdgesGeometry=function(a,b){function c(a,b){return a-b}THREE.BufferGeometry.call(this);var d=Math.cos(THREE.Math.DEG2RAD*(void 0!==b?b:1)),e=[0,0],f={},g=[\"a\",\"b\",\"c\"],h;a instanceof THREE.BufferGeometry?(h=new THREE.Geometry,h.fromBufferGeometry(a)):h=a.clone();h.mergeVertices();h.computeFaceNormals();var k=h.vertices;h=h.faces;for(var l=0,n=h.length;l<n;l++)for(var p=h[l],m=0;3>m;m++){e[0]=p[g[m]];e[1]=p[g[(m+1)%3]];e.sort(c);var q=e.toString();void 0===f[q]?f[q]={vert1:e[0],vert2:e[1],face1:l,\r\nface2:void 0}:f[q].face2=l}e=[];for(q in f)if(g=f[q],void 0===g.face2||h[g.face1].normal.dot(h[g.face2].normal)<=d)l=k[g.vert1],e.push(l.x),e.push(l.y),e.push(l.z),l=k[g.vert2],e.push(l.x),e.push(l.y),e.push(l.z);this.addAttribute(\"position\",new THREE.BufferAttribute(new Float32Array(e),3))};THREE.EdgesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry;\r\nTHREE.ExtrudeGeometry=function(a,b){\"undefined\"!==typeof a&&(THREE.Geometry.call(this),this.type=\"ExtrudeGeometry\",a=Array.isArray(a)?a:[a],this.addShapeList(a,b),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry;THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};\r\nTHREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||console.error(\"THREE.ExtrudeGeometry: vec does not exist\");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=1,d=a.x-b.x,e=a.y-b.y,f=c.x-a.x,g=c.y-a.y,h=d*d+e*e;if(Math.abs(d*g-e*f)>Number.EPSILON){var k=Math.sqrt(h),l=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;f=((c.x-g/l-h)*g-(c.y+f/l-b)*f)/(d*g-e*f);c=h+d*f-a.x;a=b+e*f-a.y;d=c*c+a*a;if(2>=d)return new THREE.Vector2(c,a);d=Math.sqrt(d/2)}else a=!1,d>Number.EPSILON?\r\nf>Number.EPSILON&&(a=!0):d<-Number.EPSILON?f<-Number.EPSILON&&(a=!0):Math.sign(e)===Math.sign(g)&&(a=!0),a?(c=-e,a=d,d=Math.sqrt(h)):(c=d,a=e,d=Math.sqrt(h/2));return new THREE.Vector2(c/d,a/d)}function e(a,b){var c,d;for(F=a.length;0<=--F;){c=F;d=F-1;0>d&&(d=a.length-1);for(var e=0,f=q+2*n,e=0;e<f;e++){var g=P*e,h=P*(e+1),k=b+c+g,g=b+d+g,l=b+d+h,h=b+c+h,k=k+z,g=g+z,l=l+z,h=h+z;G.faces.push(new THREE.Face3(k,g,h,null,null,1));G.faces.push(new THREE.Face3(g,l,h,null,null,1));k=x.generateSideWallUV(G,\r\nk,g,l,h);G.faceVertexUvs[0].push([k[0],k[1],k[3]]);G.faceVertexUvs[0].push([k[1],k[2],k[3]])}}}function f(a,b,c){G.vertices.push(new THREE.Vector3(a,b,c))}function g(a,b,c){a+=z;b+=z;c+=z;G.faces.push(new THREE.Face3(a,b,c,null,null,0));a=x.generateTopUV(G,a,b,c);G.faceVertexUvs[0].push(a)}var h=void 0!==b.amount?b.amount:100,k=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:k-2,n=void 0!==b.bevelSegments?b.bevelSegments:3,p=void 0!==b.bevelEnabled?b.bevelEnabled:!0,\r\nm=void 0!==b.curveSegments?b.curveSegments:12,q=void 0!==b.steps?b.steps:1,r=b.extrudePath,s,u=!1,x=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,v,C,w,D;r&&(s=r.getSpacedPoints(q),u=!0,p=!1,v=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(r,q,!1),C=new THREE.Vector3,w=new THREE.Vector3,D=new THREE.Vector3);p||(l=k=n=0);var A,y,B,G=this,z=this.vertices.length,r=a.extractPoints(m),m=r.shape,H=r.holes;if(r=!THREE.ShapeUtils.isClockWise(m)){m=m.reverse();\r\ny=0;for(B=H.length;y<B;y++)A=H[y],THREE.ShapeUtils.isClockWise(A)&&(H[y]=A.reverse());r=!1}var M=THREE.ShapeUtils.triangulateShape(m,H),O=m;y=0;for(B=H.length;y<B;y++)A=H[y],m=m.concat(A);var N,E,K,I,L,P=m.length,Q,R=M.length,r=[],F=0;K=O.length;N=K-1;for(E=F+1;F<K;F++,N++,E++)N===K&&(N=0),E===K&&(E=0),r[F]=d(O[F],O[N],O[E]);var da=[],U,Y=r.concat();y=0;for(B=H.length;y<B;y++){A=H[y];U=[];F=0;K=A.length;N=K-1;for(E=F+1;F<K;F++,N++,E++)N===K&&(N=0),E===K&&(E=0),U[F]=d(A[F],A[N],A[E]);da.push(U);Y=\r\nY.concat(U)}for(N=0;N<n;N++){K=N/n;I=k*(1-K);E=l*Math.sin(K*Math.PI/2);F=0;for(K=O.length;F<K;F++)L=c(O[F],r[F],E),f(L.x,L.y,-I);y=0;for(B=H.length;y<B;y++)for(A=H[y],U=da[y],F=0,K=A.length;F<K;F++)L=c(A[F],U[F],E),f(L.x,L.y,-I)}E=l;for(F=0;F<P;F++)L=p?c(m[F],Y[F],E):m[F],u?(w.copy(v.normals[0]).multiplyScalar(L.x),C.copy(v.binormals[0]).multiplyScalar(L.y),D.copy(s[0]).add(w).add(C),f(D.x,D.y,D.z)):f(L.x,L.y,0);for(K=1;K<=q;K++)for(F=0;F<P;F++)L=p?c(m[F],Y[F],E):m[F],u?(w.copy(v.normals[K]).multiplyScalar(L.x),\r\nC.copy(v.binormals[K]).multiplyScalar(L.y),D.copy(s[K]).add(w).add(C),f(D.x,D.y,D.z)):f(L.x,L.y,h/q*K);for(N=n-1;0<=N;N--){K=N/n;I=k*(1-K);E=l*Math.sin(K*Math.PI/2);F=0;for(K=O.length;F<K;F++)L=c(O[F],r[F],E),f(L.x,L.y,h+I);y=0;for(B=H.length;y<B;y++)for(A=H[y],U=da[y],F=0,K=A.length;F<K;F++)L=c(A[F],U[F],E),u?f(L.x,L.y+s[q-1].y,s[q-1].x+I):f(L.x,L.y,h+I)}(function(){if(p){var a;a=0*P;for(F=0;F<R;F++)Q=M[F],g(Q[2]+a,Q[1]+a,Q[0]+a);a=q+2*n;a*=P;for(F=0;F<R;F++)Q=M[F],g(Q[0]+a,Q[1]+a,Q[2]+a)}else{for(F=\r\n0;F<R;F++)Q=M[F],g(Q[2],Q[1],Q[0]);for(F=0;F<R;F++)Q=M[F],g(Q[0]+P*q,Q[1]+P*q,Q[2]+P*q)}})();(function(){var a=0;e(O,a);a+=O.length;y=0;for(B=H.length;y<B;y++)A=H[y],e(A,a),a+=A.length})()};\r\nTHREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d){a=a.vertices;b=a[b];c=a[c];d=a[d];return[new THREE.Vector2(b.x,b.y),new THREE.Vector2(c.x,c.y),new THREE.Vector2(d.x,d.y)]},generateSideWallUV:function(a,b,c,d,e){a=a.vertices;b=a[b];c=a[c];d=a[d];e=a[e];return.01>Math.abs(b.y-c.y)?[new THREE.Vector2(b.x,1-b.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(d.x,1-d.z),new THREE.Vector2(e.x,1-e.z)]:[new THREE.Vector2(b.y,1-b.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(d.y,\r\n1-d.z),new THREE.Vector2(e.y,1-e.z)]}};THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);this.type=\"ShapeGeometry\";!1===Array.isArray(a)&&(a=[a]);this.addShapeList(a,b);this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};\r\nTHREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,h=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var k=e.shape,l=e.holes;if(!THREE.ShapeUtils.isClockWise(k))for(k=k.reverse(),e=0,f=l.length;e<f;e++)g=l[e],THREE.ShapeUtils.isClockWise(g)&&(l[e]=g.reverse());var n=THREE.ShapeUtils.triangulateShape(k,l);e=0;for(f=l.length;e<f;e++)g=l[e],k=k.concat(g);\r\nl=k.length;f=n.length;for(e=0;e<l;e++)g=k[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)l=n[e],k=l[0]+h,g=l[1]+h,l=l[2]+h,this.faces.push(new THREE.Face3(k,g,l,null,null,c)),this.faceVertexUvs[0].push(d.generateTopUV(this,k,g,l))};\r\nTHREE.LatheBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type=\"LatheBufferGeometry\";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=Math.floor(b)||12;c=c||0;d=d||2*Math.PI;d=THREE.Math.clamp(d,0,2*Math.PI);for(var e=(b+1)*a.length,f=b*a.length*6,g=new THREE.BufferAttribute(new (65535<f?Uint32Array:Uint16Array)(f),1),h=new THREE.BufferAttribute(new Float32Array(3*e),3),k=new THREE.BufferAttribute(new Float32Array(2*e),2),l=0,n=0,p=1/b,m=new THREE.Vector3,q=new THREE.Vector2,\r\ne=0;e<=b;e++)for(var f=c+e*p*d,r=Math.sin(f),s=Math.cos(f),f=0;f<=a.length-1;f++)m.x=a[f].x*r,m.y=a[f].y,m.z=a[f].x*s,h.setXYZ(l,m.x,m.y,m.z),q.x=e/b,q.y=f/(a.length-1),k.setXY(l,q.x,q.y),l++;for(e=0;e<b;e++)for(f=0;f<a.length-1;f++)c=f+e*a.length,l=c+a.length,p=c+a.length+1,m=c+1,g.setX(n,c),n++,g.setX(n,l),n++,g.setX(n,m),n++,g.setX(n,l),n++,g.setX(n,p),n++,g.setX(n,m),n++;this.setIndex(g);this.addAttribute(\"position\",h);this.addAttribute(\"uv\",k);this.computeVertexNormals();if(d===2*Math.PI)for(d=\r\nthis.attributes.normal.array,g=new THREE.Vector3,h=new THREE.Vector3,k=new THREE.Vector3,c=b*a.length*3,f=e=0;e<a.length;e++,f+=3)g.x=d[f+0],g.y=d[f+1],g.z=d[f+2],h.x=d[c+f+0],h.y=d[c+f+1],h.z=d[c+f+2],k.addVectors(g,h).normalize(),d[f+0]=d[c+f+0]=k.x,d[f+1]=d[c+f+1]=k.y,d[f+2]=d[c+f+2]=k.z};THREE.LatheBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.LatheBufferGeometry.prototype.constructor=THREE.LatheBufferGeometry;\r\nTHREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type=\"LatheGeometry\";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};this.fromBufferGeometry(new THREE.LatheBufferGeometry(a,b,c,d));this.mergeVertices()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry;\r\nTHREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type=\"PlaneGeometry\";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a,b,c,d))};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;\r\nTHREE.PlaneBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type=\"PlaneBufferGeometry\";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};var e=a/2,f=b/2;c=Math.floor(c)||1;d=Math.floor(d)||1;var g=c+1,h=d+1,k=a/c,l=b/d;b=new Float32Array(g*h*3);a=new Float32Array(g*h*3);for(var n=new Float32Array(g*h*2),p=0,m=0,q=0;q<h;q++)for(var r=q*l-f,s=0;s<g;s++)b[p]=s*k-e,b[p+1]=-r,a[p+2]=1,n[m]=s/c,n[m+1]=1-q/d,p+=3,m+=2;p=0;e=new (65535<b.length/3?Uint32Array:Uint16Array)(c*\r\nd*6);for(q=0;q<d;q++)for(s=0;s<c;s++)f=s+g*(q+1),h=s+1+g*(q+1),k=s+1+g*q,e[p]=s+g*q,e[p+1]=f,e[p+2]=k,e[p+3]=f,e[p+4]=h,e[p+5]=k,p+=6;this.setIndex(new THREE.BufferAttribute(e,1));this.addAttribute(\"position\",new THREE.BufferAttribute(b,3));this.addAttribute(\"normal\",new THREE.BufferAttribute(a,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(n,2))};THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry;\r\nTHREE.RingBufferGeometry=function(a,b,c,d,e,f){THREE.BufferGeometry.call(this);this.type=\"RingBufferGeometry\";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};a=a||20;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):1;var g=(c+1)*(d+1),h=c*d*6,h=new THREE.BufferAttribute(new (65535<h?Uint32Array:Uint16Array)(h),1),k=new THREE.BufferAttribute(new Float32Array(3*g),3),l=new THREE.BufferAttribute(new Float32Array(3*\r\ng),3),g=new THREE.BufferAttribute(new Float32Array(2*g),2),n=0,p=0,m,q=a,r=(b-a)/d,s=new THREE.Vector3,u=new THREE.Vector2,x;for(a=0;a<=d;a++){for(x=0;x<=c;x++)m=e+x/c*f,s.x=q*Math.cos(m),s.y=q*Math.sin(m),k.setXYZ(n,s.x,s.y,s.z),l.setXYZ(n,0,0,1),u.x=(s.x/b+1)/2,u.y=(s.y/b+1)/2,g.setXY(n,u.x,u.y),n++;q+=r}for(a=0;a<d;a++)for(b=a*(c+1),x=0;x<c;x++)e=m=x+b,f=m+c+1,n=m+c+2,m+=1,h.setX(p,e),p++,h.setX(p,f),p++,h.setX(p,n),p++,h.setX(p,e),p++,h.setX(p,n),p++,h.setX(p,m),p++;this.setIndex(h);this.addAttribute(\"position\",\r\nk);this.addAttribute(\"normal\",l);this.addAttribute(\"uv\",g)};THREE.RingBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.RingBufferGeometry.prototype.constructor=THREE.RingBufferGeometry;THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type=\"RingGeometry\";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};this.fromBufferGeometry(new THREE.RingBufferGeometry(a,b,c,d,e,f))};\r\nTHREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor=THREE.RingGeometry;THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.type=\"SphereGeometry\";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};this.fromBufferGeometry(new THREE.SphereBufferGeometry(a,b,c,d,e,f,g))};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);\r\nTHREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry;\r\nTHREE.SphereBufferGeometry=function(a,b,c,d,e,f,g){THREE.BufferGeometry.call(this);this.type=\"SphereBufferGeometry\";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||50;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;for(var h=f+g,k=(b+1)*(c+1),l=new THREE.BufferAttribute(new Float32Array(3*k),3),n=new THREE.BufferAttribute(new Float32Array(3*\r\nk),3),k=new THREE.BufferAttribute(new Float32Array(2*k),2),p=0,m=[],q=new THREE.Vector3,r=0;r<=c;r++){for(var s=[],u=r/c,x=0;x<=b;x++){var v=x/b,C=-a*Math.cos(d+v*e)*Math.sin(f+u*g),w=a*Math.cos(f+u*g),D=a*Math.sin(d+v*e)*Math.sin(f+u*g);q.set(C,w,D).normalize();l.setXYZ(p,C,w,D);n.setXYZ(p,q.x,q.y,q.z);k.setXY(p,v,1-u);s.push(p);p++}m.push(s)}d=[];for(r=0;r<c;r++)for(x=0;x<b;x++)e=m[r][x+1],g=m[r][x],p=m[r+1][x],q=m[r+1][x+1],(0!==r||0<f)&&d.push(e,g,q),(r!==c-1||h<Math.PI)&&d.push(g,p,q);this.setIndex(new (65535<\r\nl.count?THREE.Uint32Attribute:THREE.Uint16Attribute)(d,1));this.addAttribute(\"position\",l);this.addAttribute(\"normal\",n);this.addAttribute(\"uv\",k);this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.SphereBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.SphereBufferGeometry.prototype.constructor=THREE.SphereBufferGeometry;\r\nTHREE.TextGeometry=function(a,b){b=b||{};var c=b.font;if(!1===c instanceof THREE.Font)return console.error(\"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"),new THREE.Geometry;c=c.generateShapes(a,b.size,b.curveSegments);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b);this.type=\"TextGeometry\"};\r\nTHREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);THREE.TextGeometry.prototype.constructor=THREE.TextGeometry;\r\nTHREE.TorusBufferGeometry=function(a,b,c,d,e){THREE.BufferGeometry.call(this);this.type=\"TorusBufferGeometry\";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||100;b=b||40;c=Math.floor(c)||8;d=Math.floor(d)||6;e=e||2*Math.PI;var f=(c+1)*(d+1),g=c*d*6,g=new (65535<g?Uint32Array:Uint16Array)(g),h=new Float32Array(3*f),k=new Float32Array(3*f),f=new Float32Array(2*f),l=0,n=0,p=0,m=new THREE.Vector3,q=new THREE.Vector3,r=new THREE.Vector3,s,u;for(s=0;s<=c;s++)for(u=0;u<=d;u++){var x=\r\nu/d*e,v=s/c*Math.PI*2;q.x=(a+b*Math.cos(v))*Math.cos(x);q.y=(a+b*Math.cos(v))*Math.sin(x);q.z=b*Math.sin(v);h[l]=q.x;h[l+1]=q.y;h[l+2]=q.z;m.x=a*Math.cos(x);m.y=a*Math.sin(x);r.subVectors(q,m).normalize();k[l]=r.x;k[l+1]=r.y;k[l+2]=r.z;f[n]=u/d;f[n+1]=s/c;l+=3;n+=2}for(s=1;s<=c;s++)for(u=1;u<=d;u++)a=(d+1)*(s-1)+u-1,b=(d+1)*(s-1)+u,e=(d+1)*s+u,g[p]=(d+1)*s+u-1,g[p+1]=a,g[p+2]=e,g[p+3]=a,g[p+4]=b,g[p+5]=e,p+=6;this.setIndex(new THREE.BufferAttribute(g,1));this.addAttribute(\"position\",new THREE.BufferAttribute(h,\r\n3));this.addAttribute(\"normal\",new THREE.BufferAttribute(k,3));this.addAttribute(\"uv\",new THREE.BufferAttribute(f,2))};THREE.TorusBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TorusBufferGeometry.prototype.constructor=THREE.TorusBufferGeometry;\r\nTHREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.type=\"TorusGeometry\";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};this.fromBufferGeometry(new THREE.TorusBufferGeometry(a,b,c,d,e))};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry;\r\nTHREE.TorusKnotBufferGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=c/b;b=Math.cos(a);e.x=d*(2+b)*.5*f;e.y=d*(2+b)*g*.5;e.z=d*Math.sin(a)*.5}THREE.BufferGeometry.call(this);this.type=\"TorusKnotBufferGeometry\";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};a=a||100;b=b||40;c=Math.floor(c)||64;d=Math.floor(d)||8;e=e||2;f=f||3;var h=(d+1)*(c+1),k=d*c*6,k=new THREE.BufferAttribute(new (65535<k?Uint32Array:Uint16Array)(k),1),l=new THREE.BufferAttribute(new Float32Array(3*\r\nh),3),n=new THREE.BufferAttribute(new Float32Array(3*h),3),h=new THREE.BufferAttribute(new Float32Array(2*h),2),p,m,q=0,r=0,s=new THREE.Vector3,u=new THREE.Vector3,x=new THREE.Vector2,v=new THREE.Vector3,C=new THREE.Vector3,w=new THREE.Vector3,D=new THREE.Vector3,A=new THREE.Vector3;for(p=0;p<=c;++p)for(m=p/c*e*Math.PI*2,g(m,e,f,a,v),g(m+.01,e,f,a,C),D.subVectors(C,v),A.addVectors(C,v),w.crossVectors(D,A),A.crossVectors(w,D),w.normalize(),A.normalize(),m=0;m<=d;++m){var y=m/d*Math.PI*2,B=-b*Math.cos(y),\r\ny=b*Math.sin(y);s.x=v.x+(B*A.x+y*w.x);s.y=v.y+(B*A.y+y*w.y);s.z=v.z+(B*A.z+y*w.z);l.setXYZ(q,s.x,s.y,s.z);u.subVectors(s,v).normalize();n.setXYZ(q,u.x,u.y,u.z);x.x=p/c;x.y=m/d;h.setXY(q,x.x,x.y);q++}for(m=1;m<=c;m++)for(p=1;p<=d;p++)a=(d+1)*m+(p-1),b=(d+1)*m+p,e=(d+1)*(m-1)+p,k.setX(r,(d+1)*(m-1)+(p-1)),r++,k.setX(r,a),r++,k.setX(r,e),r++,k.setX(r,a),r++,k.setX(r,b),r++,k.setX(r,e),r++;this.setIndex(k);this.addAttribute(\"position\",l);this.addAttribute(\"normal\",n);this.addAttribute(\"uv\",h)};\r\nTHREE.TorusKnotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TorusKnotBufferGeometry.prototype.constructor=THREE.TorusKnotBufferGeometry;\r\nTHREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.type=\"TorusKnotGeometry\";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};void 0!==g&&console.warn(\"THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.\");this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(a,b,c,d,e,f));this.mergeVertices()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);\r\nTHREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry;\r\nTHREE.TubeGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type=\"TubeGeometry\";this.parameters={path:a,segments:b,radius:c,radialSegments:d,closed:e,taper:f};b=b||64;c=c||1;d=d||8;e=e||!1;f=f||THREE.TubeGeometry.NoTaper;var g=[],h,k,l=b+1,n,p,m,q,r,s=new THREE.Vector3,u,x,v;u=new THREE.TubeGeometry.FrenetFrames(a,b,e);x=u.normals;v=u.binormals;this.tangents=u.tangents;this.normals=x;this.binormals=v;for(u=0;u<l;u++)for(g[u]=[],n=u/(l-1),r=a.getPointAt(n),h=x[u],k=v[u],m=c*f(n),n=0;n<\r\nd;n++)p=n/d*2*Math.PI,q=-m*Math.cos(p),p=m*Math.sin(p),s.copy(r),s.x+=q*h.x+p*k.x,s.y+=q*h.y+p*k.y,s.z+=q*h.z+p*k.z,g[u][n]=this.vertices.push(new THREE.Vector3(s.x,s.y,s.z))-1;for(u=0;u<b;u++)for(n=0;n<d;n++)f=e?(u+1)%b:u+1,l=(n+1)%d,a=g[u][n],c=g[f][n],f=g[f][l],l=g[u][l],s=new THREE.Vector2(u/b,n/d),x=new THREE.Vector2((u+1)/b,n/d),v=new THREE.Vector2((u+1)/b,(n+1)/d),h=new THREE.Vector2(u/b,(n+1)/d),this.faces.push(new THREE.Face3(a,c,l)),this.faceVertexUvs[0].push([s,x,h]),this.faces.push(new THREE.Face3(c,\r\nf,l)),this.faceVertexUvs[0].push([x.clone(),v,h.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry;THREE.TubeGeometry.NoTaper=function(a){return 1};THREE.TubeGeometry.SinusoidalTaper=function(a){return Math.sin(Math.PI*a)};\r\nTHREE.TubeGeometry.FrenetFrames=function(a,b,c){var d=new THREE.Vector3,e=[],f=[],g=[],h=new THREE.Vector3,k=new THREE.Matrix4;b+=1;var l,n,p;this.tangents=e;this.normals=f;this.binormals=g;for(l=0;l<b;l++)n=l/(b-1),e[l]=a.getTangentAt(n),e[l].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;l=Math.abs(e[0].x);n=Math.abs(e[0].y);p=Math.abs(e[0].z);l<=a&&(a=l,d.set(1,0,0));n<=a&&(a=n,d.set(0,1,0));p<=a&&d.set(0,0,1);h.crossVectors(e[0],d).normalize();f[0].crossVectors(e[0],\r\nh);g[0].crossVectors(e[0],f[0]);for(l=1;l<b;l++)f[l]=f[l-1].clone(),g[l]=g[l-1].clone(),h.crossVectors(e[l-1],e[l]),h.length()>Number.EPSILON&&(h.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(k.makeRotationAxis(h,d))),g[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(h.crossVectors(f[0],f[b-1]))&&(d=-d),l=1;l<b;l++)f[l].applyMatrix4(k.makeRotationAxis(e[l],d*l)),g[l].crossVectors(e[l],f[l])};\r\nTHREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c,d){d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()],void 0,d);k.faces.push(d);u.copy(a).add(b).add(c).divideScalar(3);d=Math.atan2(u.z,-u.x);k.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}function g(a,\r\nb){for(var c=Math.pow(2,b),d=e(k.vertices[a.a]),g=e(k.vertices[a.b]),h=e(k.vertices[a.c]),l=[],m=a.materialIndex,n=0;n<=c;n++){l[n]=[];for(var p=e(d.clone().lerp(h,n/c)),q=e(g.clone().lerp(h,n/c)),r=c-n,s=0;s<=r;s++)l[n][s]=0===s&&n===c?p:e(p.clone().lerp(q,s/r))}for(n=0;n<c;n++)for(s=0;s<2*(c-n)-1;s++)d=Math.floor(s/2),0===s%2?f(l[n][d+1],l[n+1][d],l[n][d],m):f(l[n][d+1],l[n+1][d+1],l[n+1][d],m)}function h(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/\r\n2/Math.PI+.5,a.y));return a.clone()}THREE.Geometry.call(this);this.type=\"PolyhedronGeometry\";this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;for(var k=this,l=0,n=a.length;l<n;l+=3)e(new THREE.Vector3(a[l],a[l+1],a[l+2]));a=this.vertices;for(var p=[],m=l=0,n=b.length;l<n;l+=3,m++){var q=a[b[l]],r=a[b[l+1]],s=a[b[l+2]];p[m]=new THREE.Face3(q.index,r.index,s.index,[q.clone(),r.clone(),s.clone()],void 0,m)}for(var u=new THREE.Vector3,l=0,n=p.length;l<n;l++)g(p[l],d);l=0;for(n=this.faceVertexUvs[0].length;l<\r\nn;l++)b=this.faceVertexUvs[0][l],d=b[0].x,a=b[1].x,p=b[2].x,m=Math.max(d,a,p),q=Math.min(d,a,p),.9<m&&.1>q&&(.2>d&&(b[0].x+=1),.2>a&&(b[1].x+=1),.2>p&&(b[2].x+=1));l=0;for(n=this.vertices.length;l<n;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry;\r\nTHREE.DodecahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2,d=1/c;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,\r\n12,14,1,14,5,1,5,9],a,b);this.type=\"DodecahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.DodecahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry;\r\nTHREE.IcosahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type=\"IcosahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.IcosahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);\r\nTHREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;THREE.OctahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type=\"OctahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.OctahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry;\r\nTHREE.TetrahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type=\"TetrahedronGeometry\";this.parameters={radius:a,detail:b}};THREE.TetrahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry;\r\nTHREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);this.type=\"ParametricGeometry\";this.parameters={func:a,slices:b,stacks:c};var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,h,k,l,n=b+1;for(g=0;g<=c;g++)for(l=g/c,h=0;h<=b;h++)k=h/b,k=a(k,l),d.push(k);var p,m,q,r;for(g=0;g<c;g++)for(h=0;h<b;h++)a=g*n+h,d=g*n+h+1,l=(g+1)*n+h+1,k=(g+1)*n+h,p=new THREE.Vector2(h/b,g/c),m=new THREE.Vector2((h+1)/b,g/c),q=new THREE.Vector2((h+1)/b,(g+1)/c),r=new THREE.Vector2(h/b,(g+1)/c),e.push(new THREE.Face3(a,\r\nd,k)),f.push([p,m,r]),e.push(new THREE.Face3(d,l,k)),f.push([m.clone(),q,r.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry;\r\nTHREE.WireframeGeometry=function(a){function b(a,b){return a-b}THREE.BufferGeometry.call(this);var c=[0,0],d={},e=[\"a\",\"b\",\"c\"];if(a instanceof THREE.Geometry){var f=a.vertices,g=a.faces,h=0,k=new Uint32Array(6*g.length);a=0;for(var l=g.length;a<l;a++)for(var n=g[a],p=0;3>p;p++){c[0]=n[e[p]];c[1]=n[e[(p+1)%3]];c.sort(b);var m=c.toString();void 0===d[m]&&(k[2*h]=c[0],k[2*h+1]=c[1],d[m]=!0,h++)}c=new Float32Array(6*h);a=0;for(l=h;a<l;a++)for(p=0;2>p;p++)d=f[k[2*a+p]],h=6*a+3*p,c[h+0]=d.x,c[h+1]=d.y,\r\nc[h+2]=d.z;this.addAttribute(\"position\",new THREE.BufferAttribute(c,3))}else if(a instanceof THREE.BufferGeometry){if(null!==a.index){l=a.index.array;f=a.attributes.position;e=a.groups;h=0;0===e.length&&a.addGroup(0,l.length);k=new Uint32Array(2*l.length);g=0;for(n=e.length;g<n;++g){a=e[g];p=a.start;m=a.count;a=p;for(var q=p+m;a<q;a+=3)for(p=0;3>p;p++)c[0]=l[a+p],c[1]=l[a+(p+1)%3],c.sort(b),m=c.toString(),void 0===d[m]&&(k[2*h]=c[0],k[2*h+1]=c[1],d[m]=!0,h++)}c=new Float32Array(6*h);a=0;for(l=h;a<\r\nl;a++)for(p=0;2>p;p++)h=6*a+3*p,d=k[2*a+p],c[h+0]=f.getX(d),c[h+1]=f.getY(d),c[h+2]=f.getZ(d)}else for(f=a.attributes.position.array,h=f.length/3,k=h/3,c=new Float32Array(6*h),a=0,l=k;a<l;a++)for(p=0;3>p;p++)h=18*a+6*p,k=9*a+3*p,c[h+0]=f[k],c[h+1]=f[k+1],c[h+2]=f[k+2],d=9*a+(p+1)%3*3,c[h+3]=f[d],c[h+4]=f[d+1],c[h+5]=f[d+2];this.addAttribute(\"position\",new THREE.BufferAttribute(c,3))}};THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);\r\nTHREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry;THREE.AxisHelper=function(a){a=a||1;var b=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),c=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]);a=new THREE.BufferGeometry;a.addAttribute(\"position\",new THREE.BufferAttribute(b,3));a.addAttribute(\"color\",new THREE.BufferAttribute(c,3));b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,a,b)};THREE.AxisHelper.prototype=Object.create(THREE.LineSegments.prototype);\r\nTHREE.AxisHelper.prototype.constructor=THREE.AxisHelper;\r\nTHREE.ArrowHelper=function(){var a=new THREE.BufferGeometry;a.addAttribute(\"position\",new THREE.Float32Attribute([0,0,0,0,1,0],3));var b=new THREE.CylinderBufferGeometry(0,.5,1,5,1);b.translate(0,-.5,0);return function(c,d,e,f,g,h){THREE.Object3D.call(this);void 0===f&&(f=16776960);void 0===e&&(e=1);void 0===g&&(g=.2*e);void 0===h&&(h=.2*g);this.position.copy(d);this.line=new THREE.Line(a,new THREE.LineBasicMaterial({color:f}));this.line.matrixAutoUpdate=!1;this.add(this.line);this.cone=new THREE.Mesh(b,\r\nnew THREE.MeshBasicMaterial({color:f}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(c);this.setLength(e,g,h)}}();THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper;\r\nTHREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();THREE.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,Math.max(0,a-b),1);this.line.updateMatrix();this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};\r\nTHREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.copy(a);this.cone.material.color.copy(a)};THREE.BoxHelper=function(a){var b=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),c=new Float32Array(24),d=new THREE.BufferGeometry;d.setIndex(new THREE.BufferAttribute(b,1));d.addAttribute(\"position\",new THREE.BufferAttribute(c,3));THREE.LineSegments.call(this,d,new THREE.LineBasicMaterial({color:16776960}));void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.LineSegments.prototype);\r\nTHREE.BoxHelper.prototype.constructor=THREE.BoxHelper;\r\nTHREE.BoxHelper.prototype.update=function(){var a=new THREE.Box3;return function(b){b instanceof THREE.Box3?a.copy(b):a.setFromObject(b);if(!a.isEmpty()){b=a.min;var c=a.max,d=this.geometry.attributes.position,e=d.array;e[0]=c.x;e[1]=c.y;e[2]=c.z;e[3]=b.x;e[4]=c.y;e[5]=c.z;e[6]=b.x;e[7]=b.y;e[8]=c.z;e[9]=c.x;e[10]=b.y;e[11]=c.z;e[12]=c.x;e[13]=c.y;e[14]=b.z;e[15]=b.x;e[16]=c.y;e[17]=b.z;e[18]=b.x;e[19]=b.y;e[20]=b.z;e[21]=c.x;e[22]=b.y;e[23]=b.z;d.needsUpdate=!0;this.geometry.computeBoundingSphere()}}}();\r\nTHREE.BoundingBoxHelper=function(a,b){var c=void 0!==b?b:8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};\r\nTHREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b(\"n1\",\"n2\",16755200);b(\"n2\",\"n4\",16755200);b(\"n4\",\"n3\",16755200);b(\"n3\",\"n1\",16755200);b(\"f1\",\"f2\",16755200);b(\"f2\",\"f4\",16755200);b(\"f4\",\"f3\",16755200);b(\"f3\",\"f1\",16755200);b(\"n1\",\"f1\",16755200);\r\nb(\"n2\",\"f2\",16755200);b(\"n3\",\"f3\",16755200);b(\"n4\",\"f4\",16755200);b(\"p\",\"n1\",16711680);b(\"p\",\"n2\",16711680);b(\"p\",\"n3\",16711680);b(\"p\",\"n4\",16711680);b(\"u1\",\"u2\",43775);b(\"u2\",\"u3\",43775);b(\"u3\",\"u1\",43775);b(\"c\",\"t\",16777215);b(\"p\",\"c\",3355443);b(\"cn1\",\"cn2\",3355443);b(\"cn3\",\"cn4\",3355443);b(\"cf1\",\"cf2\",3355443);b(\"cf3\",\"cf4\",3355443);THREE.LineSegments.call(this,d,e);this.camera=a;this.camera.updateProjectionMatrix();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};\r\nTHREE.CameraHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.CameraHelper.prototype.constructor=THREE.CameraHelper;\r\nTHREE.CameraHelper.prototype.update=function(){function a(a,g,h,k){d.set(g,h,k).unproject(e);a=c[a];if(void 0!==a)for(g=0,h=a.length;g<h;g++)b.vertices[a[g]].copy(d)}var b,c,d=new THREE.Vector3,e=new THREE.Camera;return function(){b=this.geometry;c=this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a(\"c\",0,0,-1);a(\"t\",0,0,1);a(\"n1\",-1,-1,-1);a(\"n2\",1,-1,-1);a(\"n3\",-1,1,-1);a(\"n4\",1,1,-1);a(\"f1\",-1,-1,1);a(\"f2\",1,-1,1);a(\"f3\",-1,1,1);a(\"f4\",1,1,1);a(\"u1\",.7,1.1,-1);a(\"u2\",-.7,1.1,\r\n-1);a(\"u3\",0,2,-1);a(\"cf1\",-1,0,1);a(\"cf2\",1,0,1);a(\"cf3\",0,-1,1);a(\"cf4\",0,1,1);a(\"cn1\",-1,0,-1);a(\"cn2\",1,0,-1);a(\"cn3\",0,-1,-1);a(\"cn4\",0,1,-1);b.verticesNeedUpdate=!0}}();\r\nTHREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;void 0===b&&(b=1);var c=new THREE.BufferGeometry;c.addAttribute(\"position\",new THREE.Float32Attribute([-b,b,0,b,b,0,b,-b,0,-b,-b,0,-b,b,0],3));var d=new THREE.LineBasicMaterial({fog:!1});this.add(new THREE.Line(c,d));c=new THREE.BufferGeometry;c.addAttribute(\"position\",new THREE.Float32Attribute([0,0,0,0,0,1],3));this.add(new THREE.Line(c,\r\nd));this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper;THREE.DirectionalLightHelper.prototype.dispose=function(){var a=this.children[0],b=this.children[1];a.geometry.dispose();a.material.dispose();b.geometry.dispose();b.material.dispose()};\r\nTHREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);var d=this.children[0],e=this.children[1];d.lookAt(c);d.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);e.lookAt(c);e.scale.z=c.length()}}();\r\nTHREE.EdgesHelper=function(a,b,c){b=void 0!==b?b:16777215;THREE.LineSegments.call(this,new THREE.EdgesGeometry(a.geometry,c),new THREE.LineBasicMaterial({color:b}));this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.EdgesHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper;\r\nTHREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=0;c=this.object.geometry;c instanceof THREE.Geometry?b=c.faces.length:console.warn(\"THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.\");c=new THREE.BufferGeometry;b=new THREE.Float32Attribute(6*b,3);c.addAttribute(\"position\",b);THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:a,linewidth:d}));this.matrixAutoUpdate=\r\n!1;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper;\r\nTHREE.FaceNormalsHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(){this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);for(var d=this.object.matrixWorld,e=this.geometry.attributes.position,f=this.object.geometry,g=f.vertices,f=f.faces,h=0,k=0,l=f.length;k<l;k++){var n=f[k],p=n.normal;a.copy(g[n.a]).add(g[n.b]).add(g[n.c]).divideScalar(3).applyMatrix4(d);b.copy(p).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);\r\ne.setXYZ(h,a.x,a.y,a.z);h+=1;e.setXYZ(h,b.x,b.y,b.z);h+=1}e.needsUpdate=!0;return this}}();\r\nTHREE.GridHelper=function(a,b,c,d){c=new THREE.Color(void 0!==c?c:4473924);d=new THREE.Color(void 0!==d?d:8947848);for(var e=[],f=[],g=-a,h=0;g<=a;g+=b){e.push(-a,0,g,a,0,g);e.push(g,0,-a,g,0,a);var k=0===g?c:d;k.toArray(f,h);h+=3;k.toArray(f,h);h+=3;k.toArray(f,h);h+=3;k.toArray(f,h);h+=3}a=new THREE.BufferGeometry;a.addAttribute(\"position\",new THREE.Float32Attribute(e,3));a.addAttribute(\"color\",new THREE.Float32Attribute(f,3));e=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,\r\na,e)};THREE.GridHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.GridHelper.prototype.constructor=THREE.GridHelper;THREE.GridHelper.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")};\r\nTHREE.HemisphereLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];var c=new THREE.SphereGeometry(b,4,2);c.rotateX(-Math.PI/2);for(var d=0;8>d;d++)c.faces[d].color=this.colors[4>d?0:1];d=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(c,d);this.add(this.lightSphere);this.update()};\r\nTHREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};\r\nTHREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();\r\nTHREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereBufferGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper;\r\nTHREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};\r\nTHREE.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var b=new THREE.Geometry,c=0;c<this.bones.length;c++)this.bones[c].parent instanceof THREE.Bone&&(b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3),b.colors.push(new THREE.Color(0,0,1)),b.colors.push(new THREE.Color(0,1,0)));b.dynamic=!0;c=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.LineSegments.call(this,b,c);this.root=a;this.matrix=a.matrixWorld;\r\nthis.matrixAutoUpdate=!1;this.update()};THREE.SkeletonHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList=function(a){var b=[];a instanceof THREE.Bone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,this.getBoneList(a.children[c]));return b};\r\nTHREE.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,b=(new THREE.Matrix4).getInverse(this.root.matrixWorld),c=new THREE.Matrix4,d=0,e=0;e<this.bones.length;e++){var f=this.bones[e];f.parent instanceof THREE.Bone&&(c.multiplyMatrices(b,f.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(b,f.parent.matrixWorld),a.vertices[d+1].setFromMatrixPosition(c),d+=2)}a.verticesNeedUpdate=!0;a.computeBoundingSphere()};\r\nTHREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.BufferGeometry;for(var b=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],c=0,d=1;32>c;c++,d++){var e=c/32*Math.PI*2,f=d/32*Math.PI*2;b.push(Math.cos(e),Math.sin(e),1,Math.cos(f),Math.sin(f),1)}a.addAttribute(\"position\",new THREE.Float32Attribute(b,3));b=new THREE.LineBasicMaterial({fog:!1});this.cone=new THREE.LineSegments(a,\r\nb);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper;THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};\r\nTHREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E3,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();\r\nTHREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16711680;d=void 0!==d?d:1;b=0;c=this.object.geometry;c instanceof THREE.Geometry?b=3*c.faces.length:c instanceof THREE.BufferGeometry&&(b=c.attributes.normal.count);c=new THREE.BufferGeometry;b=new THREE.Float32Attribute(6*b,3);c.addAttribute(\"position\",b);THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()};\r\nTHREE.VertexNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper;\r\nTHREE.VertexNormalsHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(){var d=[\"a\",\"b\",\"c\"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var e=this.object.matrixWorld,f=this.geometry.attributes.position,g=this.object.geometry;if(g instanceof THREE.Geometry)for(var h=g.vertices,k=g.faces,l=g=0,n=k.length;l<n;l++)for(var p=k[l],m=0,q=p.vertexNormals.length;m<q;m++){var r=p.vertexNormals[m];a.copy(h[p[d[m]]]).applyMatrix4(e);\r\nb.copy(r).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);f.setXYZ(g,a.x,a.y,a.z);g+=1;f.setXYZ(g,b.x,b.y,b.z);g+=1}else if(g instanceof THREE.BufferGeometry)for(d=g.attributes.position,h=g.attributes.normal,m=g=0,q=d.count;m<q;m++)a.set(d.getX(m),d.getY(m),d.getZ(m)).applyMatrix4(e),b.set(h.getX(m),h.getY(m),h.getZ(m)),b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),f.setXYZ(g,a.x,a.y,a.z),g+=1,f.setXYZ(g,b.x,b.y,b.z),g+=1;f.needsUpdate=!0;return this}}();\r\nTHREE.WireframeHelper=function(a,b){var c=void 0!==b?b:16777215;THREE.LineSegments.call(this,new THREE.WireframeGeometry(a.geometry),new THREE.LineBasicMaterial({color:c}));this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.WireframeHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper;THREE.ImmediateRenderObject=function(a){THREE.Object3D.call(this);this.material=a;this.render=function(a){}};\r\nTHREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject;THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation(\"__default\",0,c-1,c/1);this.setAnimationWeight(\"__default\",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh;\r\nTHREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={start:b,end:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)_?(\\d+)/i,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(b);if(h&&1<h.length){var k=h[1];d[k]||(d[k]={start:Infinity,end:-Infinity});h=d[k];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=k)}}for(k in d)h=d[k],this.createAnimation(k,h.start,h.end,a);this.firstAnimation=c};\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):console.warn(\"THREE.MorphBlendMesh: animation[\"+a+\"] undefined in .playAnimation()\")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};\r\nTHREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.start+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;f!==d.currentFrame&&\r\n(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);d.currentFrame!==d.lastFrame?(this.morphTargetInfluences[d.currentFrame]=e*g,this.morphTargetInfluences[d.lastFrame]=(1-e)*g):this.morphTargetInfluences[d.currentFrame]=g}}};\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/three.min.js\n ** module id = 269\n ** module chunks = 1\n **/","module.exports = \" <div id=canvas-box _v-4f873413=\\\"\\\"> <h3 _v-4f873413=\\\"\\\">个人项目</h3> <h3 _v-4f873413=\\\"\\\">团队项目</h3> <h3 _v-4f873413=\\\"\\\">团队项目</h3> <h3 _v-4f873413=\\\"\\\">团队项目</h3> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-4f873413!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/demo/demo.vue\n ** module id = 277\n ** module chunks = 1\n **/"],"sourceRoot":""}